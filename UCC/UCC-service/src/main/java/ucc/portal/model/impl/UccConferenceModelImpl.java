/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ucc.portal.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import ucc.portal.model.UccConference;
import ucc.portal.model.UccConferenceModel;
import ucc.portal.model.UccConferenceSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UccConference service. Represents a row in the &quot;UCC_Data_Warehouse.dbo.Conference&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UccConferenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UccConferenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UccConferenceImpl
 * @see UccConference
 * @see UccConferenceModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class UccConferenceModelImpl extends BaseModelImpl<UccConference>
	implements UccConferenceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ucc conference model instance should use the {@link UccConference} interface instead.
	 */
	public static final String TABLE_NAME = "UCC_Data_Warehouse.dbo.Conference";
	public static final Object[][] TABLE_COLUMNS = {
			{ "conferenceId", Types.INTEGER },
			{ "conference_name", Types.VARCHAR },
			{ "confabbr", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("conferenceId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("conference_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("confabbr", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table UCC_Data_Warehouse.dbo.Conference (conferenceId INTEGER not null primary key,conference_name VARCHAR(75) null,confabbr VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table UCC_Data_Warehouse.dbo.Conference";
	public static final String ORDER_BY_JPQL = " ORDER BY uccConference.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UCC_Data_Warehouse.dbo.Conference.conference_name ASC";
	public static final String DATA_SOURCE = "uccDataSource";
	public static final String SESSION_FACTORY = "uccSessionFactory";
	public static final String TX_MANAGER = "uccTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ucc.portal.model.UccConference"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ucc.portal.model.UccConference"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UccConference toModel(UccConferenceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UccConference model = new UccConferenceImpl();

		model.setUccConferenceId(soapModel.getUccConferenceId());
		model.setName(soapModel.getName());
		model.setAbbreviation(soapModel.getAbbreviation());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UccConference> toModels(UccConferenceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UccConference> models = new ArrayList<UccConference>(soapModels.length);

		for (UccConferenceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ucc.portal.service.util.ServiceProps.get(
				"lock.expiration.time.ucc.portal.model.UccConference"));

	public UccConferenceModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _uccConferenceId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setUccConferenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _uccConferenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UccConference.class;
	}

	@Override
	public String getModelClassName() {
		return UccConference.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uccConferenceId", getUccConferenceId());
		attributes.put("name", getName());
		attributes.put("abbreviation", getAbbreviation());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer uccConferenceId = (Integer)attributes.get("uccConferenceId");

		if (uccConferenceId != null) {
			setUccConferenceId(uccConferenceId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String abbreviation = (String)attributes.get("abbreviation");

		if (abbreviation != null) {
			setAbbreviation(abbreviation);
		}
	}

	@JSON
	@Override
	public int getUccConferenceId() {
		return _uccConferenceId;
	}

	@Override
	public void setUccConferenceId(int uccConferenceId) {
		_uccConferenceId = uccConferenceId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getAbbreviation() {
		if (_abbreviation == null) {
			return "";
		}
		else {
			return _abbreviation;
		}
	}

	@Override
	public void setAbbreviation(String abbreviation) {
		_abbreviation = abbreviation;
	}

	@Override
	public UccConference toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UccConference)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UccConferenceImpl uccConferenceImpl = new UccConferenceImpl();

		uccConferenceImpl.setUccConferenceId(getUccConferenceId());
		uccConferenceImpl.setName(getName());
		uccConferenceImpl.setAbbreviation(getAbbreviation());

		uccConferenceImpl.resetOriginalValues();

		return uccConferenceImpl;
	}

	@Override
	public int compareTo(UccConference uccConference) {
		int value = 0;

		value = getName().compareTo(uccConference.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UccConference)) {
			return false;
		}

		UccConference uccConference = (UccConference)obj;

		int primaryKey = uccConference.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<UccConference> toCacheModel() {
		UccConferenceCacheModel uccConferenceCacheModel = new UccConferenceCacheModel();

		uccConferenceCacheModel.uccConferenceId = getUccConferenceId();

		uccConferenceCacheModel.name = getName();

		String name = uccConferenceCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			uccConferenceCacheModel.name = null;
		}

		uccConferenceCacheModel.abbreviation = getAbbreviation();

		String abbreviation = uccConferenceCacheModel.abbreviation;

		if ((abbreviation != null) && (abbreviation.length() == 0)) {
			uccConferenceCacheModel.abbreviation = null;
		}

		return uccConferenceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{uccConferenceId=");
		sb.append(getUccConferenceId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", abbreviation=");
		sb.append(getAbbreviation());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("ucc.portal.model.UccConference");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uccConferenceId</column-name><column-value><![CDATA[");
		sb.append(getUccConferenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>abbreviation</column-name><column-value><![CDATA[");
		sb.append(getAbbreviation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UccConference.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UccConference.class, ModelWrapper.class
		};
	private int _uccConferenceId;
	private String _name;
	private String _abbreviation;
	private UccConference _escapedModel;
}