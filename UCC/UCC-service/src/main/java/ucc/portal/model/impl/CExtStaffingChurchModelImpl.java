/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ucc.portal.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import ucc.portal.model.CExtStaffingChurch;
import ucc.portal.model.CExtStaffingChurchModel;

import ucc.portal.service.persistence.CExtStaffingChurchPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CExtStaffingChurch service. Represents a row in the &quot;UCC_CExtStaffingChurch&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CExtStaffingChurchModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CExtStaffingChurchImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CExtStaffingChurchImpl
 * @see CExtStaffingChurch
 * @see CExtStaffingChurchModel
 * @generated
 */
@ProviderType
public class CExtStaffingChurchModelImpl extends BaseModelImpl<CExtStaffingChurch>
	implements CExtStaffingChurchModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a c ext staffing church model instance should use the {@link CExtStaffingChurch} interface instead.
	 */
	public static final String TABLE_NAME = "UCC_CExtStaffingChurch";
	public static final Object[][] TABLE_COLUMNS = {
			{ "organizationId", Types.BIGINT },
			{ "cextStaffingChurchId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "sfPosition", Types.VARCHAR },
			{ "sfHeadOfStaff", Types.BOOLEAN },
			{ "sfCompensation", Types.VARCHAR },
			{ "sfSupervisedBy", Types.VARCHAR },
			{ "sfCurrentTenure", Types.VARCHAR },
			{ "sfPriority", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cextStaffingChurchId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sfPosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sfHeadOfStaff", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("sfCompensation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sfSupervisedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sfCurrentTenure", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sfPriority", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table UCC_CExtStaffingChurch (organizationId LONG not null,cextStaffingChurchId LONG not null,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,sfPosition VARCHAR(75) null,sfHeadOfStaff BOOLEAN,sfCompensation VARCHAR(75) null,sfSupervisedBy VARCHAR(75) null,sfCurrentTenure VARCHAR(75) null,sfPriority DOUBLE,primary key (organizationId, cextStaffingChurchId))";
	public static final String TABLE_SQL_DROP = "drop table UCC_CExtStaffingChurch";
	public static final String ORDER_BY_JPQL = " ORDER BY cExtStaffingChurch.sfPriority ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UCC_CExtStaffingChurch.sfPriority ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "extSessionFactory";
	public static final String TX_MANAGER = "extTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ucc.portal.model.CExtStaffingChurch"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ucc.portal.model.CExtStaffingChurch"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ucc.portal.model.CExtStaffingChurch"),
			true);
	public static final long ORGANIZATIONID_COLUMN_BITMASK = 1L;
	public static final long SFPRIORITY_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ucc.portal.service.util.ServiceProps.get(
				"lock.expiration.time.ucc.portal.model.CExtStaffingChurch"));

	public CExtStaffingChurchModelImpl() {
	}

	@Override
	public CExtStaffingChurchPK getPrimaryKey() {
		return new CExtStaffingChurchPK(_organizationId, _cextStaffingChurchId);
	}

	@Override
	public void setPrimaryKey(CExtStaffingChurchPK primaryKey) {
		setOrganizationId(primaryKey.organizationId);
		setCextStaffingChurchId(primaryKey.cextStaffingChurchId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new CExtStaffingChurchPK(_organizationId, _cextStaffingChurchId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((CExtStaffingChurchPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return CExtStaffingChurch.class;
	}

	@Override
	public String getModelClassName() {
		return CExtStaffingChurch.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("organizationId", getOrganizationId());
		attributes.put("cextStaffingChurchId", getCextStaffingChurchId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("sfPosition", getSfPosition());
		attributes.put("sfHeadOfStaff", isSfHeadOfStaff());
		attributes.put("sfCompensation", getSfCompensation());
		attributes.put("sfSupervisedBy", getSfSupervisedBy());
		attributes.put("sfCurrentTenure", getSfCurrentTenure());
		attributes.put("sfPriority", getSfPriority());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long organizationId = (Long)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}

		Long cextStaffingChurchId = (Long)attributes.get("cextStaffingChurchId");

		if (cextStaffingChurchId != null) {
			setCextStaffingChurchId(cextStaffingChurchId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String sfPosition = (String)attributes.get("sfPosition");

		if (sfPosition != null) {
			setSfPosition(sfPosition);
		}

		Boolean sfHeadOfStaff = (Boolean)attributes.get("sfHeadOfStaff");

		if (sfHeadOfStaff != null) {
			setSfHeadOfStaff(sfHeadOfStaff);
		}

		String sfCompensation = (String)attributes.get("sfCompensation");

		if (sfCompensation != null) {
			setSfCompensation(sfCompensation);
		}

		String sfSupervisedBy = (String)attributes.get("sfSupervisedBy");

		if (sfSupervisedBy != null) {
			setSfSupervisedBy(sfSupervisedBy);
		}

		String sfCurrentTenure = (String)attributes.get("sfCurrentTenure");

		if (sfCurrentTenure != null) {
			setSfCurrentTenure(sfCurrentTenure);
		}

		Double sfPriority = (Double)attributes.get("sfPriority");

		if (sfPriority != null) {
			setSfPriority(sfPriority);
		}
	}

	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_columnBitmask |= ORGANIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalOrganizationId) {
			_setOriginalOrganizationId = true;

			_originalOrganizationId = _organizationId;
		}

		_organizationId = organizationId;
	}

	public long getOriginalOrganizationId() {
		return _originalOrganizationId;
	}

	@Override
	public long getCextStaffingChurchId() {
		return _cextStaffingChurchId;
	}

	@Override
	public void setCextStaffingChurchId(long cextStaffingChurchId) {
		_cextStaffingChurchId = cextStaffingChurchId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getSfPosition() {
		if (_sfPosition == null) {
			return "";
		}
		else {
			return _sfPosition;
		}
	}

	@Override
	public void setSfPosition(String sfPosition) {
		_sfPosition = sfPosition;
	}

	@Override
	public boolean getSfHeadOfStaff() {
		return _sfHeadOfStaff;
	}

	@Override
	public boolean isSfHeadOfStaff() {
		return _sfHeadOfStaff;
	}

	@Override
	public void setSfHeadOfStaff(boolean sfHeadOfStaff) {
		_sfHeadOfStaff = sfHeadOfStaff;
	}

	@Override
	public String getSfCompensation() {
		if (_sfCompensation == null) {
			return "";
		}
		else {
			return _sfCompensation;
		}
	}

	@Override
	public void setSfCompensation(String sfCompensation) {
		_sfCompensation = sfCompensation;
	}

	@Override
	public String getSfSupervisedBy() {
		if (_sfSupervisedBy == null) {
			return "";
		}
		else {
			return _sfSupervisedBy;
		}
	}

	@Override
	public void setSfSupervisedBy(String sfSupervisedBy) {
		_sfSupervisedBy = sfSupervisedBy;
	}

	@Override
	public String getSfCurrentTenure() {
		if (_sfCurrentTenure == null) {
			return "";
		}
		else {
			return _sfCurrentTenure;
		}
	}

	@Override
	public void setSfCurrentTenure(String sfCurrentTenure) {
		_sfCurrentTenure = sfCurrentTenure;
	}

	@Override
	public double getSfPriority() {
		return _sfPriority;
	}

	@Override
	public void setSfPriority(double sfPriority) {
		_columnBitmask = -1L;

		_sfPriority = sfPriority;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public CExtStaffingChurch toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CExtStaffingChurch)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CExtStaffingChurchImpl cExtStaffingChurchImpl = new CExtStaffingChurchImpl();

		cExtStaffingChurchImpl.setOrganizationId(getOrganizationId());
		cExtStaffingChurchImpl.setCextStaffingChurchId(getCextStaffingChurchId());
		cExtStaffingChurchImpl.setCompanyId(getCompanyId());
		cExtStaffingChurchImpl.setUserId(getUserId());
		cExtStaffingChurchImpl.setCreateDate(getCreateDate());
		cExtStaffingChurchImpl.setModifiedDate(getModifiedDate());
		cExtStaffingChurchImpl.setSfPosition(getSfPosition());
		cExtStaffingChurchImpl.setSfHeadOfStaff(isSfHeadOfStaff());
		cExtStaffingChurchImpl.setSfCompensation(getSfCompensation());
		cExtStaffingChurchImpl.setSfSupervisedBy(getSfSupervisedBy());
		cExtStaffingChurchImpl.setSfCurrentTenure(getSfCurrentTenure());
		cExtStaffingChurchImpl.setSfPriority(getSfPriority());

		cExtStaffingChurchImpl.resetOriginalValues();

		return cExtStaffingChurchImpl;
	}

	@Override
	public int compareTo(CExtStaffingChurch cExtStaffingChurch) {
		int value = 0;

		if (getSfPriority() < cExtStaffingChurch.getSfPriority()) {
			value = -1;
		}
		else if (getSfPriority() > cExtStaffingChurch.getSfPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CExtStaffingChurch)) {
			return false;
		}

		CExtStaffingChurch cExtStaffingChurch = (CExtStaffingChurch)obj;

		CExtStaffingChurchPK primaryKey = cExtStaffingChurch.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CExtStaffingChurchModelImpl cExtStaffingChurchModelImpl = this;

		cExtStaffingChurchModelImpl._originalOrganizationId = cExtStaffingChurchModelImpl._organizationId;

		cExtStaffingChurchModelImpl._setOriginalOrganizationId = false;

		cExtStaffingChurchModelImpl._setModifiedDate = false;

		cExtStaffingChurchModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CExtStaffingChurch> toCacheModel() {
		CExtStaffingChurchCacheModel cExtStaffingChurchCacheModel = new CExtStaffingChurchCacheModel();

		cExtStaffingChurchCacheModel.cExtStaffingChurchPK = getPrimaryKey();

		cExtStaffingChurchCacheModel.organizationId = getOrganizationId();

		cExtStaffingChurchCacheModel.cextStaffingChurchId = getCextStaffingChurchId();

		cExtStaffingChurchCacheModel.companyId = getCompanyId();

		cExtStaffingChurchCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			cExtStaffingChurchCacheModel.createDate = createDate.getTime();
		}
		else {
			cExtStaffingChurchCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cExtStaffingChurchCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cExtStaffingChurchCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cExtStaffingChurchCacheModel.sfPosition = getSfPosition();

		String sfPosition = cExtStaffingChurchCacheModel.sfPosition;

		if ((sfPosition != null) && (sfPosition.length() == 0)) {
			cExtStaffingChurchCacheModel.sfPosition = null;
		}

		cExtStaffingChurchCacheModel.sfHeadOfStaff = isSfHeadOfStaff();

		cExtStaffingChurchCacheModel.sfCompensation = getSfCompensation();

		String sfCompensation = cExtStaffingChurchCacheModel.sfCompensation;

		if ((sfCompensation != null) && (sfCompensation.length() == 0)) {
			cExtStaffingChurchCacheModel.sfCompensation = null;
		}

		cExtStaffingChurchCacheModel.sfSupervisedBy = getSfSupervisedBy();

		String sfSupervisedBy = cExtStaffingChurchCacheModel.sfSupervisedBy;

		if ((sfSupervisedBy != null) && (sfSupervisedBy.length() == 0)) {
			cExtStaffingChurchCacheModel.sfSupervisedBy = null;
		}

		cExtStaffingChurchCacheModel.sfCurrentTenure = getSfCurrentTenure();

		String sfCurrentTenure = cExtStaffingChurchCacheModel.sfCurrentTenure;

		if ((sfCurrentTenure != null) && (sfCurrentTenure.length() == 0)) {
			cExtStaffingChurchCacheModel.sfCurrentTenure = null;
		}

		cExtStaffingChurchCacheModel.sfPriority = getSfPriority();

		return cExtStaffingChurchCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{organizationId=");
		sb.append(getOrganizationId());
		sb.append(", cextStaffingChurchId=");
		sb.append(getCextStaffingChurchId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", sfPosition=");
		sb.append(getSfPosition());
		sb.append(", sfHeadOfStaff=");
		sb.append(isSfHeadOfStaff());
		sb.append(", sfCompensation=");
		sb.append(getSfCompensation());
		sb.append(", sfSupervisedBy=");
		sb.append(getSfSupervisedBy());
		sb.append(", sfCurrentTenure=");
		sb.append(getSfCurrentTenure());
		sb.append(", sfPriority=");
		sb.append(getSfPriority());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("ucc.portal.model.CExtStaffingChurch");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cextStaffingChurchId</column-name><column-value><![CDATA[");
		sb.append(getCextStaffingChurchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfPosition</column-name><column-value><![CDATA[");
		sb.append(getSfPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfHeadOfStaff</column-name><column-value><![CDATA[");
		sb.append(isSfHeadOfStaff());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfCompensation</column-name><column-value><![CDATA[");
		sb.append(getSfCompensation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfSupervisedBy</column-name><column-value><![CDATA[");
		sb.append(getSfSupervisedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfCurrentTenure</column-name><column-value><![CDATA[");
		sb.append(getSfCurrentTenure());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfPriority</column-name><column-value><![CDATA[");
		sb.append(getSfPriority());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CExtStaffingChurch.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CExtStaffingChurch.class, ModelWrapper.class
		};
	private long _organizationId;
	private long _originalOrganizationId;
	private boolean _setOriginalOrganizationId;
	private long _cextStaffingChurchId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _sfPosition;
	private boolean _sfHeadOfStaff;
	private String _sfCompensation;
	private String _sfSupervisedBy;
	private String _sfCurrentTenure;
	private double _sfPriority;
	private long _columnBitmask;
	private CExtStaffingChurch _escapedModel;
}