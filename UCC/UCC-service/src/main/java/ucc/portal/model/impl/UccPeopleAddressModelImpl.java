/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ucc.portal.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import ucc.portal.model.UccPeopleAddress;
import ucc.portal.model.UccPeopleAddressModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UccPeopleAddress service. Represents a row in the &quot;UCC_Data_Warehouse.dbo.People_Address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UccPeopleAddressModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UccPeopleAddressImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UccPeopleAddressImpl
 * @see UccPeopleAddress
 * @see UccPeopleAddressModel
 * @generated
 */
@ProviderType
public class UccPeopleAddressModelImpl extends BaseModelImpl<UccPeopleAddress>
	implements UccPeopleAddressModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ucc people address model instance should use the {@link UccPeopleAddress} interface instead.
	 */
	public static final String TABLE_NAME = "UCC_Data_Warehouse.dbo.People_Address";
	public static final Object[][] TABLE_COLUMNS = {
			{ "addressEntryId", Types.INTEGER },
			{ "peopleId", Types.INTEGER },
			{ "address1", Types.VARCHAR },
			{ "address2", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "state", Types.VARCHAR },
			{ "zipCode", Types.VARCHAR },
			{ "zip4", Types.VARCHAR },
			{ "addressType", Types.VARCHAR },
			{ "country", Types.VARCHAR },
			{ "active", Types.BOOLEAN },
			{ "inactive_date", Types.TIMESTAMP },
			{ "modified_by", Types.VARCHAR },
			{ "modified_date", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("addressEntryId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("peopleId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("address1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zip4", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("active", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("inactive_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modified_by", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modified_date", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table UCC_Data_Warehouse.dbo.People_Address (addressEntryId INTEGER not null primary key IDENTITY,peopleId INTEGER,address1 VARCHAR(75) null,address2 VARCHAR(75) null,city VARCHAR(75) null,state VARCHAR(75) null,zipCode VARCHAR(75) null,zip4 VARCHAR(75) null,addressType VARCHAR(75) null,country VARCHAR(75) null,active BOOLEAN,inactive_date DATE null,modified_by VARCHAR(75) null,modified_date DATE null)";
	public static final String TABLE_SQL_DROP = "drop table UCC_Data_Warehouse.dbo.People_Address";
	public static final String ORDER_BY_JPQL = " ORDER BY uccPeopleAddress.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY UCC_Data_Warehouse.dbo.People_Address.modified_date DESC";
	public static final String DATA_SOURCE = "uccDataSource";
	public static final String SESSION_FACTORY = "uccSessionFactory";
	public static final String TX_MANAGER = "uccTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ucc.portal.model.UccPeopleAddress"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ucc.portal.model.UccPeopleAddress"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ucc.portal.model.UccPeopleAddress"),
			true);
	public static final long MYACTIVE_COLUMN_BITMASK = 1L;
	public static final long TYPE_COLUMN_BITMASK = 2L;
	public static final long UCCPEOPLEID_COLUMN_BITMASK = 4L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ucc.portal.service.util.ServiceProps.get(
				"lock.expiration.time.ucc.portal.model.UccPeopleAddress"));

	public UccPeopleAddressModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _uccPeopleAddressId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setUccPeopleAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _uccPeopleAddressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UccPeopleAddress.class;
	}

	@Override
	public String getModelClassName() {
		return UccPeopleAddress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uccPeopleAddressId", getUccPeopleAddressId());
		attributes.put("uccPeopleId", getUccPeopleId());
		attributes.put("street1", getStreet1());
		attributes.put("street2", getStreet2());
		attributes.put("city", getCity());
		attributes.put("region", getRegion());
		attributes.put("zip", getZip());
		attributes.put("zipPlus", getZipPlus());
		attributes.put("type", getType());
		attributes.put("country", getCountry());
		attributes.put("myActive", isMyActive());
		attributes.put("inactiveDate", getInactiveDate());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer uccPeopleAddressId = (Integer)attributes.get(
				"uccPeopleAddressId");

		if (uccPeopleAddressId != null) {
			setUccPeopleAddressId(uccPeopleAddressId);
		}

		Integer uccPeopleId = (Integer)attributes.get("uccPeopleId");

		if (uccPeopleId != null) {
			setUccPeopleId(uccPeopleId);
		}

		String street1 = (String)attributes.get("street1");

		if (street1 != null) {
			setStreet1(street1);
		}

		String street2 = (String)attributes.get("street2");

		if (street2 != null) {
			setStreet2(street2);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String region = (String)attributes.get("region");

		if (region != null) {
			setRegion(region);
		}

		String zip = (String)attributes.get("zip");

		if (zip != null) {
			setZip(zip);
		}

		String zipPlus = (String)attributes.get("zipPlus");

		if (zipPlus != null) {
			setZipPlus(zipPlus);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		Boolean myActive = (Boolean)attributes.get("myActive");

		if (myActive != null) {
			setMyActive(myActive);
		}

		Date inactiveDate = (Date)attributes.get("inactiveDate");

		if (inactiveDate != null) {
			setInactiveDate(inactiveDate);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public int getUccPeopleAddressId() {
		return _uccPeopleAddressId;
	}

	@Override
	public void setUccPeopleAddressId(int uccPeopleAddressId) {
		_uccPeopleAddressId = uccPeopleAddressId;
	}

	@Override
	public int getUccPeopleId() {
		return _uccPeopleId;
	}

	@Override
	public void setUccPeopleId(int uccPeopleId) {
		_columnBitmask |= UCCPEOPLEID_COLUMN_BITMASK;

		if (!_setOriginalUccPeopleId) {
			_setOriginalUccPeopleId = true;

			_originalUccPeopleId = _uccPeopleId;
		}

		_uccPeopleId = uccPeopleId;
	}

	public int getOriginalUccPeopleId() {
		return _originalUccPeopleId;
	}

	@Override
	public String getStreet1() {
		if (_street1 == null) {
			return "";
		}
		else {
			return _street1;
		}
	}

	@Override
	public void setStreet1(String street1) {
		_street1 = street1;
	}

	@Override
	public String getStreet2() {
		if (_street2 == null) {
			return "";
		}
		else {
			return _street2;
		}
	}

	@Override
	public void setStreet2(String street2) {
		_street2 = street2;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public String getRegion() {
		if (_region == null) {
			return "";
		}
		else {
			return _region;
		}
	}

	@Override
	public void setRegion(String region) {
		_region = region;
	}

	@Override
	public String getZip() {
		if (_zip == null) {
			return "";
		}
		else {
			return _zip;
		}
	}

	@Override
	public void setZip(String zip) {
		_zip = zip;
	}

	@Override
	public String getZipPlus() {
		if (_zipPlus == null) {
			return "";
		}
		else {
			return _zipPlus;
		}
	}

	@Override
	public void setZipPlus(String zipPlus) {
		_zipPlus = zipPlus;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public boolean getMyActive() {
		return _myActive;
	}

	@Override
	public boolean isMyActive() {
		return _myActive;
	}

	@Override
	public void setMyActive(boolean myActive) {
		_columnBitmask |= MYACTIVE_COLUMN_BITMASK;

		if (!_setOriginalMyActive) {
			_setOriginalMyActive = true;

			_originalMyActive = _myActive;
		}

		_myActive = myActive;
	}

	public boolean getOriginalMyActive() {
		return _originalMyActive;
	}

	@Override
	public Date getInactiveDate() {
		return _inactiveDate;
	}

	@Override
	public void setInactiveDate(Date inactiveDate) {
		_inactiveDate = inactiveDate;
	}

	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return "";
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public UccPeopleAddress toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UccPeopleAddress)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UccPeopleAddressImpl uccPeopleAddressImpl = new UccPeopleAddressImpl();

		uccPeopleAddressImpl.setUccPeopleAddressId(getUccPeopleAddressId());
		uccPeopleAddressImpl.setUccPeopleId(getUccPeopleId());
		uccPeopleAddressImpl.setStreet1(getStreet1());
		uccPeopleAddressImpl.setStreet2(getStreet2());
		uccPeopleAddressImpl.setCity(getCity());
		uccPeopleAddressImpl.setRegion(getRegion());
		uccPeopleAddressImpl.setZip(getZip());
		uccPeopleAddressImpl.setZipPlus(getZipPlus());
		uccPeopleAddressImpl.setType(getType());
		uccPeopleAddressImpl.setCountry(getCountry());
		uccPeopleAddressImpl.setMyActive(isMyActive());
		uccPeopleAddressImpl.setInactiveDate(getInactiveDate());
		uccPeopleAddressImpl.setModifiedBy(getModifiedBy());
		uccPeopleAddressImpl.setModifiedDate(getModifiedDate());

		uccPeopleAddressImpl.resetOriginalValues();

		return uccPeopleAddressImpl;
	}

	@Override
	public int compareTo(UccPeopleAddress uccPeopleAddress) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				uccPeopleAddress.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UccPeopleAddress)) {
			return false;
		}

		UccPeopleAddress uccPeopleAddress = (UccPeopleAddress)obj;

		int primaryKey = uccPeopleAddress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UccPeopleAddressModelImpl uccPeopleAddressModelImpl = this;

		uccPeopleAddressModelImpl._originalUccPeopleId = uccPeopleAddressModelImpl._uccPeopleId;

		uccPeopleAddressModelImpl._setOriginalUccPeopleId = false;

		uccPeopleAddressModelImpl._originalType = uccPeopleAddressModelImpl._type;

		uccPeopleAddressModelImpl._originalMyActive = uccPeopleAddressModelImpl._myActive;

		uccPeopleAddressModelImpl._setOriginalMyActive = false;

		uccPeopleAddressModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UccPeopleAddress> toCacheModel() {
		UccPeopleAddressCacheModel uccPeopleAddressCacheModel = new UccPeopleAddressCacheModel();

		uccPeopleAddressCacheModel.uccPeopleAddressId = getUccPeopleAddressId();

		uccPeopleAddressCacheModel.uccPeopleId = getUccPeopleId();

		uccPeopleAddressCacheModel.street1 = getStreet1();

		String street1 = uccPeopleAddressCacheModel.street1;

		if ((street1 != null) && (street1.length() == 0)) {
			uccPeopleAddressCacheModel.street1 = null;
		}

		uccPeopleAddressCacheModel.street2 = getStreet2();

		String street2 = uccPeopleAddressCacheModel.street2;

		if ((street2 != null) && (street2.length() == 0)) {
			uccPeopleAddressCacheModel.street2 = null;
		}

		uccPeopleAddressCacheModel.city = getCity();

		String city = uccPeopleAddressCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			uccPeopleAddressCacheModel.city = null;
		}

		uccPeopleAddressCacheModel.region = getRegion();

		String region = uccPeopleAddressCacheModel.region;

		if ((region != null) && (region.length() == 0)) {
			uccPeopleAddressCacheModel.region = null;
		}

		uccPeopleAddressCacheModel.zip = getZip();

		String zip = uccPeopleAddressCacheModel.zip;

		if ((zip != null) && (zip.length() == 0)) {
			uccPeopleAddressCacheModel.zip = null;
		}

		uccPeopleAddressCacheModel.zipPlus = getZipPlus();

		String zipPlus = uccPeopleAddressCacheModel.zipPlus;

		if ((zipPlus != null) && (zipPlus.length() == 0)) {
			uccPeopleAddressCacheModel.zipPlus = null;
		}

		uccPeopleAddressCacheModel.type = getType();

		String type = uccPeopleAddressCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			uccPeopleAddressCacheModel.type = null;
		}

		uccPeopleAddressCacheModel.country = getCountry();

		String country = uccPeopleAddressCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			uccPeopleAddressCacheModel.country = null;
		}

		uccPeopleAddressCacheModel.myActive = isMyActive();

		Date inactiveDate = getInactiveDate();

		if (inactiveDate != null) {
			uccPeopleAddressCacheModel.inactiveDate = inactiveDate.getTime();
		}
		else {
			uccPeopleAddressCacheModel.inactiveDate = Long.MIN_VALUE;
		}

		uccPeopleAddressCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = uccPeopleAddressCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			uccPeopleAddressCacheModel.modifiedBy = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			uccPeopleAddressCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			uccPeopleAddressCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return uccPeopleAddressCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{uccPeopleAddressId=");
		sb.append(getUccPeopleAddressId());
		sb.append(", uccPeopleId=");
		sb.append(getUccPeopleId());
		sb.append(", street1=");
		sb.append(getStreet1());
		sb.append(", street2=");
		sb.append(getStreet2());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", region=");
		sb.append(getRegion());
		sb.append(", zip=");
		sb.append(getZip());
		sb.append(", zipPlus=");
		sb.append(getZipPlus());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", myActive=");
		sb.append(isMyActive());
		sb.append(", inactiveDate=");
		sb.append(getInactiveDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("ucc.portal.model.UccPeopleAddress");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uccPeopleAddressId</column-name><column-value><![CDATA[");
		sb.append(getUccPeopleAddressId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uccPeopleId</column-name><column-value><![CDATA[");
		sb.append(getUccPeopleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>street1</column-name><column-value><![CDATA[");
		sb.append(getStreet1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>street2</column-name><column-value><![CDATA[");
		sb.append(getStreet2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>region</column-name><column-value><![CDATA[");
		sb.append(getRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zip</column-name><column-value><![CDATA[");
		sb.append(getZip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zipPlus</column-name><column-value><![CDATA[");
		sb.append(getZipPlus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>myActive</column-name><column-value><![CDATA[");
		sb.append(isMyActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inactiveDate</column-name><column-value><![CDATA[");
		sb.append(getInactiveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UccPeopleAddress.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UccPeopleAddress.class, ModelWrapper.class
		};
	private int _uccPeopleAddressId;
	private int _uccPeopleId;
	private int _originalUccPeopleId;
	private boolean _setOriginalUccPeopleId;
	private String _street1;
	private String _street2;
	private String _city;
	private String _region;
	private String _zip;
	private String _zipPlus;
	private String _type;
	private String _originalType;
	private String _country;
	private boolean _myActive;
	private boolean _originalMyActive;
	private boolean _setOriginalMyActive;
	private Date _inactiveDate;
	private String _modifiedBy;
	private Date _modifiedDate;
	private long _columnBitmask;
	private UccPeopleAddress _escapedModel;
}