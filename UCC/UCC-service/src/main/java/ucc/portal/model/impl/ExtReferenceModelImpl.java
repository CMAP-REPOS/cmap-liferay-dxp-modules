/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ucc.portal.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import ucc.portal.model.ExtReference;
import ucc.portal.model.ExtReferenceModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ExtReference service. Represents a row in the &quot;UCC_ExtReference&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ExtReferenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExtReferenceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExtReferenceImpl
 * @see ExtReference
 * @see ExtReferenceModel
 * @generated
 */
@ProviderType
public class ExtReferenceModelImpl extends BaseModelImpl<ExtReference>
	implements ExtReferenceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ext reference model instance should use the {@link ExtReference} interface instead.
	 */
	public static final String TABLE_NAME = "UCC_ExtReference";
	public static final Object[][] TABLE_COLUMNS = {
			{ "extReferenceId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "referenceUserId", Types.BIGINT },
			{ "userCreated", Types.BOOLEAN },
			{ "emailDate", Types.TIMESTAMP },
			{ "resendEmail", Types.BOOLEAN },
			{ "roleAndRelationship", Types.VARCHAR },
			{ "areasOfStrength", Types.VARCHAR },
			{ "areasOfGrowth", Types.VARCHAR },
			{ "significantExperience", Types.VARCHAR },
			{ "additionalComments", Types.VARCHAR },
			{ "submitDate", Types.TIMESTAMP },
			{ "userFirstName", Types.VARCHAR },
			{ "userMiddleName", Types.VARCHAR },
			{ "userLastName", Types.VARCHAR },
			{ "userEmailAddress", Types.VARCHAR },
			{ "addressStreet1", Types.VARCHAR },
			{ "addressStreet2", Types.VARCHAR },
			{ "addressStreet3", Types.VARCHAR },
			{ "addressCity", Types.VARCHAR },
			{ "addressZip", Types.VARCHAR },
			{ "addressRegionId", Types.BIGINT },
			{ "addressCountryId", Types.BIGINT },
			{ "addressTypeId", Types.INTEGER },
			{ "phoneNumber", Types.VARCHAR },
			{ "phoneExtension", Types.VARCHAR },
			{ "phoneTypeId", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("extReferenceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("referenceUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userCreated", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("emailDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("resendEmail", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("roleAndRelationship", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("areasOfStrength", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("areasOfGrowth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("significantExperience", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("additionalComments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("submitDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userMiddleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userEmailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressStreet1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressStreet2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressStreet3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressZip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressRegionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("addressCountryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("addressTypeId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("phoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneExtension", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneTypeId", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table UCC_ExtReference (extReferenceId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,referenceUserId LONG,userCreated BOOLEAN,emailDate DATE null,resendEmail BOOLEAN,roleAndRelationship VARCHAR(75) null,areasOfStrength VARCHAR(75) null,areasOfGrowth VARCHAR(75) null,significantExperience VARCHAR(75) null,additionalComments VARCHAR(75) null,submitDate DATE null,userFirstName VARCHAR(75) null,userMiddleName VARCHAR(75) null,userLastName VARCHAR(75) null,userEmailAddress VARCHAR(75) null,addressStreet1 VARCHAR(75) null,addressStreet2 VARCHAR(75) null,addressStreet3 VARCHAR(75) null,addressCity VARCHAR(75) null,addressZip VARCHAR(75) null,addressRegionId LONG,addressCountryId LONG,addressTypeId INTEGER,phoneNumber VARCHAR(75) null,phoneExtension VARCHAR(75) null,phoneTypeId INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table UCC_ExtReference";
	public static final String ORDER_BY_JPQL = " ORDER BY extReference.emailDate DESC, extReference.userLastName ASC, extReference.userFirstName ASC, extReference.userMiddleName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UCC_ExtReference.emailDate DESC, UCC_ExtReference.userLastName ASC, UCC_ExtReference.userFirstName ASC, UCC_ExtReference.userMiddleName ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "extSessionFactory";
	public static final String TX_MANAGER = "extTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ucc.portal.model.ExtReference"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ucc.portal.model.ExtReference"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ucc.portal.model.ExtReference"),
			true);
	public static final long REFERENCEUSERID_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long EMAILDATE_COLUMN_BITMASK = 4L;
	public static final long USERLASTNAME_COLUMN_BITMASK = 8L;
	public static final long USERFIRSTNAME_COLUMN_BITMASK = 16L;
	public static final long USERMIDDLENAME_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ucc.portal.service.util.ServiceProps.get(
				"lock.expiration.time.ucc.portal.model.ExtReference"));

	public ExtReferenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _extReferenceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExtReferenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _extReferenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExtReference.class;
	}

	@Override
	public String getModelClassName() {
		return ExtReference.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("extReferenceId", getExtReferenceId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("referenceUserId", getReferenceUserId());
		attributes.put("userCreated", isUserCreated());
		attributes.put("emailDate", getEmailDate());
		attributes.put("resendEmail", isResendEmail());
		attributes.put("roleAndRelationship", getRoleAndRelationship());
		attributes.put("areasOfStrength", getAreasOfStrength());
		attributes.put("areasOfGrowth", getAreasOfGrowth());
		attributes.put("significantExperience", getSignificantExperience());
		attributes.put("additionalComments", getAdditionalComments());
		attributes.put("submitDate", getSubmitDate());
		attributes.put("userFirstName", getUserFirstName());
		attributes.put("userMiddleName", getUserMiddleName());
		attributes.put("userLastName", getUserLastName());
		attributes.put("userEmailAddress", getUserEmailAddress());
		attributes.put("addressStreet1", getAddressStreet1());
		attributes.put("addressStreet2", getAddressStreet2());
		attributes.put("addressStreet3", getAddressStreet3());
		attributes.put("addressCity", getAddressCity());
		attributes.put("addressZip", getAddressZip());
		attributes.put("addressRegionId", getAddressRegionId());
		attributes.put("addressCountryId", getAddressCountryId());
		attributes.put("addressTypeId", getAddressTypeId());
		attributes.put("phoneNumber", getPhoneNumber());
		attributes.put("phoneExtension", getPhoneExtension());
		attributes.put("phoneTypeId", getPhoneTypeId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long extReferenceId = (Long)attributes.get("extReferenceId");

		if (extReferenceId != null) {
			setExtReferenceId(extReferenceId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long referenceUserId = (Long)attributes.get("referenceUserId");

		if (referenceUserId != null) {
			setReferenceUserId(referenceUserId);
		}

		Boolean userCreated = (Boolean)attributes.get("userCreated");

		if (userCreated != null) {
			setUserCreated(userCreated);
		}

		Date emailDate = (Date)attributes.get("emailDate");

		if (emailDate != null) {
			setEmailDate(emailDate);
		}

		Boolean resendEmail = (Boolean)attributes.get("resendEmail");

		if (resendEmail != null) {
			setResendEmail(resendEmail);
		}

		String roleAndRelationship = (String)attributes.get(
				"roleAndRelationship");

		if (roleAndRelationship != null) {
			setRoleAndRelationship(roleAndRelationship);
		}

		String areasOfStrength = (String)attributes.get("areasOfStrength");

		if (areasOfStrength != null) {
			setAreasOfStrength(areasOfStrength);
		}

		String areasOfGrowth = (String)attributes.get("areasOfGrowth");

		if (areasOfGrowth != null) {
			setAreasOfGrowth(areasOfGrowth);
		}

		String significantExperience = (String)attributes.get(
				"significantExperience");

		if (significantExperience != null) {
			setSignificantExperience(significantExperience);
		}

		String additionalComments = (String)attributes.get("additionalComments");

		if (additionalComments != null) {
			setAdditionalComments(additionalComments);
		}

		Date submitDate = (Date)attributes.get("submitDate");

		if (submitDate != null) {
			setSubmitDate(submitDate);
		}

		String userFirstName = (String)attributes.get("userFirstName");

		if (userFirstName != null) {
			setUserFirstName(userFirstName);
		}

		String userMiddleName = (String)attributes.get("userMiddleName");

		if (userMiddleName != null) {
			setUserMiddleName(userMiddleName);
		}

		String userLastName = (String)attributes.get("userLastName");

		if (userLastName != null) {
			setUserLastName(userLastName);
		}

		String userEmailAddress = (String)attributes.get("userEmailAddress");

		if (userEmailAddress != null) {
			setUserEmailAddress(userEmailAddress);
		}

		String addressStreet1 = (String)attributes.get("addressStreet1");

		if (addressStreet1 != null) {
			setAddressStreet1(addressStreet1);
		}

		String addressStreet2 = (String)attributes.get("addressStreet2");

		if (addressStreet2 != null) {
			setAddressStreet2(addressStreet2);
		}

		String addressStreet3 = (String)attributes.get("addressStreet3");

		if (addressStreet3 != null) {
			setAddressStreet3(addressStreet3);
		}

		String addressCity = (String)attributes.get("addressCity");

		if (addressCity != null) {
			setAddressCity(addressCity);
		}

		String addressZip = (String)attributes.get("addressZip");

		if (addressZip != null) {
			setAddressZip(addressZip);
		}

		Long addressRegionId = (Long)attributes.get("addressRegionId");

		if (addressRegionId != null) {
			setAddressRegionId(addressRegionId);
		}

		Long addressCountryId = (Long)attributes.get("addressCountryId");

		if (addressCountryId != null) {
			setAddressCountryId(addressCountryId);
		}

		Integer addressTypeId = (Integer)attributes.get("addressTypeId");

		if (addressTypeId != null) {
			setAddressTypeId(addressTypeId);
		}

		String phoneNumber = (String)attributes.get("phoneNumber");

		if (phoneNumber != null) {
			setPhoneNumber(phoneNumber);
		}

		String phoneExtension = (String)attributes.get("phoneExtension");

		if (phoneExtension != null) {
			setPhoneExtension(phoneExtension);
		}

		Integer phoneTypeId = (Integer)attributes.get("phoneTypeId");

		if (phoneTypeId != null) {
			setPhoneTypeId(phoneTypeId);
		}
	}

	@Override
	public long getExtReferenceId() {
		return _extReferenceId;
	}

	@Override
	public void setExtReferenceId(long extReferenceId) {
		_extReferenceId = extReferenceId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getReferenceUserId() {
		return _referenceUserId;
	}

	@Override
	public void setReferenceUserId(long referenceUserId) {
		_columnBitmask |= REFERENCEUSERID_COLUMN_BITMASK;

		if (!_setOriginalReferenceUserId) {
			_setOriginalReferenceUserId = true;

			_originalReferenceUserId = _referenceUserId;
		}

		_referenceUserId = referenceUserId;
	}

	@Override
	public String getReferenceUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getReferenceUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setReferenceUserUuid(String referenceUserUuid) {
	}

	public long getOriginalReferenceUserId() {
		return _originalReferenceUserId;
	}

	@Override
	public boolean getUserCreated() {
		return _userCreated;
	}

	@Override
	public boolean isUserCreated() {
		return _userCreated;
	}

	@Override
	public void setUserCreated(boolean userCreated) {
		_userCreated = userCreated;
	}

	@Override
	public Date getEmailDate() {
		return _emailDate;
	}

	@Override
	public void setEmailDate(Date emailDate) {
		_columnBitmask = -1L;

		_emailDate = emailDate;
	}

	@Override
	public boolean getResendEmail() {
		return _resendEmail;
	}

	@Override
	public boolean isResendEmail() {
		return _resendEmail;
	}

	@Override
	public void setResendEmail(boolean resendEmail) {
		_resendEmail = resendEmail;
	}

	@Override
	public String getRoleAndRelationship() {
		if (_roleAndRelationship == null) {
			return "";
		}
		else {
			return _roleAndRelationship;
		}
	}

	@Override
	public void setRoleAndRelationship(String roleAndRelationship) {
		_roleAndRelationship = roleAndRelationship;
	}

	@Override
	public String getAreasOfStrength() {
		if (_areasOfStrength == null) {
			return "";
		}
		else {
			return _areasOfStrength;
		}
	}

	@Override
	public void setAreasOfStrength(String areasOfStrength) {
		_areasOfStrength = areasOfStrength;
	}

	@Override
	public String getAreasOfGrowth() {
		if (_areasOfGrowth == null) {
			return "";
		}
		else {
			return _areasOfGrowth;
		}
	}

	@Override
	public void setAreasOfGrowth(String areasOfGrowth) {
		_areasOfGrowth = areasOfGrowth;
	}

	@Override
	public String getSignificantExperience() {
		if (_significantExperience == null) {
			return "";
		}
		else {
			return _significantExperience;
		}
	}

	@Override
	public void setSignificantExperience(String significantExperience) {
		_significantExperience = significantExperience;
	}

	@Override
	public String getAdditionalComments() {
		if (_additionalComments == null) {
			return "";
		}
		else {
			return _additionalComments;
		}
	}

	@Override
	public void setAdditionalComments(String additionalComments) {
		_additionalComments = additionalComments;
	}

	@Override
	public Date getSubmitDate() {
		return _submitDate;
	}

	@Override
	public void setSubmitDate(Date submitDate) {
		_submitDate = submitDate;
	}

	@Override
	public String getUserFirstName() {
		if (_userFirstName == null) {
			return "";
		}
		else {
			return _userFirstName;
		}
	}

	@Override
	public void setUserFirstName(String userFirstName) {
		_columnBitmask = -1L;

		_userFirstName = userFirstName;
	}

	@Override
	public String getUserMiddleName() {
		if (_userMiddleName == null) {
			return "";
		}
		else {
			return _userMiddleName;
		}
	}

	@Override
	public void setUserMiddleName(String userMiddleName) {
		_columnBitmask = -1L;

		_userMiddleName = userMiddleName;
	}

	@Override
	public String getUserLastName() {
		if (_userLastName == null) {
			return "";
		}
		else {
			return _userLastName;
		}
	}

	@Override
	public void setUserLastName(String userLastName) {
		_columnBitmask = -1L;

		_userLastName = userLastName;
	}

	@Override
	public String getUserEmailAddress() {
		if (_userEmailAddress == null) {
			return "";
		}
		else {
			return _userEmailAddress;
		}
	}

	@Override
	public void setUserEmailAddress(String userEmailAddress) {
		_userEmailAddress = userEmailAddress;
	}

	@Override
	public String getAddressStreet1() {
		if (_addressStreet1 == null) {
			return "";
		}
		else {
			return _addressStreet1;
		}
	}

	@Override
	public void setAddressStreet1(String addressStreet1) {
		_addressStreet1 = addressStreet1;
	}

	@Override
	public String getAddressStreet2() {
		if (_addressStreet2 == null) {
			return "";
		}
		else {
			return _addressStreet2;
		}
	}

	@Override
	public void setAddressStreet2(String addressStreet2) {
		_addressStreet2 = addressStreet2;
	}

	@Override
	public String getAddressStreet3() {
		if (_addressStreet3 == null) {
			return "";
		}
		else {
			return _addressStreet3;
		}
	}

	@Override
	public void setAddressStreet3(String addressStreet3) {
		_addressStreet3 = addressStreet3;
	}

	@Override
	public String getAddressCity() {
		if (_addressCity == null) {
			return "";
		}
		else {
			return _addressCity;
		}
	}

	@Override
	public void setAddressCity(String addressCity) {
		_addressCity = addressCity;
	}

	@Override
	public String getAddressZip() {
		if (_addressZip == null) {
			return "";
		}
		else {
			return _addressZip;
		}
	}

	@Override
	public void setAddressZip(String addressZip) {
		_addressZip = addressZip;
	}

	@Override
	public long getAddressRegionId() {
		return _addressRegionId;
	}

	@Override
	public void setAddressRegionId(long addressRegionId) {
		_addressRegionId = addressRegionId;
	}

	@Override
	public long getAddressCountryId() {
		return _addressCountryId;
	}

	@Override
	public void setAddressCountryId(long addressCountryId) {
		_addressCountryId = addressCountryId;
	}

	@Override
	public int getAddressTypeId() {
		return _addressTypeId;
	}

	@Override
	public void setAddressTypeId(int addressTypeId) {
		_addressTypeId = addressTypeId;
	}

	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return "";
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		_phoneNumber = phoneNumber;
	}

	@Override
	public String getPhoneExtension() {
		if (_phoneExtension == null) {
			return "";
		}
		else {
			return _phoneExtension;
		}
	}

	@Override
	public void setPhoneExtension(String phoneExtension) {
		_phoneExtension = phoneExtension;
	}

	@Override
	public int getPhoneTypeId() {
		return _phoneTypeId;
	}

	@Override
	public void setPhoneTypeId(int phoneTypeId) {
		_phoneTypeId = phoneTypeId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ExtReference.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExtReference toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExtReference)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExtReferenceImpl extReferenceImpl = new ExtReferenceImpl();

		extReferenceImpl.setExtReferenceId(getExtReferenceId());
		extReferenceImpl.setCompanyId(getCompanyId());
		extReferenceImpl.setUserId(getUserId());
		extReferenceImpl.setCreateDate(getCreateDate());
		extReferenceImpl.setModifiedDate(getModifiedDate());
		extReferenceImpl.setReferenceUserId(getReferenceUserId());
		extReferenceImpl.setUserCreated(isUserCreated());
		extReferenceImpl.setEmailDate(getEmailDate());
		extReferenceImpl.setResendEmail(isResendEmail());
		extReferenceImpl.setRoleAndRelationship(getRoleAndRelationship());
		extReferenceImpl.setAreasOfStrength(getAreasOfStrength());
		extReferenceImpl.setAreasOfGrowth(getAreasOfGrowth());
		extReferenceImpl.setSignificantExperience(getSignificantExperience());
		extReferenceImpl.setAdditionalComments(getAdditionalComments());
		extReferenceImpl.setSubmitDate(getSubmitDate());
		extReferenceImpl.setUserFirstName(getUserFirstName());
		extReferenceImpl.setUserMiddleName(getUserMiddleName());
		extReferenceImpl.setUserLastName(getUserLastName());
		extReferenceImpl.setUserEmailAddress(getUserEmailAddress());
		extReferenceImpl.setAddressStreet1(getAddressStreet1());
		extReferenceImpl.setAddressStreet2(getAddressStreet2());
		extReferenceImpl.setAddressStreet3(getAddressStreet3());
		extReferenceImpl.setAddressCity(getAddressCity());
		extReferenceImpl.setAddressZip(getAddressZip());
		extReferenceImpl.setAddressRegionId(getAddressRegionId());
		extReferenceImpl.setAddressCountryId(getAddressCountryId());
		extReferenceImpl.setAddressTypeId(getAddressTypeId());
		extReferenceImpl.setPhoneNumber(getPhoneNumber());
		extReferenceImpl.setPhoneExtension(getPhoneExtension());
		extReferenceImpl.setPhoneTypeId(getPhoneTypeId());

		extReferenceImpl.resetOriginalValues();

		return extReferenceImpl;
	}

	@Override
	public int compareTo(ExtReference extReference) {
		int value = 0;

		value = DateUtil.compareTo(getEmailDate(), extReference.getEmailDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = getUserLastName()
					.compareToIgnoreCase(extReference.getUserLastName());

		if (value != 0) {
			return value;
		}

		value = getUserFirstName()
					.compareToIgnoreCase(extReference.getUserFirstName());

		if (value != 0) {
			return value;
		}

		value = getUserMiddleName()
					.compareToIgnoreCase(extReference.getUserMiddleName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExtReference)) {
			return false;
		}

		ExtReference extReference = (ExtReference)obj;

		long primaryKey = extReference.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ExtReferenceModelImpl extReferenceModelImpl = this;

		extReferenceModelImpl._originalUserId = extReferenceModelImpl._userId;

		extReferenceModelImpl._setOriginalUserId = false;

		extReferenceModelImpl._setModifiedDate = false;

		extReferenceModelImpl._originalReferenceUserId = extReferenceModelImpl._referenceUserId;

		extReferenceModelImpl._setOriginalReferenceUserId = false;

		extReferenceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ExtReference> toCacheModel() {
		ExtReferenceCacheModel extReferenceCacheModel = new ExtReferenceCacheModel();

		extReferenceCacheModel.extReferenceId = getExtReferenceId();

		extReferenceCacheModel.companyId = getCompanyId();

		extReferenceCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			extReferenceCacheModel.createDate = createDate.getTime();
		}
		else {
			extReferenceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			extReferenceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			extReferenceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		extReferenceCacheModel.referenceUserId = getReferenceUserId();

		extReferenceCacheModel.userCreated = isUserCreated();

		Date emailDate = getEmailDate();

		if (emailDate != null) {
			extReferenceCacheModel.emailDate = emailDate.getTime();
		}
		else {
			extReferenceCacheModel.emailDate = Long.MIN_VALUE;
		}

		extReferenceCacheModel.resendEmail = isResendEmail();

		extReferenceCacheModel.roleAndRelationship = getRoleAndRelationship();

		String roleAndRelationship = extReferenceCacheModel.roleAndRelationship;

		if ((roleAndRelationship != null) &&
				(roleAndRelationship.length() == 0)) {
			extReferenceCacheModel.roleAndRelationship = null;
		}

		extReferenceCacheModel.areasOfStrength = getAreasOfStrength();

		String areasOfStrength = extReferenceCacheModel.areasOfStrength;

		if ((areasOfStrength != null) && (areasOfStrength.length() == 0)) {
			extReferenceCacheModel.areasOfStrength = null;
		}

		extReferenceCacheModel.areasOfGrowth = getAreasOfGrowth();

		String areasOfGrowth = extReferenceCacheModel.areasOfGrowth;

		if ((areasOfGrowth != null) && (areasOfGrowth.length() == 0)) {
			extReferenceCacheModel.areasOfGrowth = null;
		}

		extReferenceCacheModel.significantExperience = getSignificantExperience();

		String significantExperience = extReferenceCacheModel.significantExperience;

		if ((significantExperience != null) &&
				(significantExperience.length() == 0)) {
			extReferenceCacheModel.significantExperience = null;
		}

		extReferenceCacheModel.additionalComments = getAdditionalComments();

		String additionalComments = extReferenceCacheModel.additionalComments;

		if ((additionalComments != null) && (additionalComments.length() == 0)) {
			extReferenceCacheModel.additionalComments = null;
		}

		Date submitDate = getSubmitDate();

		if (submitDate != null) {
			extReferenceCacheModel.submitDate = submitDate.getTime();
		}
		else {
			extReferenceCacheModel.submitDate = Long.MIN_VALUE;
		}

		extReferenceCacheModel.userFirstName = getUserFirstName();

		String userFirstName = extReferenceCacheModel.userFirstName;

		if ((userFirstName != null) && (userFirstName.length() == 0)) {
			extReferenceCacheModel.userFirstName = null;
		}

		extReferenceCacheModel.userMiddleName = getUserMiddleName();

		String userMiddleName = extReferenceCacheModel.userMiddleName;

		if ((userMiddleName != null) && (userMiddleName.length() == 0)) {
			extReferenceCacheModel.userMiddleName = null;
		}

		extReferenceCacheModel.userLastName = getUserLastName();

		String userLastName = extReferenceCacheModel.userLastName;

		if ((userLastName != null) && (userLastName.length() == 0)) {
			extReferenceCacheModel.userLastName = null;
		}

		extReferenceCacheModel.userEmailAddress = getUserEmailAddress();

		String userEmailAddress = extReferenceCacheModel.userEmailAddress;

		if ((userEmailAddress != null) && (userEmailAddress.length() == 0)) {
			extReferenceCacheModel.userEmailAddress = null;
		}

		extReferenceCacheModel.addressStreet1 = getAddressStreet1();

		String addressStreet1 = extReferenceCacheModel.addressStreet1;

		if ((addressStreet1 != null) && (addressStreet1.length() == 0)) {
			extReferenceCacheModel.addressStreet1 = null;
		}

		extReferenceCacheModel.addressStreet2 = getAddressStreet2();

		String addressStreet2 = extReferenceCacheModel.addressStreet2;

		if ((addressStreet2 != null) && (addressStreet2.length() == 0)) {
			extReferenceCacheModel.addressStreet2 = null;
		}

		extReferenceCacheModel.addressStreet3 = getAddressStreet3();

		String addressStreet3 = extReferenceCacheModel.addressStreet3;

		if ((addressStreet3 != null) && (addressStreet3.length() == 0)) {
			extReferenceCacheModel.addressStreet3 = null;
		}

		extReferenceCacheModel.addressCity = getAddressCity();

		String addressCity = extReferenceCacheModel.addressCity;

		if ((addressCity != null) && (addressCity.length() == 0)) {
			extReferenceCacheModel.addressCity = null;
		}

		extReferenceCacheModel.addressZip = getAddressZip();

		String addressZip = extReferenceCacheModel.addressZip;

		if ((addressZip != null) && (addressZip.length() == 0)) {
			extReferenceCacheModel.addressZip = null;
		}

		extReferenceCacheModel.addressRegionId = getAddressRegionId();

		extReferenceCacheModel.addressCountryId = getAddressCountryId();

		extReferenceCacheModel.addressTypeId = getAddressTypeId();

		extReferenceCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = extReferenceCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			extReferenceCacheModel.phoneNumber = null;
		}

		extReferenceCacheModel.phoneExtension = getPhoneExtension();

		String phoneExtension = extReferenceCacheModel.phoneExtension;

		if ((phoneExtension != null) && (phoneExtension.length() == 0)) {
			extReferenceCacheModel.phoneExtension = null;
		}

		extReferenceCacheModel.phoneTypeId = getPhoneTypeId();

		return extReferenceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(61);

		sb.append("{extReferenceId=");
		sb.append(getExtReferenceId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", referenceUserId=");
		sb.append(getReferenceUserId());
		sb.append(", userCreated=");
		sb.append(isUserCreated());
		sb.append(", emailDate=");
		sb.append(getEmailDate());
		sb.append(", resendEmail=");
		sb.append(isResendEmail());
		sb.append(", roleAndRelationship=");
		sb.append(getRoleAndRelationship());
		sb.append(", areasOfStrength=");
		sb.append(getAreasOfStrength());
		sb.append(", areasOfGrowth=");
		sb.append(getAreasOfGrowth());
		sb.append(", significantExperience=");
		sb.append(getSignificantExperience());
		sb.append(", additionalComments=");
		sb.append(getAdditionalComments());
		sb.append(", submitDate=");
		sb.append(getSubmitDate());
		sb.append(", userFirstName=");
		sb.append(getUserFirstName());
		sb.append(", userMiddleName=");
		sb.append(getUserMiddleName());
		sb.append(", userLastName=");
		sb.append(getUserLastName());
		sb.append(", userEmailAddress=");
		sb.append(getUserEmailAddress());
		sb.append(", addressStreet1=");
		sb.append(getAddressStreet1());
		sb.append(", addressStreet2=");
		sb.append(getAddressStreet2());
		sb.append(", addressStreet3=");
		sb.append(getAddressStreet3());
		sb.append(", addressCity=");
		sb.append(getAddressCity());
		sb.append(", addressZip=");
		sb.append(getAddressZip());
		sb.append(", addressRegionId=");
		sb.append(getAddressRegionId());
		sb.append(", addressCountryId=");
		sb.append(getAddressCountryId());
		sb.append(", addressTypeId=");
		sb.append(getAddressTypeId());
		sb.append(", phoneNumber=");
		sb.append(getPhoneNumber());
		sb.append(", phoneExtension=");
		sb.append(getPhoneExtension());
		sb.append(", phoneTypeId=");
		sb.append(getPhoneTypeId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(94);

		sb.append("<model><model-name>");
		sb.append("ucc.portal.model.ExtReference");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>extReferenceId</column-name><column-value><![CDATA[");
		sb.append(getExtReferenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referenceUserId</column-name><column-value><![CDATA[");
		sb.append(getReferenceUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userCreated</column-name><column-value><![CDATA[");
		sb.append(isUserCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailDate</column-name><column-value><![CDATA[");
		sb.append(getEmailDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resendEmail</column-name><column-value><![CDATA[");
		sb.append(isResendEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleAndRelationship</column-name><column-value><![CDATA[");
		sb.append(getRoleAndRelationship());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>areasOfStrength</column-name><column-value><![CDATA[");
		sb.append(getAreasOfStrength());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>areasOfGrowth</column-name><column-value><![CDATA[");
		sb.append(getAreasOfGrowth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>significantExperience</column-name><column-value><![CDATA[");
		sb.append(getSignificantExperience());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>additionalComments</column-name><column-value><![CDATA[");
		sb.append(getAdditionalComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submitDate</column-name><column-value><![CDATA[");
		sb.append(getSubmitDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userFirstName</column-name><column-value><![CDATA[");
		sb.append(getUserFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userMiddleName</column-name><column-value><![CDATA[");
		sb.append(getUserMiddleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userLastName</column-name><column-value><![CDATA[");
		sb.append(getUserLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userEmailAddress</column-name><column-value><![CDATA[");
		sb.append(getUserEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressStreet1</column-name><column-value><![CDATA[");
		sb.append(getAddressStreet1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressStreet2</column-name><column-value><![CDATA[");
		sb.append(getAddressStreet2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressStreet3</column-name><column-value><![CDATA[");
		sb.append(getAddressStreet3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressCity</column-name><column-value><![CDATA[");
		sb.append(getAddressCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressZip</column-name><column-value><![CDATA[");
		sb.append(getAddressZip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressRegionId</column-name><column-value><![CDATA[");
		sb.append(getAddressRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressCountryId</column-name><column-value><![CDATA[");
		sb.append(getAddressCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressTypeId</column-name><column-value><![CDATA[");
		sb.append(getAddressTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phoneNumber</column-name><column-value><![CDATA[");
		sb.append(getPhoneNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phoneExtension</column-name><column-value><![CDATA[");
		sb.append(getPhoneExtension());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phoneTypeId</column-name><column-value><![CDATA[");
		sb.append(getPhoneTypeId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ExtReference.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ExtReference.class, ModelWrapper.class
		};
	private long _extReferenceId;
	private long _companyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _referenceUserId;
	private long _originalReferenceUserId;
	private boolean _setOriginalReferenceUserId;
	private boolean _userCreated;
	private Date _emailDate;
	private boolean _resendEmail;
	private String _roleAndRelationship;
	private String _areasOfStrength;
	private String _areasOfGrowth;
	private String _significantExperience;
	private String _additionalComments;
	private Date _submitDate;
	private String _userFirstName;
	private String _userMiddleName;
	private String _userLastName;
	private String _userEmailAddress;
	private String _addressStreet1;
	private String _addressStreet2;
	private String _addressStreet3;
	private String _addressCity;
	private String _addressZip;
	private long _addressRegionId;
	private long _addressCountryId;
	private int _addressTypeId;
	private String _phoneNumber;
	private String _phoneExtension;
	private int _phoneTypeId;
	private long _columnBitmask;
	private ExtReference _escapedModel;
}