/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ucc.portal.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import ucc.portal.model.CExtStaffingCongregation;
import ucc.portal.model.CExtStaffingCongregationModel;

import ucc.portal.service.persistence.CExtStaffingCongregationPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CExtStaffingCongregation service. Represents a row in the &quot;UCC_CExtStaffingCongregation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CExtStaffingCongregationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CExtStaffingCongregationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CExtStaffingCongregationImpl
 * @see CExtStaffingCongregation
 * @see CExtStaffingCongregationModel
 * @generated
 */
@ProviderType
public class CExtStaffingCongregationModelImpl extends BaseModelImpl<CExtStaffingCongregation>
	implements CExtStaffingCongregationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a c ext staffing congregation model instance should use the {@link CExtStaffingCongregation} interface instead.
	 */
	public static final String TABLE_NAME = "UCC_CExtStaffingCongregation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "organizationId", Types.BIGINT },
			{ "cextStaffingCongregationId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "sfMinisterName", Types.VARCHAR },
			{ "sfMinisterRetired", Types.BOOLEAN },
			{ "sfMinisterCovenant", Types.VARCHAR },
			{ "sfMinistrySetting", Types.VARCHAR },
			{ "sfMinistryRole", Types.VARCHAR },
			{ "sfPriority", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cextStaffingCongregationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sfMinisterName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sfMinisterRetired", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("sfMinisterCovenant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sfMinistrySetting", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sfMinistryRole", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sfPriority", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table UCC_CExtStaffingCongregation (organizationId LONG not null,cextStaffingCongregationId LONG not null,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,sfMinisterName VARCHAR(75) null,sfMinisterRetired BOOLEAN,sfMinisterCovenant VARCHAR(75) null,sfMinistrySetting VARCHAR(75) null,sfMinistryRole VARCHAR(75) null,sfPriority DOUBLE,primary key (organizationId, cextStaffingCongregationId))";
	public static final String TABLE_SQL_DROP = "drop table UCC_CExtStaffingCongregation";
	public static final String ORDER_BY_JPQL = " ORDER BY cExtStaffingCongregation.sfPriority ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UCC_CExtStaffingCongregation.sfPriority ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "extSessionFactory";
	public static final String TX_MANAGER = "extTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ucc.portal.model.CExtStaffingCongregation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ucc.portal.model.CExtStaffingCongregation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ucc.portal.model.CExtStaffingCongregation"),
			true);
	public static final long ORGANIZATIONID_COLUMN_BITMASK = 1L;
	public static final long SFPRIORITY_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ucc.portal.service.util.ServiceProps.get(
				"lock.expiration.time.ucc.portal.model.CExtStaffingCongregation"));

	public CExtStaffingCongregationModelImpl() {
	}

	@Override
	public CExtStaffingCongregationPK getPrimaryKey() {
		return new CExtStaffingCongregationPK(_organizationId,
			_cextStaffingCongregationId);
	}

	@Override
	public void setPrimaryKey(CExtStaffingCongregationPK primaryKey) {
		setOrganizationId(primaryKey.organizationId);
		setCextStaffingCongregationId(primaryKey.cextStaffingCongregationId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new CExtStaffingCongregationPK(_organizationId,
			_cextStaffingCongregationId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((CExtStaffingCongregationPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return CExtStaffingCongregation.class;
	}

	@Override
	public String getModelClassName() {
		return CExtStaffingCongregation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("organizationId", getOrganizationId());
		attributes.put("cextStaffingCongregationId",
			getCextStaffingCongregationId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("sfMinisterName", getSfMinisterName());
		attributes.put("sfMinisterRetired", isSfMinisterRetired());
		attributes.put("sfMinisterCovenant", getSfMinisterCovenant());
		attributes.put("sfMinistrySetting", getSfMinistrySetting());
		attributes.put("sfMinistryRole", getSfMinistryRole());
		attributes.put("sfPriority", getSfPriority());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long organizationId = (Long)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}

		Long cextStaffingCongregationId = (Long)attributes.get(
				"cextStaffingCongregationId");

		if (cextStaffingCongregationId != null) {
			setCextStaffingCongregationId(cextStaffingCongregationId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String sfMinisterName = (String)attributes.get("sfMinisterName");

		if (sfMinisterName != null) {
			setSfMinisterName(sfMinisterName);
		}

		Boolean sfMinisterRetired = (Boolean)attributes.get("sfMinisterRetired");

		if (sfMinisterRetired != null) {
			setSfMinisterRetired(sfMinisterRetired);
		}

		String sfMinisterCovenant = (String)attributes.get("sfMinisterCovenant");

		if (sfMinisterCovenant != null) {
			setSfMinisterCovenant(sfMinisterCovenant);
		}

		String sfMinistrySetting = (String)attributes.get("sfMinistrySetting");

		if (sfMinistrySetting != null) {
			setSfMinistrySetting(sfMinistrySetting);
		}

		String sfMinistryRole = (String)attributes.get("sfMinistryRole");

		if (sfMinistryRole != null) {
			setSfMinistryRole(sfMinistryRole);
		}

		Double sfPriority = (Double)attributes.get("sfPriority");

		if (sfPriority != null) {
			setSfPriority(sfPriority);
		}
	}

	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_columnBitmask |= ORGANIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalOrganizationId) {
			_setOriginalOrganizationId = true;

			_originalOrganizationId = _organizationId;
		}

		_organizationId = organizationId;
	}

	public long getOriginalOrganizationId() {
		return _originalOrganizationId;
	}

	@Override
	public long getCextStaffingCongregationId() {
		return _cextStaffingCongregationId;
	}

	@Override
	public void setCextStaffingCongregationId(long cextStaffingCongregationId) {
		_cextStaffingCongregationId = cextStaffingCongregationId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getSfMinisterName() {
		if (_sfMinisterName == null) {
			return "";
		}
		else {
			return _sfMinisterName;
		}
	}

	@Override
	public void setSfMinisterName(String sfMinisterName) {
		_sfMinisterName = sfMinisterName;
	}

	@Override
	public boolean getSfMinisterRetired() {
		return _sfMinisterRetired;
	}

	@Override
	public boolean isSfMinisterRetired() {
		return _sfMinisterRetired;
	}

	@Override
	public void setSfMinisterRetired(boolean sfMinisterRetired) {
		_sfMinisterRetired = sfMinisterRetired;
	}

	@Override
	public String getSfMinisterCovenant() {
		if (_sfMinisterCovenant == null) {
			return "";
		}
		else {
			return _sfMinisterCovenant;
		}
	}

	@Override
	public void setSfMinisterCovenant(String sfMinisterCovenant) {
		_sfMinisterCovenant = sfMinisterCovenant;
	}

	@Override
	public String getSfMinistrySetting() {
		if (_sfMinistrySetting == null) {
			return "";
		}
		else {
			return _sfMinistrySetting;
		}
	}

	@Override
	public void setSfMinistrySetting(String sfMinistrySetting) {
		_sfMinistrySetting = sfMinistrySetting;
	}

	@Override
	public String getSfMinistryRole() {
		if (_sfMinistryRole == null) {
			return "";
		}
		else {
			return _sfMinistryRole;
		}
	}

	@Override
	public void setSfMinistryRole(String sfMinistryRole) {
		_sfMinistryRole = sfMinistryRole;
	}

	@Override
	public double getSfPriority() {
		return _sfPriority;
	}

	@Override
	public void setSfPriority(double sfPriority) {
		_columnBitmask = -1L;

		_sfPriority = sfPriority;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public CExtStaffingCongregation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CExtStaffingCongregation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CExtStaffingCongregationImpl cExtStaffingCongregationImpl = new CExtStaffingCongregationImpl();

		cExtStaffingCongregationImpl.setOrganizationId(getOrganizationId());
		cExtStaffingCongregationImpl.setCextStaffingCongregationId(getCextStaffingCongregationId());
		cExtStaffingCongregationImpl.setCompanyId(getCompanyId());
		cExtStaffingCongregationImpl.setUserId(getUserId());
		cExtStaffingCongregationImpl.setCreateDate(getCreateDate());
		cExtStaffingCongregationImpl.setModifiedDate(getModifiedDate());
		cExtStaffingCongregationImpl.setSfMinisterName(getSfMinisterName());
		cExtStaffingCongregationImpl.setSfMinisterRetired(isSfMinisterRetired());
		cExtStaffingCongregationImpl.setSfMinisterCovenant(getSfMinisterCovenant());
		cExtStaffingCongregationImpl.setSfMinistrySetting(getSfMinistrySetting());
		cExtStaffingCongregationImpl.setSfMinistryRole(getSfMinistryRole());
		cExtStaffingCongregationImpl.setSfPriority(getSfPriority());

		cExtStaffingCongregationImpl.resetOriginalValues();

		return cExtStaffingCongregationImpl;
	}

	@Override
	public int compareTo(CExtStaffingCongregation cExtStaffingCongregation) {
		int value = 0;

		if (getSfPriority() < cExtStaffingCongregation.getSfPriority()) {
			value = -1;
		}
		else if (getSfPriority() > cExtStaffingCongregation.getSfPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CExtStaffingCongregation)) {
			return false;
		}

		CExtStaffingCongregation cExtStaffingCongregation = (CExtStaffingCongregation)obj;

		CExtStaffingCongregationPK primaryKey = cExtStaffingCongregation.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CExtStaffingCongregationModelImpl cExtStaffingCongregationModelImpl = this;

		cExtStaffingCongregationModelImpl._originalOrganizationId = cExtStaffingCongregationModelImpl._organizationId;

		cExtStaffingCongregationModelImpl._setOriginalOrganizationId = false;

		cExtStaffingCongregationModelImpl._setModifiedDate = false;

		cExtStaffingCongregationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CExtStaffingCongregation> toCacheModel() {
		CExtStaffingCongregationCacheModel cExtStaffingCongregationCacheModel = new CExtStaffingCongregationCacheModel();

		cExtStaffingCongregationCacheModel.cExtStaffingCongregationPK = getPrimaryKey();

		cExtStaffingCongregationCacheModel.organizationId = getOrganizationId();

		cExtStaffingCongregationCacheModel.cextStaffingCongregationId = getCextStaffingCongregationId();

		cExtStaffingCongregationCacheModel.companyId = getCompanyId();

		cExtStaffingCongregationCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			cExtStaffingCongregationCacheModel.createDate = createDate.getTime();
		}
		else {
			cExtStaffingCongregationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cExtStaffingCongregationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cExtStaffingCongregationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cExtStaffingCongregationCacheModel.sfMinisterName = getSfMinisterName();

		String sfMinisterName = cExtStaffingCongregationCacheModel.sfMinisterName;

		if ((sfMinisterName != null) && (sfMinisterName.length() == 0)) {
			cExtStaffingCongregationCacheModel.sfMinisterName = null;
		}

		cExtStaffingCongregationCacheModel.sfMinisterRetired = isSfMinisterRetired();

		cExtStaffingCongregationCacheModel.sfMinisterCovenant = getSfMinisterCovenant();

		String sfMinisterCovenant = cExtStaffingCongregationCacheModel.sfMinisterCovenant;

		if ((sfMinisterCovenant != null) && (sfMinisterCovenant.length() == 0)) {
			cExtStaffingCongregationCacheModel.sfMinisterCovenant = null;
		}

		cExtStaffingCongregationCacheModel.sfMinistrySetting = getSfMinistrySetting();

		String sfMinistrySetting = cExtStaffingCongregationCacheModel.sfMinistrySetting;

		if ((sfMinistrySetting != null) && (sfMinistrySetting.length() == 0)) {
			cExtStaffingCongregationCacheModel.sfMinistrySetting = null;
		}

		cExtStaffingCongregationCacheModel.sfMinistryRole = getSfMinistryRole();

		String sfMinistryRole = cExtStaffingCongregationCacheModel.sfMinistryRole;

		if ((sfMinistryRole != null) && (sfMinistryRole.length() == 0)) {
			cExtStaffingCongregationCacheModel.sfMinistryRole = null;
		}

		cExtStaffingCongregationCacheModel.sfPriority = getSfPriority();

		return cExtStaffingCongregationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{organizationId=");
		sb.append(getOrganizationId());
		sb.append(", cextStaffingCongregationId=");
		sb.append(getCextStaffingCongregationId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", sfMinisterName=");
		sb.append(getSfMinisterName());
		sb.append(", sfMinisterRetired=");
		sb.append(isSfMinisterRetired());
		sb.append(", sfMinisterCovenant=");
		sb.append(getSfMinisterCovenant());
		sb.append(", sfMinistrySetting=");
		sb.append(getSfMinistrySetting());
		sb.append(", sfMinistryRole=");
		sb.append(getSfMinistryRole());
		sb.append(", sfPriority=");
		sb.append(getSfPriority());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("ucc.portal.model.CExtStaffingCongregation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cextStaffingCongregationId</column-name><column-value><![CDATA[");
		sb.append(getCextStaffingCongregationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfMinisterName</column-name><column-value><![CDATA[");
		sb.append(getSfMinisterName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfMinisterRetired</column-name><column-value><![CDATA[");
		sb.append(isSfMinisterRetired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfMinisterCovenant</column-name><column-value><![CDATA[");
		sb.append(getSfMinisterCovenant());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfMinistrySetting</column-name><column-value><![CDATA[");
		sb.append(getSfMinistrySetting());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfMinistryRole</column-name><column-value><![CDATA[");
		sb.append(getSfMinistryRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sfPriority</column-name><column-value><![CDATA[");
		sb.append(getSfPriority());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CExtStaffingCongregation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CExtStaffingCongregation.class, ModelWrapper.class
		};
	private long _organizationId;
	private long _originalOrganizationId;
	private boolean _setOriginalOrganizationId;
	private long _cextStaffingCongregationId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _sfMinisterName;
	private boolean _sfMinisterRetired;
	private String _sfMinisterCovenant;
	private String _sfMinistrySetting;
	private String _sfMinistryRole;
	private double _sfPriority;
	private long _columnBitmask;
	private CExtStaffingCongregation _escapedModel;
}