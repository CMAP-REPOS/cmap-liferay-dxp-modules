/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ucc.portal.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import ucc.portal.model.CExtParticipation;
import ucc.portal.model.CExtParticipationModel;

import ucc.portal.service.persistence.CExtParticipationPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CExtParticipation service. Represents a row in the &quot;UCC_CExtParticipation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CExtParticipationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CExtParticipationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CExtParticipationImpl
 * @see CExtParticipation
 * @see CExtParticipationModel
 * @generated
 */
@ProviderType
public class CExtParticipationModelImpl extends BaseModelImpl<CExtParticipation>
	implements CExtParticipationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a c ext participation model instance should use the {@link CExtParticipation} interface instead.
	 */
	public static final String TABLE_NAME = "UCC_CExtParticipation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "organizationId", Types.BIGINT },
			{ "cextParticipationId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "ppGatheringId", Types.VARCHAR },
			{ "ppGatheringKey", Types.VARCHAR },
			{ "ppCount", Types.INTEGER },
			{ "ppLay", Types.BOOLEAN },
			{ "ppPastor", Types.BOOLEAN },
			{ "ppStaff", Types.BOOLEAN },
			{ "ppOther", Types.BOOLEAN },
			{ "ppGatheringAdditionalKey", Types.VARCHAR },
			{ "ppGatheringAdditionalType", Types.VARCHAR },
			{ "ppAdditionalInformation", Types.VARCHAR },
			{ "ppPriority", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cextParticipationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ppGatheringId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ppGatheringKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ppCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ppLay", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("ppPastor", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("ppStaff", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("ppOther", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("ppGatheringAdditionalKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ppGatheringAdditionalType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ppAdditionalInformation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ppPriority", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table UCC_CExtParticipation (organizationId LONG not null,cextParticipationId LONG not null,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,ppGatheringId VARCHAR(75) null,ppGatheringKey VARCHAR(75) null,ppCount INTEGER,ppLay BOOLEAN,ppPastor BOOLEAN,ppStaff BOOLEAN,ppOther BOOLEAN,ppGatheringAdditionalKey VARCHAR(75) null,ppGatheringAdditionalType VARCHAR(75) null,ppAdditionalInformation VARCHAR(75) null,ppPriority DOUBLE,primary key (organizationId, cextParticipationId))";
	public static final String TABLE_SQL_DROP = "drop table UCC_CExtParticipation";
	public static final String ORDER_BY_JPQL = " ORDER BY cExtParticipation.ppPriority ASC, cExtParticipation.ppGatheringKey ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UCC_CExtParticipation.ppPriority ASC, UCC_CExtParticipation.ppGatheringKey ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "extSessionFactory";
	public static final String TX_MANAGER = "extTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ucc.portal.model.CExtParticipation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ucc.portal.model.CExtParticipation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ucc.portal.model.CExtParticipation"),
			true);
	public static final long ORGANIZATIONID_COLUMN_BITMASK = 1L;
	public static final long PPGATHERINGID_COLUMN_BITMASK = 2L;
	public static final long PPGATHERINGKEY_COLUMN_BITMASK = 4L;
	public static final long PPPRIORITY_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ucc.portal.service.util.ServiceProps.get(
				"lock.expiration.time.ucc.portal.model.CExtParticipation"));

	public CExtParticipationModelImpl() {
	}

	@Override
	public CExtParticipationPK getPrimaryKey() {
		return new CExtParticipationPK(_organizationId, _cextParticipationId);
	}

	@Override
	public void setPrimaryKey(CExtParticipationPK primaryKey) {
		setOrganizationId(primaryKey.organizationId);
		setCextParticipationId(primaryKey.cextParticipationId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new CExtParticipationPK(_organizationId, _cextParticipationId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((CExtParticipationPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return CExtParticipation.class;
	}

	@Override
	public String getModelClassName() {
		return CExtParticipation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("organizationId", getOrganizationId());
		attributes.put("cextParticipationId", getCextParticipationId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("ppGatheringId", getPpGatheringId());
		attributes.put("ppGatheringKey", getPpGatheringKey());
		attributes.put("ppCount", getPpCount());
		attributes.put("ppLay", isPpLay());
		attributes.put("ppPastor", isPpPastor());
		attributes.put("ppStaff", isPpStaff());
		attributes.put("ppOther", isPpOther());
		attributes.put("ppGatheringAdditionalKey", getPpGatheringAdditionalKey());
		attributes.put("ppGatheringAdditionalType",
			getPpGatheringAdditionalType());
		attributes.put("ppAdditionalInformation", getPpAdditionalInformation());
		attributes.put("ppPriority", getPpPriority());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long organizationId = (Long)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}

		Long cextParticipationId = (Long)attributes.get("cextParticipationId");

		if (cextParticipationId != null) {
			setCextParticipationId(cextParticipationId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String ppGatheringId = (String)attributes.get("ppGatheringId");

		if (ppGatheringId != null) {
			setPpGatheringId(ppGatheringId);
		}

		String ppGatheringKey = (String)attributes.get("ppGatheringKey");

		if (ppGatheringKey != null) {
			setPpGatheringKey(ppGatheringKey);
		}

		Integer ppCount = (Integer)attributes.get("ppCount");

		if (ppCount != null) {
			setPpCount(ppCount);
		}

		Boolean ppLay = (Boolean)attributes.get("ppLay");

		if (ppLay != null) {
			setPpLay(ppLay);
		}

		Boolean ppPastor = (Boolean)attributes.get("ppPastor");

		if (ppPastor != null) {
			setPpPastor(ppPastor);
		}

		Boolean ppStaff = (Boolean)attributes.get("ppStaff");

		if (ppStaff != null) {
			setPpStaff(ppStaff);
		}

		Boolean ppOther = (Boolean)attributes.get("ppOther");

		if (ppOther != null) {
			setPpOther(ppOther);
		}

		String ppGatheringAdditionalKey = (String)attributes.get(
				"ppGatheringAdditionalKey");

		if (ppGatheringAdditionalKey != null) {
			setPpGatheringAdditionalKey(ppGatheringAdditionalKey);
		}

		String ppGatheringAdditionalType = (String)attributes.get(
				"ppGatheringAdditionalType");

		if (ppGatheringAdditionalType != null) {
			setPpGatheringAdditionalType(ppGatheringAdditionalType);
		}

		String ppAdditionalInformation = (String)attributes.get(
				"ppAdditionalInformation");

		if (ppAdditionalInformation != null) {
			setPpAdditionalInformation(ppAdditionalInformation);
		}

		Double ppPriority = (Double)attributes.get("ppPriority");

		if (ppPriority != null) {
			setPpPriority(ppPriority);
		}
	}

	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_columnBitmask |= ORGANIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalOrganizationId) {
			_setOriginalOrganizationId = true;

			_originalOrganizationId = _organizationId;
		}

		_organizationId = organizationId;
	}

	public long getOriginalOrganizationId() {
		return _originalOrganizationId;
	}

	@Override
	public long getCextParticipationId() {
		return _cextParticipationId;
	}

	@Override
	public void setCextParticipationId(long cextParticipationId) {
		_cextParticipationId = cextParticipationId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getPpGatheringId() {
		if (_ppGatheringId == null) {
			return "";
		}
		else {
			return _ppGatheringId;
		}
	}

	@Override
	public void setPpGatheringId(String ppGatheringId) {
		_columnBitmask |= PPGATHERINGID_COLUMN_BITMASK;

		if (_originalPpGatheringId == null) {
			_originalPpGatheringId = _ppGatheringId;
		}

		_ppGatheringId = ppGatheringId;
	}

	public String getOriginalPpGatheringId() {
		return GetterUtil.getString(_originalPpGatheringId);
	}

	@Override
	public String getPpGatheringKey() {
		if (_ppGatheringKey == null) {
			return "";
		}
		else {
			return _ppGatheringKey;
		}
	}

	@Override
	public void setPpGatheringKey(String ppGatheringKey) {
		_columnBitmask = -1L;

		if (_originalPpGatheringKey == null) {
			_originalPpGatheringKey = _ppGatheringKey;
		}

		_ppGatheringKey = ppGatheringKey;
	}

	public String getOriginalPpGatheringKey() {
		return GetterUtil.getString(_originalPpGatheringKey);
	}

	@Override
	public int getPpCount() {
		return _ppCount;
	}

	@Override
	public void setPpCount(int ppCount) {
		_ppCount = ppCount;
	}

	@Override
	public boolean getPpLay() {
		return _ppLay;
	}

	@Override
	public boolean isPpLay() {
		return _ppLay;
	}

	@Override
	public void setPpLay(boolean ppLay) {
		_ppLay = ppLay;
	}

	@Override
	public boolean getPpPastor() {
		return _ppPastor;
	}

	@Override
	public boolean isPpPastor() {
		return _ppPastor;
	}

	@Override
	public void setPpPastor(boolean ppPastor) {
		_ppPastor = ppPastor;
	}

	@Override
	public boolean getPpStaff() {
		return _ppStaff;
	}

	@Override
	public boolean isPpStaff() {
		return _ppStaff;
	}

	@Override
	public void setPpStaff(boolean ppStaff) {
		_ppStaff = ppStaff;
	}

	@Override
	public boolean getPpOther() {
		return _ppOther;
	}

	@Override
	public boolean isPpOther() {
		return _ppOther;
	}

	@Override
	public void setPpOther(boolean ppOther) {
		_ppOther = ppOther;
	}

	@Override
	public String getPpGatheringAdditionalKey() {
		if (_ppGatheringAdditionalKey == null) {
			return "";
		}
		else {
			return _ppGatheringAdditionalKey;
		}
	}

	@Override
	public void setPpGatheringAdditionalKey(String ppGatheringAdditionalKey) {
		_ppGatheringAdditionalKey = ppGatheringAdditionalKey;
	}

	@Override
	public String getPpGatheringAdditionalType() {
		if (_ppGatheringAdditionalType == null) {
			return "";
		}
		else {
			return _ppGatheringAdditionalType;
		}
	}

	@Override
	public void setPpGatheringAdditionalType(String ppGatheringAdditionalType) {
		_ppGatheringAdditionalType = ppGatheringAdditionalType;
	}

	@Override
	public String getPpAdditionalInformation() {
		if (_ppAdditionalInformation == null) {
			return "";
		}
		else {
			return _ppAdditionalInformation;
		}
	}

	@Override
	public void setPpAdditionalInformation(String ppAdditionalInformation) {
		_ppAdditionalInformation = ppAdditionalInformation;
	}

	@Override
	public double getPpPriority() {
		return _ppPriority;
	}

	@Override
	public void setPpPriority(double ppPriority) {
		_columnBitmask = -1L;

		_ppPriority = ppPriority;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public CExtParticipation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CExtParticipation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CExtParticipationImpl cExtParticipationImpl = new CExtParticipationImpl();

		cExtParticipationImpl.setOrganizationId(getOrganizationId());
		cExtParticipationImpl.setCextParticipationId(getCextParticipationId());
		cExtParticipationImpl.setCompanyId(getCompanyId());
		cExtParticipationImpl.setUserId(getUserId());
		cExtParticipationImpl.setCreateDate(getCreateDate());
		cExtParticipationImpl.setModifiedDate(getModifiedDate());
		cExtParticipationImpl.setPpGatheringId(getPpGatheringId());
		cExtParticipationImpl.setPpGatheringKey(getPpGatheringKey());
		cExtParticipationImpl.setPpCount(getPpCount());
		cExtParticipationImpl.setPpLay(isPpLay());
		cExtParticipationImpl.setPpPastor(isPpPastor());
		cExtParticipationImpl.setPpStaff(isPpStaff());
		cExtParticipationImpl.setPpOther(isPpOther());
		cExtParticipationImpl.setPpGatheringAdditionalKey(getPpGatheringAdditionalKey());
		cExtParticipationImpl.setPpGatheringAdditionalType(getPpGatheringAdditionalType());
		cExtParticipationImpl.setPpAdditionalInformation(getPpAdditionalInformation());
		cExtParticipationImpl.setPpPriority(getPpPriority());

		cExtParticipationImpl.resetOriginalValues();

		return cExtParticipationImpl;
	}

	@Override
	public int compareTo(CExtParticipation cExtParticipation) {
		int value = 0;

		if (getPpPriority() < cExtParticipation.getPpPriority()) {
			value = -1;
		}
		else if (getPpPriority() > cExtParticipation.getPpPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getPpGatheringKey()
					.compareTo(cExtParticipation.getPpGatheringKey());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CExtParticipation)) {
			return false;
		}

		CExtParticipation cExtParticipation = (CExtParticipation)obj;

		CExtParticipationPK primaryKey = cExtParticipation.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CExtParticipationModelImpl cExtParticipationModelImpl = this;

		cExtParticipationModelImpl._originalOrganizationId = cExtParticipationModelImpl._organizationId;

		cExtParticipationModelImpl._setOriginalOrganizationId = false;

		cExtParticipationModelImpl._setModifiedDate = false;

		cExtParticipationModelImpl._originalPpGatheringId = cExtParticipationModelImpl._ppGatheringId;

		cExtParticipationModelImpl._originalPpGatheringKey = cExtParticipationModelImpl._ppGatheringKey;

		cExtParticipationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CExtParticipation> toCacheModel() {
		CExtParticipationCacheModel cExtParticipationCacheModel = new CExtParticipationCacheModel();

		cExtParticipationCacheModel.cExtParticipationPK = getPrimaryKey();

		cExtParticipationCacheModel.organizationId = getOrganizationId();

		cExtParticipationCacheModel.cextParticipationId = getCextParticipationId();

		cExtParticipationCacheModel.companyId = getCompanyId();

		cExtParticipationCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			cExtParticipationCacheModel.createDate = createDate.getTime();
		}
		else {
			cExtParticipationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cExtParticipationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cExtParticipationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cExtParticipationCacheModel.ppGatheringId = getPpGatheringId();

		String ppGatheringId = cExtParticipationCacheModel.ppGatheringId;

		if ((ppGatheringId != null) && (ppGatheringId.length() == 0)) {
			cExtParticipationCacheModel.ppGatheringId = null;
		}

		cExtParticipationCacheModel.ppGatheringKey = getPpGatheringKey();

		String ppGatheringKey = cExtParticipationCacheModel.ppGatheringKey;

		if ((ppGatheringKey != null) && (ppGatheringKey.length() == 0)) {
			cExtParticipationCacheModel.ppGatheringKey = null;
		}

		cExtParticipationCacheModel.ppCount = getPpCount();

		cExtParticipationCacheModel.ppLay = isPpLay();

		cExtParticipationCacheModel.ppPastor = isPpPastor();

		cExtParticipationCacheModel.ppStaff = isPpStaff();

		cExtParticipationCacheModel.ppOther = isPpOther();

		cExtParticipationCacheModel.ppGatheringAdditionalKey = getPpGatheringAdditionalKey();

		String ppGatheringAdditionalKey = cExtParticipationCacheModel.ppGatheringAdditionalKey;

		if ((ppGatheringAdditionalKey != null) &&
				(ppGatheringAdditionalKey.length() == 0)) {
			cExtParticipationCacheModel.ppGatheringAdditionalKey = null;
		}

		cExtParticipationCacheModel.ppGatheringAdditionalType = getPpGatheringAdditionalType();

		String ppGatheringAdditionalType = cExtParticipationCacheModel.ppGatheringAdditionalType;

		if ((ppGatheringAdditionalType != null) &&
				(ppGatheringAdditionalType.length() == 0)) {
			cExtParticipationCacheModel.ppGatheringAdditionalType = null;
		}

		cExtParticipationCacheModel.ppAdditionalInformation = getPpAdditionalInformation();

		String ppAdditionalInformation = cExtParticipationCacheModel.ppAdditionalInformation;

		if ((ppAdditionalInformation != null) &&
				(ppAdditionalInformation.length() == 0)) {
			cExtParticipationCacheModel.ppAdditionalInformation = null;
		}

		cExtParticipationCacheModel.ppPriority = getPpPriority();

		return cExtParticipationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{organizationId=");
		sb.append(getOrganizationId());
		sb.append(", cextParticipationId=");
		sb.append(getCextParticipationId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", ppGatheringId=");
		sb.append(getPpGatheringId());
		sb.append(", ppGatheringKey=");
		sb.append(getPpGatheringKey());
		sb.append(", ppCount=");
		sb.append(getPpCount());
		sb.append(", ppLay=");
		sb.append(isPpLay());
		sb.append(", ppPastor=");
		sb.append(isPpPastor());
		sb.append(", ppStaff=");
		sb.append(isPpStaff());
		sb.append(", ppOther=");
		sb.append(isPpOther());
		sb.append(", ppGatheringAdditionalKey=");
		sb.append(getPpGatheringAdditionalKey());
		sb.append(", ppGatheringAdditionalType=");
		sb.append(getPpGatheringAdditionalType());
		sb.append(", ppAdditionalInformation=");
		sb.append(getPpAdditionalInformation());
		sb.append(", ppPriority=");
		sb.append(getPpPriority());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("ucc.portal.model.CExtParticipation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cextParticipationId</column-name><column-value><![CDATA[");
		sb.append(getCextParticipationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppGatheringId</column-name><column-value><![CDATA[");
		sb.append(getPpGatheringId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppGatheringKey</column-name><column-value><![CDATA[");
		sb.append(getPpGatheringKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppCount</column-name><column-value><![CDATA[");
		sb.append(getPpCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppLay</column-name><column-value><![CDATA[");
		sb.append(isPpLay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppPastor</column-name><column-value><![CDATA[");
		sb.append(isPpPastor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppStaff</column-name><column-value><![CDATA[");
		sb.append(isPpStaff());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppOther</column-name><column-value><![CDATA[");
		sb.append(isPpOther());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppGatheringAdditionalKey</column-name><column-value><![CDATA[");
		sb.append(getPpGatheringAdditionalKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppGatheringAdditionalType</column-name><column-value><![CDATA[");
		sb.append(getPpGatheringAdditionalType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppAdditionalInformation</column-name><column-value><![CDATA[");
		sb.append(getPpAdditionalInformation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ppPriority</column-name><column-value><![CDATA[");
		sb.append(getPpPriority());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CExtParticipation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CExtParticipation.class, ModelWrapper.class
		};
	private long _organizationId;
	private long _originalOrganizationId;
	private boolean _setOriginalOrganizationId;
	private long _cextParticipationId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _ppGatheringId;
	private String _originalPpGatheringId;
	private String _ppGatheringKey;
	private String _originalPpGatheringKey;
	private int _ppCount;
	private boolean _ppLay;
	private boolean _ppPastor;
	private boolean _ppStaff;
	private boolean _ppOther;
	private String _ppGatheringAdditionalKey;
	private String _ppGatheringAdditionalType;
	private String _ppAdditionalInformation;
	private double _ppPriority;
	private long _columnBitmask;
	private CExtParticipation _escapedModel;
}