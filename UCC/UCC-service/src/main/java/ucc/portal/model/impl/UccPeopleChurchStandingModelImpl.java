/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ucc.portal.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import ucc.portal.model.UccPeopleChurchStanding;
import ucc.portal.model.UccPeopleChurchStandingModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UccPeopleChurchStanding service. Represents a row in the &quot;UCC_Data_Warehouse.dbo.People_Church_Standing&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UccPeopleChurchStandingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UccPeopleChurchStandingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UccPeopleChurchStandingImpl
 * @see UccPeopleChurchStanding
 * @see UccPeopleChurchStandingModel
 * @generated
 */
@ProviderType
public class UccPeopleChurchStandingModelImpl extends BaseModelImpl<UccPeopleChurchStanding>
	implements UccPeopleChurchStandingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ucc people church standing model instance should use the {@link UccPeopleChurchStanding} interface instead.
	 */
	public static final String TABLE_NAME = "UCC_Data_Warehouse.dbo.People_Church_Standing";
	public static final Object[][] TABLE_COLUMNS = {
			{ "peopleChurchStandingId", Types.INTEGER },
			{ "peopleId", Types.INTEGER },
			{ "conferenceId", Types.INTEGER },
			{ "associationId", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("peopleChurchStandingId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("peopleId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("conferenceId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("associationId", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table UCC_Data_Warehouse.dbo.People_Church_Standing (peopleChurchStandingId INTEGER not null primary key,peopleId INTEGER,conferenceId INTEGER,associationId INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table UCC_Data_Warehouse.dbo.People_Church_Standing";
	public static final String ORDER_BY_JPQL = " ORDER BY uccPeopleChurchStanding.uccPeopleChurchStandingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UCC_Data_Warehouse.dbo.People_Church_Standing.peopleChurchStandingId ASC";
	public static final String DATA_SOURCE = "uccDataSource";
	public static final String SESSION_FACTORY = "uccSessionFactory";
	public static final String TX_MANAGER = "uccTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ucc.portal.model.UccPeopleChurchStanding"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ucc.portal.model.UccPeopleChurchStanding"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ucc.portal.model.UccPeopleChurchStanding"),
			true);
	public static final long UCCPEOPLEID_COLUMN_BITMASK = 1L;
	public static final long UCCPEOPLECHURCHSTANDINGID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ucc.portal.service.util.ServiceProps.get(
				"lock.expiration.time.ucc.portal.model.UccPeopleChurchStanding"));

	public UccPeopleChurchStandingModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _uccPeopleChurchStandingId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setUccPeopleChurchStandingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _uccPeopleChurchStandingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UccPeopleChurchStanding.class;
	}

	@Override
	public String getModelClassName() {
		return UccPeopleChurchStanding.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uccPeopleChurchStandingId",
			getUccPeopleChurchStandingId());
		attributes.put("uccPeopleId", getUccPeopleId());
		attributes.put("uccConferenceId", getUccConferenceId());
		attributes.put("uccAssociationId", getUccAssociationId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer uccPeopleChurchStandingId = (Integer)attributes.get(
				"uccPeopleChurchStandingId");

		if (uccPeopleChurchStandingId != null) {
			setUccPeopleChurchStandingId(uccPeopleChurchStandingId);
		}

		Integer uccPeopleId = (Integer)attributes.get("uccPeopleId");

		if (uccPeopleId != null) {
			setUccPeopleId(uccPeopleId);
		}

		Integer uccConferenceId = (Integer)attributes.get("uccConferenceId");

		if (uccConferenceId != null) {
			setUccConferenceId(uccConferenceId);
		}

		Integer uccAssociationId = (Integer)attributes.get("uccAssociationId");

		if (uccAssociationId != null) {
			setUccAssociationId(uccAssociationId);
		}
	}

	@Override
	public int getUccPeopleChurchStandingId() {
		return _uccPeopleChurchStandingId;
	}

	@Override
	public void setUccPeopleChurchStandingId(int uccPeopleChurchStandingId) {
		_uccPeopleChurchStandingId = uccPeopleChurchStandingId;
	}

	@Override
	public int getUccPeopleId() {
		return _uccPeopleId;
	}

	@Override
	public void setUccPeopleId(int uccPeopleId) {
		_columnBitmask |= UCCPEOPLEID_COLUMN_BITMASK;

		if (!_setOriginalUccPeopleId) {
			_setOriginalUccPeopleId = true;

			_originalUccPeopleId = _uccPeopleId;
		}

		_uccPeopleId = uccPeopleId;
	}

	public int getOriginalUccPeopleId() {
		return _originalUccPeopleId;
	}

	@Override
	public int getUccConferenceId() {
		return _uccConferenceId;
	}

	@Override
	public void setUccConferenceId(int uccConferenceId) {
		_uccConferenceId = uccConferenceId;
	}

	@Override
	public int getUccAssociationId() {
		return _uccAssociationId;
	}

	@Override
	public void setUccAssociationId(int uccAssociationId) {
		_uccAssociationId = uccAssociationId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public UccPeopleChurchStanding toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UccPeopleChurchStanding)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UccPeopleChurchStandingImpl uccPeopleChurchStandingImpl = new UccPeopleChurchStandingImpl();

		uccPeopleChurchStandingImpl.setUccPeopleChurchStandingId(getUccPeopleChurchStandingId());
		uccPeopleChurchStandingImpl.setUccPeopleId(getUccPeopleId());
		uccPeopleChurchStandingImpl.setUccConferenceId(getUccConferenceId());
		uccPeopleChurchStandingImpl.setUccAssociationId(getUccAssociationId());

		uccPeopleChurchStandingImpl.resetOriginalValues();

		return uccPeopleChurchStandingImpl;
	}

	@Override
	public int compareTo(UccPeopleChurchStanding uccPeopleChurchStanding) {
		int primaryKey = uccPeopleChurchStanding.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UccPeopleChurchStanding)) {
			return false;
		}

		UccPeopleChurchStanding uccPeopleChurchStanding = (UccPeopleChurchStanding)obj;

		int primaryKey = uccPeopleChurchStanding.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UccPeopleChurchStandingModelImpl uccPeopleChurchStandingModelImpl = this;

		uccPeopleChurchStandingModelImpl._originalUccPeopleId = uccPeopleChurchStandingModelImpl._uccPeopleId;

		uccPeopleChurchStandingModelImpl._setOriginalUccPeopleId = false;

		uccPeopleChurchStandingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UccPeopleChurchStanding> toCacheModel() {
		UccPeopleChurchStandingCacheModel uccPeopleChurchStandingCacheModel = new UccPeopleChurchStandingCacheModel();

		uccPeopleChurchStandingCacheModel.uccPeopleChurchStandingId = getUccPeopleChurchStandingId();

		uccPeopleChurchStandingCacheModel.uccPeopleId = getUccPeopleId();

		uccPeopleChurchStandingCacheModel.uccConferenceId = getUccConferenceId();

		uccPeopleChurchStandingCacheModel.uccAssociationId = getUccAssociationId();

		return uccPeopleChurchStandingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{uccPeopleChurchStandingId=");
		sb.append(getUccPeopleChurchStandingId());
		sb.append(", uccPeopleId=");
		sb.append(getUccPeopleId());
		sb.append(", uccConferenceId=");
		sb.append(getUccConferenceId());
		sb.append(", uccAssociationId=");
		sb.append(getUccAssociationId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("ucc.portal.model.UccPeopleChurchStanding");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uccPeopleChurchStandingId</column-name><column-value><![CDATA[");
		sb.append(getUccPeopleChurchStandingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uccPeopleId</column-name><column-value><![CDATA[");
		sb.append(getUccPeopleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uccConferenceId</column-name><column-value><![CDATA[");
		sb.append(getUccConferenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uccAssociationId</column-name><column-value><![CDATA[");
		sb.append(getUccAssociationId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UccPeopleChurchStanding.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UccPeopleChurchStanding.class, ModelWrapper.class
		};
	private int _uccPeopleChurchStandingId;
	private int _uccPeopleId;
	private int _originalUccPeopleId;
	private boolean _setOriginalUccPeopleId;
	private int _uccConferenceId;
	private int _uccAssociationId;
	private long _columnBitmask;
	private UccPeopleChurchStanding _escapedModel;
}