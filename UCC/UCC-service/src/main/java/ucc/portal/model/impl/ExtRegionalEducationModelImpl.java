/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ucc.portal.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import ucc.portal.model.ExtRegionalEducation;
import ucc.portal.model.ExtRegionalEducationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ExtRegionalEducation service. Represents a row in the &quot;UCC_ExtRegionalEducation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ExtRegionalEducationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExtRegionalEducationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExtRegionalEducationImpl
 * @see ExtRegionalEducation
 * @see ExtRegionalEducationModel
 * @generated
 */
@ProviderType
public class ExtRegionalEducationModelImpl extends BaseModelImpl<ExtRegionalEducation>
	implements ExtRegionalEducationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ext regional education model instance should use the {@link ExtRegionalEducation} interface instead.
	 */
	public static final String TABLE_NAME = "UCC_ExtRegionalEducation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "extRegionalEducationId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "programOrExperience", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "regionId", Types.BIGINT },
			{ "countryId", Types.BIGINT },
			{ "startDateOfAttendance", Types.TIMESTAMP },
			{ "endDateOfAttendance", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("extRegionalEducationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("programOrExperience", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("regionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("countryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("startDateOfAttendance", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDateOfAttendance", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table UCC_ExtRegionalEducation (extRegionalEducationId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,programOrExperience VARCHAR(75) null,city VARCHAR(75) null,regionId LONG,countryId LONG,startDateOfAttendance DATE null,endDateOfAttendance DATE null)";
	public static final String TABLE_SQL_DROP = "drop table UCC_ExtRegionalEducation";
	public static final String ORDER_BY_JPQL = " ORDER BY extRegionalEducation.startDateOfAttendance ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UCC_ExtRegionalEducation.startDateOfAttendance ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "extSessionFactory";
	public static final String TX_MANAGER = "extTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ucc.portal.model.ExtRegionalEducation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ucc.portal.model.ExtRegionalEducation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ucc.portal.model.ExtRegionalEducation"),
			true);
	public static final long USERID_COLUMN_BITMASK = 1L;
	public static final long STARTDATEOFATTENDANCE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ucc.portal.service.util.ServiceProps.get(
				"lock.expiration.time.ucc.portal.model.ExtRegionalEducation"));

	public ExtRegionalEducationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _extRegionalEducationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExtRegionalEducationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _extRegionalEducationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExtRegionalEducation.class;
	}

	@Override
	public String getModelClassName() {
		return ExtRegionalEducation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("extRegionalEducationId", getExtRegionalEducationId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("programOrExperience", getProgramOrExperience());
		attributes.put("city", getCity());
		attributes.put("regionId", getRegionId());
		attributes.put("countryId", getCountryId());
		attributes.put("startDateOfAttendance", getStartDateOfAttendance());
		attributes.put("endDateOfAttendance", getEndDateOfAttendance());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long extRegionalEducationId = (Long)attributes.get(
				"extRegionalEducationId");

		if (extRegionalEducationId != null) {
			setExtRegionalEducationId(extRegionalEducationId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String programOrExperience = (String)attributes.get(
				"programOrExperience");

		if (programOrExperience != null) {
			setProgramOrExperience(programOrExperience);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		Long regionId = (Long)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		Long countryId = (Long)attributes.get("countryId");

		if (countryId != null) {
			setCountryId(countryId);
		}

		Date startDateOfAttendance = (Date)attributes.get(
				"startDateOfAttendance");

		if (startDateOfAttendance != null) {
			setStartDateOfAttendance(startDateOfAttendance);
		}

		Date endDateOfAttendance = (Date)attributes.get("endDateOfAttendance");

		if (endDateOfAttendance != null) {
			setEndDateOfAttendance(endDateOfAttendance);
		}
	}

	@Override
	public long getExtRegionalEducationId() {
		return _extRegionalEducationId;
	}

	@Override
	public void setExtRegionalEducationId(long extRegionalEducationId) {
		_extRegionalEducationId = extRegionalEducationId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getProgramOrExperience() {
		if (_programOrExperience == null) {
			return "";
		}
		else {
			return _programOrExperience;
		}
	}

	@Override
	public void setProgramOrExperience(String programOrExperience) {
		_programOrExperience = programOrExperience;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		_regionId = regionId;
	}

	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		_countryId = countryId;
	}

	@Override
	public Date getStartDateOfAttendance() {
		return _startDateOfAttendance;
	}

	@Override
	public void setStartDateOfAttendance(Date startDateOfAttendance) {
		_columnBitmask = -1L;

		_startDateOfAttendance = startDateOfAttendance;
	}

	@Override
	public Date getEndDateOfAttendance() {
		return _endDateOfAttendance;
	}

	@Override
	public void setEndDateOfAttendance(Date endDateOfAttendance) {
		_endDateOfAttendance = endDateOfAttendance;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ExtRegionalEducation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExtRegionalEducation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExtRegionalEducation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExtRegionalEducationImpl extRegionalEducationImpl = new ExtRegionalEducationImpl();

		extRegionalEducationImpl.setExtRegionalEducationId(getExtRegionalEducationId());
		extRegionalEducationImpl.setCompanyId(getCompanyId());
		extRegionalEducationImpl.setUserId(getUserId());
		extRegionalEducationImpl.setCreateDate(getCreateDate());
		extRegionalEducationImpl.setModifiedDate(getModifiedDate());
		extRegionalEducationImpl.setProgramOrExperience(getProgramOrExperience());
		extRegionalEducationImpl.setCity(getCity());
		extRegionalEducationImpl.setRegionId(getRegionId());
		extRegionalEducationImpl.setCountryId(getCountryId());
		extRegionalEducationImpl.setStartDateOfAttendance(getStartDateOfAttendance());
		extRegionalEducationImpl.setEndDateOfAttendance(getEndDateOfAttendance());

		extRegionalEducationImpl.resetOriginalValues();

		return extRegionalEducationImpl;
	}

	@Override
	public int compareTo(ExtRegionalEducation extRegionalEducation) {
		int value = 0;

		value = DateUtil.compareTo(getStartDateOfAttendance(),
				extRegionalEducation.getStartDateOfAttendance());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExtRegionalEducation)) {
			return false;
		}

		ExtRegionalEducation extRegionalEducation = (ExtRegionalEducation)obj;

		long primaryKey = extRegionalEducation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ExtRegionalEducationModelImpl extRegionalEducationModelImpl = this;

		extRegionalEducationModelImpl._originalUserId = extRegionalEducationModelImpl._userId;

		extRegionalEducationModelImpl._setOriginalUserId = false;

		extRegionalEducationModelImpl._setModifiedDate = false;

		extRegionalEducationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ExtRegionalEducation> toCacheModel() {
		ExtRegionalEducationCacheModel extRegionalEducationCacheModel = new ExtRegionalEducationCacheModel();

		extRegionalEducationCacheModel.extRegionalEducationId = getExtRegionalEducationId();

		extRegionalEducationCacheModel.companyId = getCompanyId();

		extRegionalEducationCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			extRegionalEducationCacheModel.createDate = createDate.getTime();
		}
		else {
			extRegionalEducationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			extRegionalEducationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			extRegionalEducationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		extRegionalEducationCacheModel.programOrExperience = getProgramOrExperience();

		String programOrExperience = extRegionalEducationCacheModel.programOrExperience;

		if ((programOrExperience != null) &&
				(programOrExperience.length() == 0)) {
			extRegionalEducationCacheModel.programOrExperience = null;
		}

		extRegionalEducationCacheModel.city = getCity();

		String city = extRegionalEducationCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			extRegionalEducationCacheModel.city = null;
		}

		extRegionalEducationCacheModel.regionId = getRegionId();

		extRegionalEducationCacheModel.countryId = getCountryId();

		Date startDateOfAttendance = getStartDateOfAttendance();

		if (startDateOfAttendance != null) {
			extRegionalEducationCacheModel.startDateOfAttendance = startDateOfAttendance.getTime();
		}
		else {
			extRegionalEducationCacheModel.startDateOfAttendance = Long.MIN_VALUE;
		}

		Date endDateOfAttendance = getEndDateOfAttendance();

		if (endDateOfAttendance != null) {
			extRegionalEducationCacheModel.endDateOfAttendance = endDateOfAttendance.getTime();
		}
		else {
			extRegionalEducationCacheModel.endDateOfAttendance = Long.MIN_VALUE;
		}

		return extRegionalEducationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{extRegionalEducationId=");
		sb.append(getExtRegionalEducationId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", programOrExperience=");
		sb.append(getProgramOrExperience());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", countryId=");
		sb.append(getCountryId());
		sb.append(", startDateOfAttendance=");
		sb.append(getStartDateOfAttendance());
		sb.append(", endDateOfAttendance=");
		sb.append(getEndDateOfAttendance());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("ucc.portal.model.ExtRegionalEducation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>extRegionalEducationId</column-name><column-value><![CDATA[");
		sb.append(getExtRegionalEducationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>programOrExperience</column-name><column-value><![CDATA[");
		sb.append(getProgramOrExperience());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryId</column-name><column-value><![CDATA[");
		sb.append(getCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDateOfAttendance</column-name><column-value><![CDATA[");
		sb.append(getStartDateOfAttendance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDateOfAttendance</column-name><column-value><![CDATA[");
		sb.append(getEndDateOfAttendance());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ExtRegionalEducation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ExtRegionalEducation.class, ModelWrapper.class
		};
	private long _extRegionalEducationId;
	private long _companyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _programOrExperience;
	private String _city;
	private long _regionId;
	private long _countryId;
	private Date _startDateOfAttendance;
	private Date _endDateOfAttendance;
	private long _columnBitmask;
	private ExtRegionalEducation _escapedModel;
}