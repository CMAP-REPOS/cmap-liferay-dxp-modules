/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ucc.portal.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import ucc.portal.model.CExtHistoricalInformationStaffing;
import ucc.portal.model.CExtHistoricalInformationStaffingModel;

import ucc.portal.service.persistence.CExtHistoricalInformationStaffingPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CExtHistoricalInformationStaffing service. Represents a row in the &quot;UCC_CExtHistoricalInformationStaffing&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CExtHistoricalInformationStaffingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CExtHistoricalInformationStaffingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CExtHistoricalInformationStaffingImpl
 * @see CExtHistoricalInformationStaffing
 * @see CExtHistoricalInformationStaffingModel
 * @generated
 */
@ProviderType
public class CExtHistoricalInformationStaffingModelImpl extends BaseModelImpl<CExtHistoricalInformationStaffing>
	implements CExtHistoricalInformationStaffingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a c ext historical information staffing model instance should use the {@link CExtHistoricalInformationStaffing} interface instead.
	 */
	public static final String TABLE_NAME = "UCC_CExtHistoricalInformationStaffing";
	public static final Object[][] TABLE_COLUMNS = {
			{ "organizationId", Types.BIGINT },
			{ "cextHistoricalInformationStaffingId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "hiMinisterName", Types.VARCHAR },
			{ "hiMinisterUCCStanding", Types.BOOLEAN },
			{ "hiMinisterStartYearOfService", Types.INTEGER },
			{ "hiMinisterEndYearOfService", Types.INTEGER },
			{ "hiPriority", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cextHistoricalInformationStaffingId",
			Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("hiMinisterName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hiMinisterUCCStanding", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("hiMinisterStartYearOfService", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("hiMinisterEndYearOfService", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("hiPriority", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table UCC_CExtHistoricalInformationStaffing (organizationId LONG not null,cextHistoricalInformationStaffingId LONG not null,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,hiMinisterName VARCHAR(75) null,hiMinisterUCCStanding BOOLEAN,hiMinisterStartYearOfService INTEGER,hiMinisterEndYearOfService INTEGER,hiPriority DOUBLE,primary key (organizationId, cextHistoricalInformationStaffingId))";
	public static final String TABLE_SQL_DROP = "drop table UCC_CExtHistoricalInformationStaffing";
	public static final String ORDER_BY_JPQL = " ORDER BY cExtHistoricalInformationStaffing.hiPriority ASC, cExtHistoricalInformationStaffing.hiMinisterStartYearOfService ASC, cExtHistoricalInformationStaffing.hiMinisterEndYearOfService ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UCC_CExtHistoricalInformationStaffing.hiPriority ASC, UCC_CExtHistoricalInformationStaffing.hiMinisterStartYearOfService ASC, UCC_CExtHistoricalInformationStaffing.hiMinisterEndYearOfService ASC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "extSessionFactory";
	public static final String TX_MANAGER = "extTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ucc.portal.model.CExtHistoricalInformationStaffing"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ucc.portal.model.CExtHistoricalInformationStaffing"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ucc.portal.model.CExtHistoricalInformationStaffing"),
			true);
	public static final long ORGANIZATIONID_COLUMN_BITMASK = 1L;
	public static final long HIPRIORITY_COLUMN_BITMASK = 2L;
	public static final long HIMINISTERSTARTYEAROFSERVICE_COLUMN_BITMASK = 4L;
	public static final long HIMINISTERENDYEAROFSERVICE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ucc.portal.service.util.ServiceProps.get(
				"lock.expiration.time.ucc.portal.model.CExtHistoricalInformationStaffing"));

	public CExtHistoricalInformationStaffingModelImpl() {
	}

	@Override
	public CExtHistoricalInformationStaffingPK getPrimaryKey() {
		return new CExtHistoricalInformationStaffingPK(_organizationId,
			_cextHistoricalInformationStaffingId);
	}

	@Override
	public void setPrimaryKey(CExtHistoricalInformationStaffingPK primaryKey) {
		setOrganizationId(primaryKey.organizationId);
		setCextHistoricalInformationStaffingId(primaryKey.cextHistoricalInformationStaffingId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new CExtHistoricalInformationStaffingPK(_organizationId,
			_cextHistoricalInformationStaffingId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((CExtHistoricalInformationStaffingPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return CExtHistoricalInformationStaffing.class;
	}

	@Override
	public String getModelClassName() {
		return CExtHistoricalInformationStaffing.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("organizationId", getOrganizationId());
		attributes.put("cextHistoricalInformationStaffingId",
			getCextHistoricalInformationStaffingId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("hiMinisterName", getHiMinisterName());
		attributes.put("hiMinisterUCCStanding", isHiMinisterUCCStanding());
		attributes.put("hiMinisterStartYearOfService",
			getHiMinisterStartYearOfService());
		attributes.put("hiMinisterEndYearOfService",
			getHiMinisterEndYearOfService());
		attributes.put("hiPriority", getHiPriority());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long organizationId = (Long)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}

		Long cextHistoricalInformationStaffingId = (Long)attributes.get(
				"cextHistoricalInformationStaffingId");

		if (cextHistoricalInformationStaffingId != null) {
			setCextHistoricalInformationStaffingId(cextHistoricalInformationStaffingId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String hiMinisterName = (String)attributes.get("hiMinisterName");

		if (hiMinisterName != null) {
			setHiMinisterName(hiMinisterName);
		}

		Boolean hiMinisterUCCStanding = (Boolean)attributes.get(
				"hiMinisterUCCStanding");

		if (hiMinisterUCCStanding != null) {
			setHiMinisterUCCStanding(hiMinisterUCCStanding);
		}

		Integer hiMinisterStartYearOfService = (Integer)attributes.get(
				"hiMinisterStartYearOfService");

		if (hiMinisterStartYearOfService != null) {
			setHiMinisterStartYearOfService(hiMinisterStartYearOfService);
		}

		Integer hiMinisterEndYearOfService = (Integer)attributes.get(
				"hiMinisterEndYearOfService");

		if (hiMinisterEndYearOfService != null) {
			setHiMinisterEndYearOfService(hiMinisterEndYearOfService);
		}

		Double hiPriority = (Double)attributes.get("hiPriority");

		if (hiPriority != null) {
			setHiPriority(hiPriority);
		}
	}

	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_columnBitmask |= ORGANIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalOrganizationId) {
			_setOriginalOrganizationId = true;

			_originalOrganizationId = _organizationId;
		}

		_organizationId = organizationId;
	}

	public long getOriginalOrganizationId() {
		return _originalOrganizationId;
	}

	@Override
	public long getCextHistoricalInformationStaffingId() {
		return _cextHistoricalInformationStaffingId;
	}

	@Override
	public void setCextHistoricalInformationStaffingId(
		long cextHistoricalInformationStaffingId) {
		_cextHistoricalInformationStaffingId = cextHistoricalInformationStaffingId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getHiMinisterName() {
		if (_hiMinisterName == null) {
			return "";
		}
		else {
			return _hiMinisterName;
		}
	}

	@Override
	public void setHiMinisterName(String hiMinisterName) {
		_hiMinisterName = hiMinisterName;
	}

	@Override
	public boolean getHiMinisterUCCStanding() {
		return _hiMinisterUCCStanding;
	}

	@Override
	public boolean isHiMinisterUCCStanding() {
		return _hiMinisterUCCStanding;
	}

	@Override
	public void setHiMinisterUCCStanding(boolean hiMinisterUCCStanding) {
		_hiMinisterUCCStanding = hiMinisterUCCStanding;
	}

	@Override
	public int getHiMinisterStartYearOfService() {
		return _hiMinisterStartYearOfService;
	}

	@Override
	public void setHiMinisterStartYearOfService(
		int hiMinisterStartYearOfService) {
		_columnBitmask = -1L;

		_hiMinisterStartYearOfService = hiMinisterStartYearOfService;
	}

	@Override
	public int getHiMinisterEndYearOfService() {
		return _hiMinisterEndYearOfService;
	}

	@Override
	public void setHiMinisterEndYearOfService(int hiMinisterEndYearOfService) {
		_columnBitmask = -1L;

		_hiMinisterEndYearOfService = hiMinisterEndYearOfService;
	}

	@Override
	public double getHiPriority() {
		return _hiPriority;
	}

	@Override
	public void setHiPriority(double hiPriority) {
		_columnBitmask = -1L;

		_hiPriority = hiPriority;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public CExtHistoricalInformationStaffing toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CExtHistoricalInformationStaffing)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CExtHistoricalInformationStaffingImpl cExtHistoricalInformationStaffingImpl =
			new CExtHistoricalInformationStaffingImpl();

		cExtHistoricalInformationStaffingImpl.setOrganizationId(getOrganizationId());
		cExtHistoricalInformationStaffingImpl.setCextHistoricalInformationStaffingId(getCextHistoricalInformationStaffingId());
		cExtHistoricalInformationStaffingImpl.setCompanyId(getCompanyId());
		cExtHistoricalInformationStaffingImpl.setUserId(getUserId());
		cExtHistoricalInformationStaffingImpl.setCreateDate(getCreateDate());
		cExtHistoricalInformationStaffingImpl.setModifiedDate(getModifiedDate());
		cExtHistoricalInformationStaffingImpl.setHiMinisterName(getHiMinisterName());
		cExtHistoricalInformationStaffingImpl.setHiMinisterUCCStanding(isHiMinisterUCCStanding());
		cExtHistoricalInformationStaffingImpl.setHiMinisterStartYearOfService(getHiMinisterStartYearOfService());
		cExtHistoricalInformationStaffingImpl.setHiMinisterEndYearOfService(getHiMinisterEndYearOfService());
		cExtHistoricalInformationStaffingImpl.setHiPriority(getHiPriority());

		cExtHistoricalInformationStaffingImpl.resetOriginalValues();

		return cExtHistoricalInformationStaffingImpl;
	}

	@Override
	public int compareTo(
		CExtHistoricalInformationStaffing cExtHistoricalInformationStaffing) {
		int value = 0;

		if (getHiPriority() < cExtHistoricalInformationStaffing.getHiPriority()) {
			value = -1;
		}
		else if (getHiPriority() > cExtHistoricalInformationStaffing.getHiPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getHiMinisterStartYearOfService() < cExtHistoricalInformationStaffing.getHiMinisterStartYearOfService()) {
			value = -1;
		}
		else if (getHiMinisterStartYearOfService() > cExtHistoricalInformationStaffing.getHiMinisterStartYearOfService()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getHiMinisterEndYearOfService() < cExtHistoricalInformationStaffing.getHiMinisterEndYearOfService()) {
			value = -1;
		}
		else if (getHiMinisterEndYearOfService() > cExtHistoricalInformationStaffing.getHiMinisterEndYearOfService()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CExtHistoricalInformationStaffing)) {
			return false;
		}

		CExtHistoricalInformationStaffing cExtHistoricalInformationStaffing = (CExtHistoricalInformationStaffing)obj;

		CExtHistoricalInformationStaffingPK primaryKey = cExtHistoricalInformationStaffing.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CExtHistoricalInformationStaffingModelImpl cExtHistoricalInformationStaffingModelImpl =
			this;

		cExtHistoricalInformationStaffingModelImpl._originalOrganizationId = cExtHistoricalInformationStaffingModelImpl._organizationId;

		cExtHistoricalInformationStaffingModelImpl._setOriginalOrganizationId = false;

		cExtHistoricalInformationStaffingModelImpl._setModifiedDate = false;

		cExtHistoricalInformationStaffingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CExtHistoricalInformationStaffing> toCacheModel() {
		CExtHistoricalInformationStaffingCacheModel cExtHistoricalInformationStaffingCacheModel =
			new CExtHistoricalInformationStaffingCacheModel();

		cExtHistoricalInformationStaffingCacheModel.cExtHistoricalInformationStaffingPK = getPrimaryKey();

		cExtHistoricalInformationStaffingCacheModel.organizationId = getOrganizationId();

		cExtHistoricalInformationStaffingCacheModel.cextHistoricalInformationStaffingId = getCextHistoricalInformationStaffingId();

		cExtHistoricalInformationStaffingCacheModel.companyId = getCompanyId();

		cExtHistoricalInformationStaffingCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			cExtHistoricalInformationStaffingCacheModel.createDate = createDate.getTime();
		}
		else {
			cExtHistoricalInformationStaffingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cExtHistoricalInformationStaffingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cExtHistoricalInformationStaffingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cExtHistoricalInformationStaffingCacheModel.hiMinisterName = getHiMinisterName();

		String hiMinisterName = cExtHistoricalInformationStaffingCacheModel.hiMinisterName;

		if ((hiMinisterName != null) && (hiMinisterName.length() == 0)) {
			cExtHistoricalInformationStaffingCacheModel.hiMinisterName = null;
		}

		cExtHistoricalInformationStaffingCacheModel.hiMinisterUCCStanding = isHiMinisterUCCStanding();

		cExtHistoricalInformationStaffingCacheModel.hiMinisterStartYearOfService = getHiMinisterStartYearOfService();

		cExtHistoricalInformationStaffingCacheModel.hiMinisterEndYearOfService = getHiMinisterEndYearOfService();

		cExtHistoricalInformationStaffingCacheModel.hiPriority = getHiPriority();

		return cExtHistoricalInformationStaffingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{organizationId=");
		sb.append(getOrganizationId());
		sb.append(", cextHistoricalInformationStaffingId=");
		sb.append(getCextHistoricalInformationStaffingId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", hiMinisterName=");
		sb.append(getHiMinisterName());
		sb.append(", hiMinisterUCCStanding=");
		sb.append(isHiMinisterUCCStanding());
		sb.append(", hiMinisterStartYearOfService=");
		sb.append(getHiMinisterStartYearOfService());
		sb.append(", hiMinisterEndYearOfService=");
		sb.append(getHiMinisterEndYearOfService());
		sb.append(", hiPriority=");
		sb.append(getHiPriority());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("ucc.portal.model.CExtHistoricalInformationStaffing");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cextHistoricalInformationStaffingId</column-name><column-value><![CDATA[");
		sb.append(getCextHistoricalInformationStaffingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hiMinisterName</column-name><column-value><![CDATA[");
		sb.append(getHiMinisterName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hiMinisterUCCStanding</column-name><column-value><![CDATA[");
		sb.append(isHiMinisterUCCStanding());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hiMinisterStartYearOfService</column-name><column-value><![CDATA[");
		sb.append(getHiMinisterStartYearOfService());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hiMinisterEndYearOfService</column-name><column-value><![CDATA[");
		sb.append(getHiMinisterEndYearOfService());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hiPriority</column-name><column-value><![CDATA[");
		sb.append(getHiPriority());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CExtHistoricalInformationStaffing.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CExtHistoricalInformationStaffing.class, ModelWrapper.class
		};
	private long _organizationId;
	private long _originalOrganizationId;
	private boolean _setOriginalOrganizationId;
	private long _cextHistoricalInformationStaffingId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _hiMinisterName;
	private boolean _hiMinisterUCCStanding;
	private int _hiMinisterStartYearOfService;
	private int _hiMinisterEndYearOfService;
	private double _hiPriority;
	private long _columnBitmask;
	private CExtHistoricalInformationStaffing _escapedModel;
}