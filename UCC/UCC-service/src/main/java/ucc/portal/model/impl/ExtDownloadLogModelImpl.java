/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ucc.portal.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import ucc.portal.model.ExtDownloadLog;
import ucc.portal.model.ExtDownloadLogModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ExtDownloadLog service. Represents a row in the &quot;UCC_ExtDownloadLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ExtDownloadLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExtDownloadLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExtDownloadLogImpl
 * @see ExtDownloadLog
 * @see ExtDownloadLogModel
 * @generated
 */
@ProviderType
public class ExtDownloadLogModelImpl extends BaseModelImpl<ExtDownloadLog>
	implements ExtDownloadLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ext download log model instance should use the {@link ExtDownloadLog} interface instead.
	 */
	public static final String TABLE_NAME = "UCC_ExtDownloadLog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "extDownloadLogId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "profileFileEntryId", Types.BIGINT },
			{ "profileFileVersionId", Types.BIGINT },
			{ "searchAndCallUserId", Types.BIGINT },
			{ "conferenceIds", Types.VARCHAR },
			{ "downloadDate", Types.TIMESTAMP },
			{ "withdrawalDate", Types.TIMESTAMP },
			{ "fitnessReview", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("extDownloadLogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("profileFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("profileFileVersionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("searchAndCallUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("conferenceIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("downloadDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("withdrawalDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fitnessReview", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table UCC_ExtDownloadLog (extDownloadLogId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,profileFileEntryId LONG,profileFileVersionId LONG,searchAndCallUserId LONG,conferenceIds VARCHAR(75) null,downloadDate DATE null,withdrawalDate DATE null,fitnessReview BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table UCC_ExtDownloadLog";
	public static final String ORDER_BY_JPQL = " ORDER BY extDownloadLog.downloadDate DESC, extDownloadLog.withdrawalDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY UCC_ExtDownloadLog.downloadDate DESC, UCC_ExtDownloadLog.withdrawalDate DESC";
	public static final String DATA_SOURCE = "extDataSource";
	public static final String SESSION_FACTORY = "extSessionFactory";
	public static final String TX_MANAGER = "extTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ucc.portal.model.ExtDownloadLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ucc.portal.model.ExtDownloadLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ucc.portal.model.ExtDownloadLog"),
			true);
	public static final long USERID_COLUMN_BITMASK = 1L;
	public static final long WITHDRAWALDATE_COLUMN_BITMASK = 2L;
	public static final long DOWNLOADDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ucc.portal.service.util.ServiceProps.get(
				"lock.expiration.time.ucc.portal.model.ExtDownloadLog"));

	public ExtDownloadLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _extDownloadLogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExtDownloadLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _extDownloadLogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExtDownloadLog.class;
	}

	@Override
	public String getModelClassName() {
		return ExtDownloadLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("extDownloadLogId", getExtDownloadLogId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("profileFileEntryId", getProfileFileEntryId());
		attributes.put("profileFileVersionId", getProfileFileVersionId());
		attributes.put("searchAndCallUserId", getSearchAndCallUserId());
		attributes.put("conferenceIds", getConferenceIds());
		attributes.put("downloadDate", getDownloadDate());
		attributes.put("withdrawalDate", getWithdrawalDate());
		attributes.put("fitnessReview", isFitnessReview());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long extDownloadLogId = (Long)attributes.get("extDownloadLogId");

		if (extDownloadLogId != null) {
			setExtDownloadLogId(extDownloadLogId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long profileFileEntryId = (Long)attributes.get("profileFileEntryId");

		if (profileFileEntryId != null) {
			setProfileFileEntryId(profileFileEntryId);
		}

		Long profileFileVersionId = (Long)attributes.get("profileFileVersionId");

		if (profileFileVersionId != null) {
			setProfileFileVersionId(profileFileVersionId);
		}

		Long searchAndCallUserId = (Long)attributes.get("searchAndCallUserId");

		if (searchAndCallUserId != null) {
			setSearchAndCallUserId(searchAndCallUserId);
		}

		String conferenceIds = (String)attributes.get("conferenceIds");

		if (conferenceIds != null) {
			setConferenceIds(conferenceIds);
		}

		Date downloadDate = (Date)attributes.get("downloadDate");

		if (downloadDate != null) {
			setDownloadDate(downloadDate);
		}

		Date withdrawalDate = (Date)attributes.get("withdrawalDate");

		if (withdrawalDate != null) {
			setWithdrawalDate(withdrawalDate);
		}

		Boolean fitnessReview = (Boolean)attributes.get("fitnessReview");

		if (fitnessReview != null) {
			setFitnessReview(fitnessReview);
		}
	}

	@Override
	public long getExtDownloadLogId() {
		return _extDownloadLogId;
	}

	@Override
	public void setExtDownloadLogId(long extDownloadLogId) {
		_extDownloadLogId = extDownloadLogId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getProfileFileEntryId() {
		return _profileFileEntryId;
	}

	@Override
	public void setProfileFileEntryId(long profileFileEntryId) {
		_profileFileEntryId = profileFileEntryId;
	}

	@Override
	public long getProfileFileVersionId() {
		return _profileFileVersionId;
	}

	@Override
	public void setProfileFileVersionId(long profileFileVersionId) {
		_profileFileVersionId = profileFileVersionId;
	}

	@Override
	public long getSearchAndCallUserId() {
		return _searchAndCallUserId;
	}

	@Override
	public void setSearchAndCallUserId(long searchAndCallUserId) {
		_searchAndCallUserId = searchAndCallUserId;
	}

	@Override
	public String getSearchAndCallUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getSearchAndCallUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setSearchAndCallUserUuid(String searchAndCallUserUuid) {
	}

	@Override
	public String getConferenceIds() {
		if (_conferenceIds == null) {
			return "";
		}
		else {
			return _conferenceIds;
		}
	}

	@Override
	public void setConferenceIds(String conferenceIds) {
		_conferenceIds = conferenceIds;
	}

	@Override
	public Date getDownloadDate() {
		return _downloadDate;
	}

	@Override
	public void setDownloadDate(Date downloadDate) {
		_columnBitmask = -1L;

		_downloadDate = downloadDate;
	}

	@Override
	public Date getWithdrawalDate() {
		return _withdrawalDate;
	}

	@Override
	public void setWithdrawalDate(Date withdrawalDate) {
		_columnBitmask = -1L;

		if (_originalWithdrawalDate == null) {
			_originalWithdrawalDate = _withdrawalDate;
		}

		_withdrawalDate = withdrawalDate;
	}

	public Date getOriginalWithdrawalDate() {
		return _originalWithdrawalDate;
	}

	@Override
	public boolean getFitnessReview() {
		return _fitnessReview;
	}

	@Override
	public boolean isFitnessReview() {
		return _fitnessReview;
	}

	@Override
	public void setFitnessReview(boolean fitnessReview) {
		_fitnessReview = fitnessReview;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ExtDownloadLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExtDownloadLog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExtDownloadLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExtDownloadLogImpl extDownloadLogImpl = new ExtDownloadLogImpl();

		extDownloadLogImpl.setExtDownloadLogId(getExtDownloadLogId());
		extDownloadLogImpl.setCompanyId(getCompanyId());
		extDownloadLogImpl.setUserId(getUserId());
		extDownloadLogImpl.setCreateDate(getCreateDate());
		extDownloadLogImpl.setModifiedDate(getModifiedDate());
		extDownloadLogImpl.setProfileFileEntryId(getProfileFileEntryId());
		extDownloadLogImpl.setProfileFileVersionId(getProfileFileVersionId());
		extDownloadLogImpl.setSearchAndCallUserId(getSearchAndCallUserId());
		extDownloadLogImpl.setConferenceIds(getConferenceIds());
		extDownloadLogImpl.setDownloadDate(getDownloadDate());
		extDownloadLogImpl.setWithdrawalDate(getWithdrawalDate());
		extDownloadLogImpl.setFitnessReview(isFitnessReview());

		extDownloadLogImpl.resetOriginalValues();

		return extDownloadLogImpl;
	}

	@Override
	public int compareTo(ExtDownloadLog extDownloadLog) {
		int value = 0;

		value = DateUtil.compareTo(getDownloadDate(),
				extDownloadLog.getDownloadDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getWithdrawalDate(),
				extDownloadLog.getWithdrawalDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExtDownloadLog)) {
			return false;
		}

		ExtDownloadLog extDownloadLog = (ExtDownloadLog)obj;

		long primaryKey = extDownloadLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ExtDownloadLogModelImpl extDownloadLogModelImpl = this;

		extDownloadLogModelImpl._originalUserId = extDownloadLogModelImpl._userId;

		extDownloadLogModelImpl._setOriginalUserId = false;

		extDownloadLogModelImpl._setModifiedDate = false;

		extDownloadLogModelImpl._originalWithdrawalDate = extDownloadLogModelImpl._withdrawalDate;

		extDownloadLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ExtDownloadLog> toCacheModel() {
		ExtDownloadLogCacheModel extDownloadLogCacheModel = new ExtDownloadLogCacheModel();

		extDownloadLogCacheModel.extDownloadLogId = getExtDownloadLogId();

		extDownloadLogCacheModel.companyId = getCompanyId();

		extDownloadLogCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			extDownloadLogCacheModel.createDate = createDate.getTime();
		}
		else {
			extDownloadLogCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			extDownloadLogCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			extDownloadLogCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		extDownloadLogCacheModel.profileFileEntryId = getProfileFileEntryId();

		extDownloadLogCacheModel.profileFileVersionId = getProfileFileVersionId();

		extDownloadLogCacheModel.searchAndCallUserId = getSearchAndCallUserId();

		extDownloadLogCacheModel.conferenceIds = getConferenceIds();

		String conferenceIds = extDownloadLogCacheModel.conferenceIds;

		if ((conferenceIds != null) && (conferenceIds.length() == 0)) {
			extDownloadLogCacheModel.conferenceIds = null;
		}

		Date downloadDate = getDownloadDate();

		if (downloadDate != null) {
			extDownloadLogCacheModel.downloadDate = downloadDate.getTime();
		}
		else {
			extDownloadLogCacheModel.downloadDate = Long.MIN_VALUE;
		}

		Date withdrawalDate = getWithdrawalDate();

		if (withdrawalDate != null) {
			extDownloadLogCacheModel.withdrawalDate = withdrawalDate.getTime();
		}
		else {
			extDownloadLogCacheModel.withdrawalDate = Long.MIN_VALUE;
		}

		extDownloadLogCacheModel.fitnessReview = isFitnessReview();

		return extDownloadLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{extDownloadLogId=");
		sb.append(getExtDownloadLogId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", profileFileEntryId=");
		sb.append(getProfileFileEntryId());
		sb.append(", profileFileVersionId=");
		sb.append(getProfileFileVersionId());
		sb.append(", searchAndCallUserId=");
		sb.append(getSearchAndCallUserId());
		sb.append(", conferenceIds=");
		sb.append(getConferenceIds());
		sb.append(", downloadDate=");
		sb.append(getDownloadDate());
		sb.append(", withdrawalDate=");
		sb.append(getWithdrawalDate());
		sb.append(", fitnessReview=");
		sb.append(isFitnessReview());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("ucc.portal.model.ExtDownloadLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>extDownloadLogId</column-name><column-value><![CDATA[");
		sb.append(getExtDownloadLogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profileFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getProfileFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profileFileVersionId</column-name><column-value><![CDATA[");
		sb.append(getProfileFileVersionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>searchAndCallUserId</column-name><column-value><![CDATA[");
		sb.append(getSearchAndCallUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conferenceIds</column-name><column-value><![CDATA[");
		sb.append(getConferenceIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>downloadDate</column-name><column-value><![CDATA[");
		sb.append(getDownloadDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>withdrawalDate</column-name><column-value><![CDATA[");
		sb.append(getWithdrawalDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fitnessReview</column-name><column-value><![CDATA[");
		sb.append(isFitnessReview());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ExtDownloadLog.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ExtDownloadLog.class, ModelWrapper.class
		};
	private long _extDownloadLogId;
	private long _companyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _profileFileEntryId;
	private long _profileFileVersionId;
	private long _searchAndCallUserId;
	private String _conferenceIds;
	private Date _downloadDate;
	private Date _withdrawalDate;
	private Date _originalWithdrawalDate;
	private boolean _fitnessReview;
	private long _columnBitmask;
	private ExtDownloadLog _escapedModel;
}