/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ucc.portal.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import ucc.portal.model.UccAssociation;
import ucc.portal.model.UccAssociationModel;
import ucc.portal.model.UccAssociationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UccAssociation service. Represents a row in the &quot;UCC_Data_Warehouse.dbo.Association&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UccAssociationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UccAssociationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UccAssociationImpl
 * @see UccAssociation
 * @see UccAssociationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class UccAssociationModelImpl extends BaseModelImpl<UccAssociation>
	implements UccAssociationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ucc association model instance should use the {@link UccAssociation} interface instead.
	 */
	public static final String TABLE_NAME = "UCC_Data_Warehouse.dbo.Association";
	public static final Object[][] TABLE_COLUMNS = {
			{ "associationId", Types.INTEGER },
			{ "conferenceId", Types.INTEGER },
			{ "association_name", Types.VARCHAR },
			{ "assocabb", Types.VARCHAR },
			{ "active", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("associationId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("conferenceId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("association_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assocabb", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("active", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table UCC_Data_Warehouse.dbo.Association (associationId INTEGER not null primary key,conferenceId INTEGER,association_name VARCHAR(75) null,assocabb VARCHAR(75) null,active BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table UCC_Data_Warehouse.dbo.Association";
	public static final String ORDER_BY_JPQL = " ORDER BY uccAssociation.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UCC_Data_Warehouse.dbo.Association.association_name ASC";
	public static final String DATA_SOURCE = "uccDataSource";
	public static final String SESSION_FACTORY = "uccSessionFactory";
	public static final String TX_MANAGER = "uccTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ucc.portal.model.UccAssociation"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ucc.portal.model.UccAssociation"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ucc.portal.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ucc.portal.model.UccAssociation"),
			true);
	public static final long MYACTIVE_COLUMN_BITMASK = 1L;
	public static final long UCCCONFERENCEID_COLUMN_BITMASK = 2L;
	public static final long NAME_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UccAssociation toModel(UccAssociationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UccAssociation model = new UccAssociationImpl();

		model.setUccAssociationId(soapModel.getUccAssociationId());
		model.setUccConferenceId(soapModel.getUccConferenceId());
		model.setName(soapModel.getName());
		model.setAbbreviation(soapModel.getAbbreviation());
		model.setMyActive(soapModel.isMyActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UccAssociation> toModels(UccAssociationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UccAssociation> models = new ArrayList<UccAssociation>(soapModels.length);

		for (UccAssociationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ucc.portal.service.util.ServiceProps.get(
				"lock.expiration.time.ucc.portal.model.UccAssociation"));

	public UccAssociationModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _uccAssociationId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setUccAssociationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _uccAssociationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UccAssociation.class;
	}

	@Override
	public String getModelClassName() {
		return UccAssociation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uccAssociationId", getUccAssociationId());
		attributes.put("uccConferenceId", getUccConferenceId());
		attributes.put("name", getName());
		attributes.put("abbreviation", getAbbreviation());
		attributes.put("myActive", isMyActive());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer uccAssociationId = (Integer)attributes.get("uccAssociationId");

		if (uccAssociationId != null) {
			setUccAssociationId(uccAssociationId);
		}

		Integer uccConferenceId = (Integer)attributes.get("uccConferenceId");

		if (uccConferenceId != null) {
			setUccConferenceId(uccConferenceId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String abbreviation = (String)attributes.get("abbreviation");

		if (abbreviation != null) {
			setAbbreviation(abbreviation);
		}

		Boolean myActive = (Boolean)attributes.get("myActive");

		if (myActive != null) {
			setMyActive(myActive);
		}
	}

	@JSON
	@Override
	public int getUccAssociationId() {
		return _uccAssociationId;
	}

	@Override
	public void setUccAssociationId(int uccAssociationId) {
		_uccAssociationId = uccAssociationId;
	}

	@JSON
	@Override
	public int getUccConferenceId() {
		return _uccConferenceId;
	}

	@Override
	public void setUccConferenceId(int uccConferenceId) {
		_columnBitmask |= UCCCONFERENCEID_COLUMN_BITMASK;

		if (!_setOriginalUccConferenceId) {
			_setOriginalUccConferenceId = true;

			_originalUccConferenceId = _uccConferenceId;
		}

		_uccConferenceId = uccConferenceId;
	}

	public int getOriginalUccConferenceId() {
		return _originalUccConferenceId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@JSON
	@Override
	public String getAbbreviation() {
		if (_abbreviation == null) {
			return "";
		}
		else {
			return _abbreviation;
		}
	}

	@Override
	public void setAbbreviation(String abbreviation) {
		_abbreviation = abbreviation;
	}

	@JSON
	@Override
	public boolean getMyActive() {
		return _myActive;
	}

	@JSON
	@Override
	public boolean isMyActive() {
		return _myActive;
	}

	@Override
	public void setMyActive(boolean myActive) {
		_columnBitmask |= MYACTIVE_COLUMN_BITMASK;

		if (!_setOriginalMyActive) {
			_setOriginalMyActive = true;

			_originalMyActive = _myActive;
		}

		_myActive = myActive;
	}

	public boolean getOriginalMyActive() {
		return _originalMyActive;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public UccAssociation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UccAssociation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UccAssociationImpl uccAssociationImpl = new UccAssociationImpl();

		uccAssociationImpl.setUccAssociationId(getUccAssociationId());
		uccAssociationImpl.setUccConferenceId(getUccConferenceId());
		uccAssociationImpl.setName(getName());
		uccAssociationImpl.setAbbreviation(getAbbreviation());
		uccAssociationImpl.setMyActive(isMyActive());

		uccAssociationImpl.resetOriginalValues();

		return uccAssociationImpl;
	}

	@Override
	public int compareTo(UccAssociation uccAssociation) {
		int value = 0;

		value = getName().compareTo(uccAssociation.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UccAssociation)) {
			return false;
		}

		UccAssociation uccAssociation = (UccAssociation)obj;

		int primaryKey = uccAssociation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UccAssociationModelImpl uccAssociationModelImpl = this;

		uccAssociationModelImpl._originalUccConferenceId = uccAssociationModelImpl._uccConferenceId;

		uccAssociationModelImpl._setOriginalUccConferenceId = false;

		uccAssociationModelImpl._originalMyActive = uccAssociationModelImpl._myActive;

		uccAssociationModelImpl._setOriginalMyActive = false;

		uccAssociationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UccAssociation> toCacheModel() {
		UccAssociationCacheModel uccAssociationCacheModel = new UccAssociationCacheModel();

		uccAssociationCacheModel.uccAssociationId = getUccAssociationId();

		uccAssociationCacheModel.uccConferenceId = getUccConferenceId();

		uccAssociationCacheModel.name = getName();

		String name = uccAssociationCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			uccAssociationCacheModel.name = null;
		}

		uccAssociationCacheModel.abbreviation = getAbbreviation();

		String abbreviation = uccAssociationCacheModel.abbreviation;

		if ((abbreviation != null) && (abbreviation.length() == 0)) {
			uccAssociationCacheModel.abbreviation = null;
		}

		uccAssociationCacheModel.myActive = isMyActive();

		return uccAssociationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uccAssociationId=");
		sb.append(getUccAssociationId());
		sb.append(", uccConferenceId=");
		sb.append(getUccConferenceId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", abbreviation=");
		sb.append(getAbbreviation());
		sb.append(", myActive=");
		sb.append(isMyActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("ucc.portal.model.UccAssociation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uccAssociationId</column-name><column-value><![CDATA[");
		sb.append(getUccAssociationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uccConferenceId</column-name><column-value><![CDATA[");
		sb.append(getUccConferenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>abbreviation</column-name><column-value><![CDATA[");
		sb.append(getAbbreviation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>myActive</column-name><column-value><![CDATA[");
		sb.append(isMyActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UccAssociation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UccAssociation.class, ModelWrapper.class
		};
	private int _uccAssociationId;
	private int _uccConferenceId;
	private int _originalUccConferenceId;
	private boolean _setOriginalUccConferenceId;
	private String _name;
	private String _abbreviation;
	private boolean _myActive;
	private boolean _originalMyActive;
	private boolean _setOriginalMyActive;
	private long _columnBitmask;
	private UccAssociation _escapedModel;
}