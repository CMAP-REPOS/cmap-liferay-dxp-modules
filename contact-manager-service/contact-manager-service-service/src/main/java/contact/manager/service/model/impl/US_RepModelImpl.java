/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package contact.manager.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import contact.manager.service.model.US_Rep;
import contact.manager.service.model.US_RepModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the US_Rep service. Represents a row in the &quot;contactmanager_US_Rep&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link US_RepModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link US_RepImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see US_RepImpl
 * @see US_Rep
 * @see US_RepModel
 * @generated
 */
@ProviderType
public class US_RepModelImpl extends BaseModelImpl<US_Rep>
	implements US_RepModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a us_ rep model instance should use the {@link US_Rep} interface instead.
	 */
	public static final String TABLE_NAME = "contactmanager_US_Rep";
	public static final Object[][] TABLE_COLUMNS = {
			{ "usRepId", Types.BIGINT },
			{ "usRepNumber", Types.VARCHAR },
			{ "usRepName", Types.VARCHAR },
			{ "zipCode", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("usRepId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("usRepNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("usRepName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipCode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table contactmanager_US_Rep (usRepId LONG not null primary key,usRepNumber VARCHAR(75) null,usRepName VARCHAR(75) null,zipCode VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table contactmanager_US_Rep";
	public static final String ORDER_BY_JPQL = " ORDER BY us_Rep.usRepNumber ASC, us_Rep.usRepName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY contactmanager_US_Rep.usRepNumber ASC, contactmanager_US_Rep.usRepName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.contact.manager.service.model.US_Rep"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.contact.manager.service.model.US_Rep"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.contact.manager.service.model.US_Rep"),
			true);
	public static final long ZIPCODE_COLUMN_BITMASK = 1L;
	public static final long USREPNUMBER_COLUMN_BITMASK = 2L;
	public static final long USREPNAME_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(contact.manager.service.service.util.ServiceProps.get(
				"lock.expiration.time.contact.manager.service.model.US_Rep"));

	public US_RepModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _usRepId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUsRepId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _usRepId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return US_Rep.class;
	}

	@Override
	public String getModelClassName() {
		return US_Rep.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("usRepId", getUsRepId());
		attributes.put("usRepNumber", getUsRepNumber());
		attributes.put("usRepName", getUsRepName());
		attributes.put("zipCode", getZipCode());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long usRepId = (Long)attributes.get("usRepId");

		if (usRepId != null) {
			setUsRepId(usRepId);
		}

		String usRepNumber = (String)attributes.get("usRepNumber");

		if (usRepNumber != null) {
			setUsRepNumber(usRepNumber);
		}

		String usRepName = (String)attributes.get("usRepName");

		if (usRepName != null) {
			setUsRepName(usRepName);
		}

		String zipCode = (String)attributes.get("zipCode");

		if (zipCode != null) {
			setZipCode(zipCode);
		}
	}

	@Override
	public long getUsRepId() {
		return _usRepId;
	}

	@Override
	public void setUsRepId(long usRepId) {
		_usRepId = usRepId;
	}

	@Override
	public String getUsRepNumber() {
		if (_usRepNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _usRepNumber;
		}
	}

	@Override
	public void setUsRepNumber(String usRepNumber) {
		_columnBitmask = -1L;

		_usRepNumber = usRepNumber;
	}

	@Override
	public String getUsRepName() {
		if (_usRepName == null) {
			return StringPool.BLANK;
		}
		else {
			return _usRepName;
		}
	}

	@Override
	public void setUsRepName(String usRepName) {
		_columnBitmask = -1L;

		_usRepName = usRepName;
	}

	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		_columnBitmask |= ZIPCODE_COLUMN_BITMASK;

		if (_originalZipCode == null) {
			_originalZipCode = _zipCode;
		}

		_zipCode = zipCode;
	}

	public String getOriginalZipCode() {
		return GetterUtil.getString(_originalZipCode);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			US_Rep.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public US_Rep toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (US_Rep)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		US_RepImpl us_RepImpl = new US_RepImpl();

		us_RepImpl.setUsRepId(getUsRepId());
		us_RepImpl.setUsRepNumber(getUsRepNumber());
		us_RepImpl.setUsRepName(getUsRepName());
		us_RepImpl.setZipCode(getZipCode());

		us_RepImpl.resetOriginalValues();

		return us_RepImpl;
	}

	@Override
	public int compareTo(US_Rep us_Rep) {
		int value = 0;

		value = getUsRepNumber().compareTo(us_Rep.getUsRepNumber());

		if (value != 0) {
			return value;
		}

		value = getUsRepName().compareTo(us_Rep.getUsRepName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof US_Rep)) {
			return false;
		}

		US_Rep us_Rep = (US_Rep)obj;

		long primaryKey = us_Rep.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		US_RepModelImpl us_RepModelImpl = this;

		us_RepModelImpl._originalZipCode = us_RepModelImpl._zipCode;

		us_RepModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<US_Rep> toCacheModel() {
		US_RepCacheModel us_RepCacheModel = new US_RepCacheModel();

		us_RepCacheModel.usRepId = getUsRepId();

		us_RepCacheModel.usRepNumber = getUsRepNumber();

		String usRepNumber = us_RepCacheModel.usRepNumber;

		if ((usRepNumber != null) && (usRepNumber.length() == 0)) {
			us_RepCacheModel.usRepNumber = null;
		}

		us_RepCacheModel.usRepName = getUsRepName();

		String usRepName = us_RepCacheModel.usRepName;

		if ((usRepName != null) && (usRepName.length() == 0)) {
			us_RepCacheModel.usRepName = null;
		}

		us_RepCacheModel.zipCode = getZipCode();

		String zipCode = us_RepCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			us_RepCacheModel.zipCode = null;
		}

		return us_RepCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{usRepId=");
		sb.append(getUsRepId());
		sb.append(", usRepNumber=");
		sb.append(getUsRepNumber());
		sb.append(", usRepName=");
		sb.append(getUsRepName());
		sb.append(", zipCode=");
		sb.append(getZipCode());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("contact.manager.service.model.US_Rep");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>usRepId</column-name><column-value><![CDATA[");
		sb.append(getUsRepId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usRepNumber</column-name><column-value><![CDATA[");
		sb.append(getUsRepNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usRepName</column-name><column-value><![CDATA[");
		sb.append(getUsRepName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zipCode</column-name><column-value><![CDATA[");
		sb.append(getZipCode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = US_Rep.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			US_Rep.class
		};
	private long _usRepId;
	private String _usRepNumber;
	private String _usRepName;
	private String _zipCode;
	private String _originalZipCode;
	private long _columnBitmask;
	private US_Rep _escapedModel;
}