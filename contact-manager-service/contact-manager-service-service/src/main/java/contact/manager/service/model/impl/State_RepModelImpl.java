/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package contact.manager.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import contact.manager.service.model.State_Rep;
import contact.manager.service.model.State_RepModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the State_Rep service. Represents a row in the &quot;contactmanager_State_Rep&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link State_RepModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link State_RepImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see State_RepImpl
 * @see State_Rep
 * @see State_RepModel
 * @generated
 */
@ProviderType
public class State_RepModelImpl extends BaseModelImpl<State_Rep>
	implements State_RepModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a state_ rep model instance should use the {@link State_Rep} interface instead.
	 */
	public static final String TABLE_NAME = "contactmanager_State_Rep";
	public static final Object[][] TABLE_COLUMNS = {
			{ "stateRepId", Types.BIGINT },
			{ "stateRepNumber", Types.INTEGER },
			{ "stateRepName", Types.VARCHAR },
			{ "zipCode", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("stateRepId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stateRepNumber", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("stateRepName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipCode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table contactmanager_State_Rep (stateRepId LONG not null primary key,stateRepNumber INTEGER,stateRepName VARCHAR(75) null,zipCode VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table contactmanager_State_Rep";
	public static final String ORDER_BY_JPQL = " ORDER BY state_Rep.stateRepNumber ASC, state_Rep.stateRepName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY contactmanager_State_Rep.stateRepNumber ASC, contactmanager_State_Rep.stateRepName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.contact.manager.service.model.State_Rep"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.contact.manager.service.model.State_Rep"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(contact.manager.service.service.util.ServiceProps.get(
				"lock.expiration.time.contact.manager.service.model.State_Rep"));

	public State_RepModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stateRepId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStateRepId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stateRepId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return State_Rep.class;
	}

	@Override
	public String getModelClassName() {
		return State_Rep.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("stateRepId", getStateRepId());
		attributes.put("stateRepNumber", getStateRepNumber());
		attributes.put("stateRepName", getStateRepName());
		attributes.put("zipCode", getZipCode());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long stateRepId = (Long)attributes.get("stateRepId");

		if (stateRepId != null) {
			setStateRepId(stateRepId);
		}

		Integer stateRepNumber = (Integer)attributes.get("stateRepNumber");

		if (stateRepNumber != null) {
			setStateRepNumber(stateRepNumber);
		}

		String stateRepName = (String)attributes.get("stateRepName");

		if (stateRepName != null) {
			setStateRepName(stateRepName);
		}

		String zipCode = (String)attributes.get("zipCode");

		if (zipCode != null) {
			setZipCode(zipCode);
		}
	}

	@Override
	public long getStateRepId() {
		return _stateRepId;
	}

	@Override
	public void setStateRepId(long stateRepId) {
		_stateRepId = stateRepId;
	}

	@Override
	public int getStateRepNumber() {
		return _stateRepNumber;
	}

	@Override
	public void setStateRepNumber(int stateRepNumber) {
		_stateRepNumber = stateRepNumber;
	}

	@Override
	public String getStateRepName() {
		if (_stateRepName == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateRepName;
		}
	}

	@Override
	public void setStateRepName(String stateRepName) {
		_stateRepName = stateRepName;
	}

	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		_zipCode = zipCode;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			State_Rep.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public State_Rep toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (State_Rep)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		State_RepImpl state_RepImpl = new State_RepImpl();

		state_RepImpl.setStateRepId(getStateRepId());
		state_RepImpl.setStateRepNumber(getStateRepNumber());
		state_RepImpl.setStateRepName(getStateRepName());
		state_RepImpl.setZipCode(getZipCode());

		state_RepImpl.resetOriginalValues();

		return state_RepImpl;
	}

	@Override
	public int compareTo(State_Rep state_Rep) {
		int value = 0;

		if (getStateRepNumber() < state_Rep.getStateRepNumber()) {
			value = -1;
		}
		else if (getStateRepNumber() > state_Rep.getStateRepNumber()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getStateRepName().compareTo(state_Rep.getStateRepName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof State_Rep)) {
			return false;
		}

		State_Rep state_Rep = (State_Rep)obj;

		long primaryKey = state_Rep.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<State_Rep> toCacheModel() {
		State_RepCacheModel state_RepCacheModel = new State_RepCacheModel();

		state_RepCacheModel.stateRepId = getStateRepId();

		state_RepCacheModel.stateRepNumber = getStateRepNumber();

		state_RepCacheModel.stateRepName = getStateRepName();

		String stateRepName = state_RepCacheModel.stateRepName;

		if ((stateRepName != null) && (stateRepName.length() == 0)) {
			state_RepCacheModel.stateRepName = null;
		}

		state_RepCacheModel.zipCode = getZipCode();

		String zipCode = state_RepCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			state_RepCacheModel.zipCode = null;
		}

		return state_RepCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{stateRepId=");
		sb.append(getStateRepId());
		sb.append(", stateRepNumber=");
		sb.append(getStateRepNumber());
		sb.append(", stateRepName=");
		sb.append(getStateRepName());
		sb.append(", zipCode=");
		sb.append(getZipCode());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("contact.manager.service.model.State_Rep");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>stateRepId</column-name><column-value><![CDATA[");
		sb.append(getStateRepId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateRepNumber</column-name><column-value><![CDATA[");
		sb.append(getStateRepNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateRepName</column-name><column-value><![CDATA[");
		sb.append(getStateRepName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zipCode</column-name><column-value><![CDATA[");
		sb.append(getZipCode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = State_Rep.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			State_Rep.class
		};
	private long _stateRepId;
	private int _stateRepNumber;
	private String _stateRepName;
	private String _zipCode;
	private State_Rep _escapedModel;
}