/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package contact.manager.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import contact.manager.service.model.Chi_Ward;
import contact.manager.service.model.Chi_WardModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Chi_Ward service. Represents a row in the &quot;contactmanager_Chi_Ward&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link Chi_WardModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Chi_WardImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Chi_WardImpl
 * @see Chi_Ward
 * @see Chi_WardModel
 * @generated
 */
@ProviderType
public class Chi_WardModelImpl extends BaseModelImpl<Chi_Ward>
	implements Chi_WardModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a chi_ ward model instance should use the {@link Chi_Ward} interface instead.
	 */
	public static final String TABLE_NAME = "contactmanager_Chi_Ward";
	public static final Object[][] TABLE_COLUMNS = {
			{ "chiWardId", Types.BIGINT },
			{ "chiWardName", Types.VARCHAR },
			{ "zipCode", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("chiWardId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("chiWardName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipCode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table contactmanager_Chi_Ward (chiWardId LONG not null primary key,chiWardName VARCHAR(75) null,zipCode VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table contactmanager_Chi_Ward";
	public static final String ORDER_BY_JPQL = " ORDER BY chi_Ward.chiWardName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY contactmanager_Chi_Ward.chiWardName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.contact.manager.service.model.Chi_Ward"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.contact.manager.service.model.Chi_Ward"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.contact.manager.service.model.Chi_Ward"),
			true);
	public static final long ZIPCODE_COLUMN_BITMASK = 1L;
	public static final long CHIWARDNAME_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(contact.manager.service.service.util.ServiceProps.get(
				"lock.expiration.time.contact.manager.service.model.Chi_Ward"));

	public Chi_WardModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _chiWardId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setChiWardId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _chiWardId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Chi_Ward.class;
	}

	@Override
	public String getModelClassName() {
		return Chi_Ward.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("chiWardId", getChiWardId());
		attributes.put("chiWardName", getChiWardName());
		attributes.put("zipCode", getZipCode());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long chiWardId = (Long)attributes.get("chiWardId");

		if (chiWardId != null) {
			setChiWardId(chiWardId);
		}

		String chiWardName = (String)attributes.get("chiWardName");

		if (chiWardName != null) {
			setChiWardName(chiWardName);
		}

		String zipCode = (String)attributes.get("zipCode");

		if (zipCode != null) {
			setZipCode(zipCode);
		}
	}

	@Override
	public long getChiWardId() {
		return _chiWardId;
	}

	@Override
	public void setChiWardId(long chiWardId) {
		_chiWardId = chiWardId;
	}

	@Override
	public String getChiWardName() {
		if (_chiWardName == null) {
			return StringPool.BLANK;
		}
		else {
			return _chiWardName;
		}
	}

	@Override
	public void setChiWardName(String chiWardName) {
		_columnBitmask = -1L;

		_chiWardName = chiWardName;
	}

	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		_columnBitmask |= ZIPCODE_COLUMN_BITMASK;

		if (_originalZipCode == null) {
			_originalZipCode = _zipCode;
		}

		_zipCode = zipCode;
	}

	public String getOriginalZipCode() {
		return GetterUtil.getString(_originalZipCode);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Chi_Ward.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Chi_Ward toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Chi_Ward)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Chi_WardImpl chi_WardImpl = new Chi_WardImpl();

		chi_WardImpl.setChiWardId(getChiWardId());
		chi_WardImpl.setChiWardName(getChiWardName());
		chi_WardImpl.setZipCode(getZipCode());

		chi_WardImpl.resetOriginalValues();

		return chi_WardImpl;
	}

	@Override
	public int compareTo(Chi_Ward chi_Ward) {
		int value = 0;

		value = getChiWardName().compareTo(chi_Ward.getChiWardName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Chi_Ward)) {
			return false;
		}

		Chi_Ward chi_Ward = (Chi_Ward)obj;

		long primaryKey = chi_Ward.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		Chi_WardModelImpl chi_WardModelImpl = this;

		chi_WardModelImpl._originalZipCode = chi_WardModelImpl._zipCode;

		chi_WardModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Chi_Ward> toCacheModel() {
		Chi_WardCacheModel chi_WardCacheModel = new Chi_WardCacheModel();

		chi_WardCacheModel.chiWardId = getChiWardId();

		chi_WardCacheModel.chiWardName = getChiWardName();

		String chiWardName = chi_WardCacheModel.chiWardName;

		if ((chiWardName != null) && (chiWardName.length() == 0)) {
			chi_WardCacheModel.chiWardName = null;
		}

		chi_WardCacheModel.zipCode = getZipCode();

		String zipCode = chi_WardCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			chi_WardCacheModel.zipCode = null;
		}

		return chi_WardCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{chiWardId=");
		sb.append(getChiWardId());
		sb.append(", chiWardName=");
		sb.append(getChiWardName());
		sb.append(", zipCode=");
		sb.append(getZipCode());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("contact.manager.service.model.Chi_Ward");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>chiWardId</column-name><column-value><![CDATA[");
		sb.append(getChiWardId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>chiWardName</column-name><column-value><![CDATA[");
		sb.append(getChiWardName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zipCode</column-name><column-value><![CDATA[");
		sb.append(getZipCode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Chi_Ward.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Chi_Ward.class
		};
	private long _chiWardId;
	private String _chiWardName;
	private String _zipCode;
	private String _originalZipCode;
	private long _columnBitmask;
	private Chi_Ward _escapedModel;
}