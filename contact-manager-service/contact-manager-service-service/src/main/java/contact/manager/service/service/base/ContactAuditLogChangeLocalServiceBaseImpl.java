/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package contact.manager.service.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import contact.manager.service.model.ContactAuditLogChange;
import contact.manager.service.service.ContactAuditLogChangeLocalService;
import contact.manager.service.service.persistence.CCAPersistence;
import contact.manager.service.service.persistence.Chi_WardPersistence;
import contact.manager.service.service.persistence.CmapGroupPersistence;
import contact.manager.service.service.persistence.CmapSubGroupPersistence;
import contact.manager.service.service.persistence.CmapTagPersistence;
import contact.manager.service.service.persistence.ContactAuditLogChangePersistence;
import contact.manager.service.service.persistence.ContactAuditLogPersistence;
import contact.manager.service.service.persistence.ContactPersistence;
import contact.manager.service.service.persistence.CountyPersistence;
import contact.manager.service.service.persistence.County_Commissioner_or_Board_DistPersistence;
import contact.manager.service.service.persistence.LTAPersistence;
import contact.manager.service.service.persistence.MuniPersistence;
import contact.manager.service.service.persistence.NotePersistence;
import contact.manager.service.service.persistence.OutreachLogPersistence;
import contact.manager.service.service.persistence.State_RepPersistence;
import contact.manager.service.service.persistence.State_SenatePersistence;
import contact.manager.service.service.persistence.US_RepPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the contact audit log change local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link contact.manager.service.service.impl.ContactAuditLogChangeLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see contact.manager.service.service.impl.ContactAuditLogChangeLocalServiceImpl
 * @see contact.manager.service.service.ContactAuditLogChangeLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ContactAuditLogChangeLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ContactAuditLogChangeLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link contact.manager.service.service.ContactAuditLogChangeLocalServiceUtil} to access the contact audit log change local service.
	 */

	/**
	 * Adds the contact audit log change to the database. Also notifies the appropriate model listeners.
	 *
	 * @param contactAuditLogChange the contact audit log change
	 * @return the contact audit log change that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ContactAuditLogChange addContactAuditLogChange(
		ContactAuditLogChange contactAuditLogChange) {
		contactAuditLogChange.setNew(true);

		return contactAuditLogChangePersistence.update(contactAuditLogChange);
	}

	/**
	 * Creates a new contact audit log change with the primary key. Does not add the contact audit log change to the database.
	 *
	 * @param contactAuditLogChangeId the primary key for the new contact audit log change
	 * @return the new contact audit log change
	 */
	@Override
	public ContactAuditLogChange createContactAuditLogChange(
		long contactAuditLogChangeId) {
		return contactAuditLogChangePersistence.create(contactAuditLogChangeId);
	}

	/**
	 * Deletes the contact audit log change with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param contactAuditLogChangeId the primary key of the contact audit log change
	 * @return the contact audit log change that was removed
	 * @throws PortalException if a contact audit log change with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ContactAuditLogChange deleteContactAuditLogChange(
		long contactAuditLogChangeId) throws PortalException {
		return contactAuditLogChangePersistence.remove(contactAuditLogChangeId);
	}

	/**
	 * Deletes the contact audit log change from the database. Also notifies the appropriate model listeners.
	 *
	 * @param contactAuditLogChange the contact audit log change
	 * @return the contact audit log change that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ContactAuditLogChange deleteContactAuditLogChange(
		ContactAuditLogChange contactAuditLogChange) {
		return contactAuditLogChangePersistence.remove(contactAuditLogChange);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ContactAuditLogChange.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return contactAuditLogChangePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link contact.manager.service.model.impl.ContactAuditLogChangeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return contactAuditLogChangePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link contact.manager.service.model.impl.ContactAuditLogChangeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return contactAuditLogChangePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return contactAuditLogChangePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return contactAuditLogChangePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ContactAuditLogChange fetchContactAuditLogChange(
		long contactAuditLogChangeId) {
		return contactAuditLogChangePersistence.fetchByPrimaryKey(contactAuditLogChangeId);
	}

	/**
	 * Returns the contact audit log change with the primary key.
	 *
	 * @param contactAuditLogChangeId the primary key of the contact audit log change
	 * @return the contact audit log change
	 * @throws PortalException if a contact audit log change with the primary key could not be found
	 */
	@Override
	public ContactAuditLogChange getContactAuditLogChange(
		long contactAuditLogChangeId) throws PortalException {
		return contactAuditLogChangePersistence.findByPrimaryKey(contactAuditLogChangeId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(contactAuditLogChangeLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ContactAuditLogChange.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"contactAuditLogChangeId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(contactAuditLogChangeLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ContactAuditLogChange.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"contactAuditLogChangeId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(contactAuditLogChangeLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ContactAuditLogChange.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"contactAuditLogChangeId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return contactAuditLogChangeLocalService.deleteContactAuditLogChange((ContactAuditLogChange)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return contactAuditLogChangePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the contact audit log changes.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link contact.manager.service.model.impl.ContactAuditLogChangeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of contact audit log changes
	 * @param end the upper bound of the range of contact audit log changes (not inclusive)
	 * @return the range of contact audit log changes
	 */
	@Override
	public List<ContactAuditLogChange> getContactAuditLogChanges(int start,
		int end) {
		return contactAuditLogChangePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of contact audit log changes.
	 *
	 * @return the number of contact audit log changes
	 */
	@Override
	public int getContactAuditLogChangesCount() {
		return contactAuditLogChangePersistence.countAll();
	}

	/**
	 * Updates the contact audit log change in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param contactAuditLogChange the contact audit log change
	 * @return the contact audit log change that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ContactAuditLogChange updateContactAuditLogChange(
		ContactAuditLogChange contactAuditLogChange) {
		return contactAuditLogChangePersistence.update(contactAuditLogChange);
	}

	/**
	 * Returns the cca local service.
	 *
	 * @return the cca local service
	 */
	public contact.manager.service.service.CCALocalService getCCALocalService() {
		return ccaLocalService;
	}

	/**
	 * Sets the cca local service.
	 *
	 * @param ccaLocalService the cca local service
	 */
	public void setCCALocalService(
		contact.manager.service.service.CCALocalService ccaLocalService) {
		this.ccaLocalService = ccaLocalService;
	}

	/**
	 * Returns the cca persistence.
	 *
	 * @return the cca persistence
	 */
	public CCAPersistence getCCAPersistence() {
		return ccaPersistence;
	}

	/**
	 * Sets the cca persistence.
	 *
	 * @param ccaPersistence the cca persistence
	 */
	public void setCCAPersistence(CCAPersistence ccaPersistence) {
		this.ccaPersistence = ccaPersistence;
	}

	/**
	 * Returns the chi_ ward local service.
	 *
	 * @return the chi_ ward local service
	 */
	public contact.manager.service.service.Chi_WardLocalService getChi_WardLocalService() {
		return chi_WardLocalService;
	}

	/**
	 * Sets the chi_ ward local service.
	 *
	 * @param chi_WardLocalService the chi_ ward local service
	 */
	public void setChi_WardLocalService(
		contact.manager.service.service.Chi_WardLocalService chi_WardLocalService) {
		this.chi_WardLocalService = chi_WardLocalService;
	}

	/**
	 * Returns the chi_ ward persistence.
	 *
	 * @return the chi_ ward persistence
	 */
	public Chi_WardPersistence getChi_WardPersistence() {
		return chi_WardPersistence;
	}

	/**
	 * Sets the chi_ ward persistence.
	 *
	 * @param chi_WardPersistence the chi_ ward persistence
	 */
	public void setChi_WardPersistence(Chi_WardPersistence chi_WardPersistence) {
		this.chi_WardPersistence = chi_WardPersistence;
	}

	/**
	 * Returns the cmap group local service.
	 *
	 * @return the cmap group local service
	 */
	public contact.manager.service.service.CmapGroupLocalService getCmapGroupLocalService() {
		return cmapGroupLocalService;
	}

	/**
	 * Sets the cmap group local service.
	 *
	 * @param cmapGroupLocalService the cmap group local service
	 */
	public void setCmapGroupLocalService(
		contact.manager.service.service.CmapGroupLocalService cmapGroupLocalService) {
		this.cmapGroupLocalService = cmapGroupLocalService;
	}

	/**
	 * Returns the cmap group persistence.
	 *
	 * @return the cmap group persistence
	 */
	public CmapGroupPersistence getCmapGroupPersistence() {
		return cmapGroupPersistence;
	}

	/**
	 * Sets the cmap group persistence.
	 *
	 * @param cmapGroupPersistence the cmap group persistence
	 */
	public void setCmapGroupPersistence(
		CmapGroupPersistence cmapGroupPersistence) {
		this.cmapGroupPersistence = cmapGroupPersistence;
	}

	/**
	 * Returns the cmap sub group local service.
	 *
	 * @return the cmap sub group local service
	 */
	public contact.manager.service.service.CmapSubGroupLocalService getCmapSubGroupLocalService() {
		return cmapSubGroupLocalService;
	}

	/**
	 * Sets the cmap sub group local service.
	 *
	 * @param cmapSubGroupLocalService the cmap sub group local service
	 */
	public void setCmapSubGroupLocalService(
		contact.manager.service.service.CmapSubGroupLocalService cmapSubGroupLocalService) {
		this.cmapSubGroupLocalService = cmapSubGroupLocalService;
	}

	/**
	 * Returns the cmap sub group persistence.
	 *
	 * @return the cmap sub group persistence
	 */
	public CmapSubGroupPersistence getCmapSubGroupPersistence() {
		return cmapSubGroupPersistence;
	}

	/**
	 * Sets the cmap sub group persistence.
	 *
	 * @param cmapSubGroupPersistence the cmap sub group persistence
	 */
	public void setCmapSubGroupPersistence(
		CmapSubGroupPersistence cmapSubGroupPersistence) {
		this.cmapSubGroupPersistence = cmapSubGroupPersistence;
	}

	/**
	 * Returns the cmap tag local service.
	 *
	 * @return the cmap tag local service
	 */
	public contact.manager.service.service.CmapTagLocalService getCmapTagLocalService() {
		return cmapTagLocalService;
	}

	/**
	 * Sets the cmap tag local service.
	 *
	 * @param cmapTagLocalService the cmap tag local service
	 */
	public void setCmapTagLocalService(
		contact.manager.service.service.CmapTagLocalService cmapTagLocalService) {
		this.cmapTagLocalService = cmapTagLocalService;
	}

	/**
	 * Returns the cmap tag persistence.
	 *
	 * @return the cmap tag persistence
	 */
	public CmapTagPersistence getCmapTagPersistence() {
		return cmapTagPersistence;
	}

	/**
	 * Sets the cmap tag persistence.
	 *
	 * @param cmapTagPersistence the cmap tag persistence
	 */
	public void setCmapTagPersistence(CmapTagPersistence cmapTagPersistence) {
		this.cmapTagPersistence = cmapTagPersistence;
	}

	/**
	 * Returns the contact local service.
	 *
	 * @return the contact local service
	 */
	public contact.manager.service.service.ContactLocalService getContactLocalService() {
		return contactLocalService;
	}

	/**
	 * Sets the contact local service.
	 *
	 * @param contactLocalService the contact local service
	 */
	public void setContactLocalService(
		contact.manager.service.service.ContactLocalService contactLocalService) {
		this.contactLocalService = contactLocalService;
	}

	/**
	 * Returns the contact persistence.
	 *
	 * @return the contact persistence
	 */
	public ContactPersistence getContactPersistence() {
		return contactPersistence;
	}

	/**
	 * Sets the contact persistence.
	 *
	 * @param contactPersistence the contact persistence
	 */
	public void setContactPersistence(ContactPersistence contactPersistence) {
		this.contactPersistence = contactPersistence;
	}

	/**
	 * Returns the contact audit log local service.
	 *
	 * @return the contact audit log local service
	 */
	public contact.manager.service.service.ContactAuditLogLocalService getContactAuditLogLocalService() {
		return contactAuditLogLocalService;
	}

	/**
	 * Sets the contact audit log local service.
	 *
	 * @param contactAuditLogLocalService the contact audit log local service
	 */
	public void setContactAuditLogLocalService(
		contact.manager.service.service.ContactAuditLogLocalService contactAuditLogLocalService) {
		this.contactAuditLogLocalService = contactAuditLogLocalService;
	}

	/**
	 * Returns the contact audit log persistence.
	 *
	 * @return the contact audit log persistence
	 */
	public ContactAuditLogPersistence getContactAuditLogPersistence() {
		return contactAuditLogPersistence;
	}

	/**
	 * Sets the contact audit log persistence.
	 *
	 * @param contactAuditLogPersistence the contact audit log persistence
	 */
	public void setContactAuditLogPersistence(
		ContactAuditLogPersistence contactAuditLogPersistence) {
		this.contactAuditLogPersistence = contactAuditLogPersistence;
	}

	/**
	 * Returns the contact audit log change local service.
	 *
	 * @return the contact audit log change local service
	 */
	public ContactAuditLogChangeLocalService getContactAuditLogChangeLocalService() {
		return contactAuditLogChangeLocalService;
	}

	/**
	 * Sets the contact audit log change local service.
	 *
	 * @param contactAuditLogChangeLocalService the contact audit log change local service
	 */
	public void setContactAuditLogChangeLocalService(
		ContactAuditLogChangeLocalService contactAuditLogChangeLocalService) {
		this.contactAuditLogChangeLocalService = contactAuditLogChangeLocalService;
	}

	/**
	 * Returns the contact audit log change persistence.
	 *
	 * @return the contact audit log change persistence
	 */
	public ContactAuditLogChangePersistence getContactAuditLogChangePersistence() {
		return contactAuditLogChangePersistence;
	}

	/**
	 * Sets the contact audit log change persistence.
	 *
	 * @param contactAuditLogChangePersistence the contact audit log change persistence
	 */
	public void setContactAuditLogChangePersistence(
		ContactAuditLogChangePersistence contactAuditLogChangePersistence) {
		this.contactAuditLogChangePersistence = contactAuditLogChangePersistence;
	}

	/**
	 * Returns the county local service.
	 *
	 * @return the county local service
	 */
	public contact.manager.service.service.CountyLocalService getCountyLocalService() {
		return countyLocalService;
	}

	/**
	 * Sets the county local service.
	 *
	 * @param countyLocalService the county local service
	 */
	public void setCountyLocalService(
		contact.manager.service.service.CountyLocalService countyLocalService) {
		this.countyLocalService = countyLocalService;
	}

	/**
	 * Returns the county persistence.
	 *
	 * @return the county persistence
	 */
	public CountyPersistence getCountyPersistence() {
		return countyPersistence;
	}

	/**
	 * Sets the county persistence.
	 *
	 * @param countyPersistence the county persistence
	 */
	public void setCountyPersistence(CountyPersistence countyPersistence) {
		this.countyPersistence = countyPersistence;
	}

	/**
	 * Returns the county_ commissioner_or_ board_ dist local service.
	 *
	 * @return the county_ commissioner_or_ board_ dist local service
	 */
	public contact.manager.service.service.County_Commissioner_or_Board_DistLocalService getCounty_Commissioner_or_Board_DistLocalService() {
		return county_Commissioner_or_Board_DistLocalService;
	}

	/**
	 * Sets the county_ commissioner_or_ board_ dist local service.
	 *
	 * @param county_Commissioner_or_Board_DistLocalService the county_ commissioner_or_ board_ dist local service
	 */
	public void setCounty_Commissioner_or_Board_DistLocalService(
		contact.manager.service.service.County_Commissioner_or_Board_DistLocalService county_Commissioner_or_Board_DistLocalService) {
		this.county_Commissioner_or_Board_DistLocalService = county_Commissioner_or_Board_DistLocalService;
	}

	/**
	 * Returns the county_ commissioner_or_ board_ dist persistence.
	 *
	 * @return the county_ commissioner_or_ board_ dist persistence
	 */
	public County_Commissioner_or_Board_DistPersistence getCounty_Commissioner_or_Board_DistPersistence() {
		return county_Commissioner_or_Board_DistPersistence;
	}

	/**
	 * Sets the county_ commissioner_or_ board_ dist persistence.
	 *
	 * @param county_Commissioner_or_Board_DistPersistence the county_ commissioner_or_ board_ dist persistence
	 */
	public void setCounty_Commissioner_or_Board_DistPersistence(
		County_Commissioner_or_Board_DistPersistence county_Commissioner_or_Board_DistPersistence) {
		this.county_Commissioner_or_Board_DistPersistence = county_Commissioner_or_Board_DistPersistence;
	}

	/**
	 * Returns the lta local service.
	 *
	 * @return the lta local service
	 */
	public contact.manager.service.service.LTALocalService getLTALocalService() {
		return ltaLocalService;
	}

	/**
	 * Sets the lta local service.
	 *
	 * @param ltaLocalService the lta local service
	 */
	public void setLTALocalService(
		contact.manager.service.service.LTALocalService ltaLocalService) {
		this.ltaLocalService = ltaLocalService;
	}

	/**
	 * Returns the lta persistence.
	 *
	 * @return the lta persistence
	 */
	public LTAPersistence getLTAPersistence() {
		return ltaPersistence;
	}

	/**
	 * Sets the lta persistence.
	 *
	 * @param ltaPersistence the lta persistence
	 */
	public void setLTAPersistence(LTAPersistence ltaPersistence) {
		this.ltaPersistence = ltaPersistence;
	}

	/**
	 * Returns the muni local service.
	 *
	 * @return the muni local service
	 */
	public contact.manager.service.service.MuniLocalService getMuniLocalService() {
		return muniLocalService;
	}

	/**
	 * Sets the muni local service.
	 *
	 * @param muniLocalService the muni local service
	 */
	public void setMuniLocalService(
		contact.manager.service.service.MuniLocalService muniLocalService) {
		this.muniLocalService = muniLocalService;
	}

	/**
	 * Returns the muni persistence.
	 *
	 * @return the muni persistence
	 */
	public MuniPersistence getMuniPersistence() {
		return muniPersistence;
	}

	/**
	 * Sets the muni persistence.
	 *
	 * @param muniPersistence the muni persistence
	 */
	public void setMuniPersistence(MuniPersistence muniPersistence) {
		this.muniPersistence = muniPersistence;
	}

	/**
	 * Returns the note local service.
	 *
	 * @return the note local service
	 */
	public contact.manager.service.service.NoteLocalService getNoteLocalService() {
		return noteLocalService;
	}

	/**
	 * Sets the note local service.
	 *
	 * @param noteLocalService the note local service
	 */
	public void setNoteLocalService(
		contact.manager.service.service.NoteLocalService noteLocalService) {
		this.noteLocalService = noteLocalService;
	}

	/**
	 * Returns the note persistence.
	 *
	 * @return the note persistence
	 */
	public NotePersistence getNotePersistence() {
		return notePersistence;
	}

	/**
	 * Sets the note persistence.
	 *
	 * @param notePersistence the note persistence
	 */
	public void setNotePersistence(NotePersistence notePersistence) {
		this.notePersistence = notePersistence;
	}

	/**
	 * Returns the outreach log local service.
	 *
	 * @return the outreach log local service
	 */
	public contact.manager.service.service.OutreachLogLocalService getOutreachLogLocalService() {
		return outreachLogLocalService;
	}

	/**
	 * Sets the outreach log local service.
	 *
	 * @param outreachLogLocalService the outreach log local service
	 */
	public void setOutreachLogLocalService(
		contact.manager.service.service.OutreachLogLocalService outreachLogLocalService) {
		this.outreachLogLocalService = outreachLogLocalService;
	}

	/**
	 * Returns the outreach log persistence.
	 *
	 * @return the outreach log persistence
	 */
	public OutreachLogPersistence getOutreachLogPersistence() {
		return outreachLogPersistence;
	}

	/**
	 * Sets the outreach log persistence.
	 *
	 * @param outreachLogPersistence the outreach log persistence
	 */
	public void setOutreachLogPersistence(
		OutreachLogPersistence outreachLogPersistence) {
		this.outreachLogPersistence = outreachLogPersistence;
	}

	/**
	 * Returns the state_ rep local service.
	 *
	 * @return the state_ rep local service
	 */
	public contact.manager.service.service.State_RepLocalService getState_RepLocalService() {
		return state_RepLocalService;
	}

	/**
	 * Sets the state_ rep local service.
	 *
	 * @param state_RepLocalService the state_ rep local service
	 */
	public void setState_RepLocalService(
		contact.manager.service.service.State_RepLocalService state_RepLocalService) {
		this.state_RepLocalService = state_RepLocalService;
	}

	/**
	 * Returns the state_ rep persistence.
	 *
	 * @return the state_ rep persistence
	 */
	public State_RepPersistence getState_RepPersistence() {
		return state_RepPersistence;
	}

	/**
	 * Sets the state_ rep persistence.
	 *
	 * @param state_RepPersistence the state_ rep persistence
	 */
	public void setState_RepPersistence(
		State_RepPersistence state_RepPersistence) {
		this.state_RepPersistence = state_RepPersistence;
	}

	/**
	 * Returns the state_ senate local service.
	 *
	 * @return the state_ senate local service
	 */
	public contact.manager.service.service.State_SenateLocalService getState_SenateLocalService() {
		return state_SenateLocalService;
	}

	/**
	 * Sets the state_ senate local service.
	 *
	 * @param state_SenateLocalService the state_ senate local service
	 */
	public void setState_SenateLocalService(
		contact.manager.service.service.State_SenateLocalService state_SenateLocalService) {
		this.state_SenateLocalService = state_SenateLocalService;
	}

	/**
	 * Returns the state_ senate persistence.
	 *
	 * @return the state_ senate persistence
	 */
	public State_SenatePersistence getState_SenatePersistence() {
		return state_SenatePersistence;
	}

	/**
	 * Sets the state_ senate persistence.
	 *
	 * @param state_SenatePersistence the state_ senate persistence
	 */
	public void setState_SenatePersistence(
		State_SenatePersistence state_SenatePersistence) {
		this.state_SenatePersistence = state_SenatePersistence;
	}

	/**
	 * Returns the us_ rep local service.
	 *
	 * @return the us_ rep local service
	 */
	public contact.manager.service.service.US_RepLocalService getUS_RepLocalService() {
		return us_RepLocalService;
	}

	/**
	 * Sets the us_ rep local service.
	 *
	 * @param us_RepLocalService the us_ rep local service
	 */
	public void setUS_RepLocalService(
		contact.manager.service.service.US_RepLocalService us_RepLocalService) {
		this.us_RepLocalService = us_RepLocalService;
	}

	/**
	 * Returns the us_ rep persistence.
	 *
	 * @return the us_ rep persistence
	 */
	public US_RepPersistence getUS_RepPersistence() {
		return us_RepPersistence;
	}

	/**
	 * Sets the us_ rep persistence.
	 *
	 * @param us_RepPersistence the us_ rep persistence
	 */
	public void setUS_RepPersistence(US_RepPersistence us_RepPersistence) {
		this.us_RepPersistence = us_RepPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("contact.manager.service.model.ContactAuditLogChange",
			contactAuditLogChangeLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"contact.manager.service.model.ContactAuditLogChange");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ContactAuditLogChangeLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ContactAuditLogChange.class;
	}

	protected String getModelClassName() {
		return ContactAuditLogChange.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = contactAuditLogChangePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = contact.manager.service.service.CCALocalService.class)
	protected contact.manager.service.service.CCALocalService ccaLocalService;
	@BeanReference(type = CCAPersistence.class)
	protected CCAPersistence ccaPersistence;
	@BeanReference(type = contact.manager.service.service.Chi_WardLocalService.class)
	protected contact.manager.service.service.Chi_WardLocalService chi_WardLocalService;
	@BeanReference(type = Chi_WardPersistence.class)
	protected Chi_WardPersistence chi_WardPersistence;
	@BeanReference(type = contact.manager.service.service.CmapGroupLocalService.class)
	protected contact.manager.service.service.CmapGroupLocalService cmapGroupLocalService;
	@BeanReference(type = CmapGroupPersistence.class)
	protected CmapGroupPersistence cmapGroupPersistence;
	@BeanReference(type = contact.manager.service.service.CmapSubGroupLocalService.class)
	protected contact.manager.service.service.CmapSubGroupLocalService cmapSubGroupLocalService;
	@BeanReference(type = CmapSubGroupPersistence.class)
	protected CmapSubGroupPersistence cmapSubGroupPersistence;
	@BeanReference(type = contact.manager.service.service.CmapTagLocalService.class)
	protected contact.manager.service.service.CmapTagLocalService cmapTagLocalService;
	@BeanReference(type = CmapTagPersistence.class)
	protected CmapTagPersistence cmapTagPersistence;
	@BeanReference(type = contact.manager.service.service.ContactLocalService.class)
	protected contact.manager.service.service.ContactLocalService contactLocalService;
	@BeanReference(type = ContactPersistence.class)
	protected ContactPersistence contactPersistence;
	@BeanReference(type = contact.manager.service.service.ContactAuditLogLocalService.class)
	protected contact.manager.service.service.ContactAuditLogLocalService contactAuditLogLocalService;
	@BeanReference(type = ContactAuditLogPersistence.class)
	protected ContactAuditLogPersistence contactAuditLogPersistence;
	@BeanReference(type = ContactAuditLogChangeLocalService.class)
	protected ContactAuditLogChangeLocalService contactAuditLogChangeLocalService;
	@BeanReference(type = ContactAuditLogChangePersistence.class)
	protected ContactAuditLogChangePersistence contactAuditLogChangePersistence;
	@BeanReference(type = contact.manager.service.service.CountyLocalService.class)
	protected contact.manager.service.service.CountyLocalService countyLocalService;
	@BeanReference(type = CountyPersistence.class)
	protected CountyPersistence countyPersistence;
	@BeanReference(type = contact.manager.service.service.County_Commissioner_or_Board_DistLocalService.class)
	protected contact.manager.service.service.County_Commissioner_or_Board_DistLocalService county_Commissioner_or_Board_DistLocalService;
	@BeanReference(type = County_Commissioner_or_Board_DistPersistence.class)
	protected County_Commissioner_or_Board_DistPersistence county_Commissioner_or_Board_DistPersistence;
	@BeanReference(type = contact.manager.service.service.LTALocalService.class)
	protected contact.manager.service.service.LTALocalService ltaLocalService;
	@BeanReference(type = LTAPersistence.class)
	protected LTAPersistence ltaPersistence;
	@BeanReference(type = contact.manager.service.service.MuniLocalService.class)
	protected contact.manager.service.service.MuniLocalService muniLocalService;
	@BeanReference(type = MuniPersistence.class)
	protected MuniPersistence muniPersistence;
	@BeanReference(type = contact.manager.service.service.NoteLocalService.class)
	protected contact.manager.service.service.NoteLocalService noteLocalService;
	@BeanReference(type = NotePersistence.class)
	protected NotePersistence notePersistence;
	@BeanReference(type = contact.manager.service.service.OutreachLogLocalService.class)
	protected contact.manager.service.service.OutreachLogLocalService outreachLogLocalService;
	@BeanReference(type = OutreachLogPersistence.class)
	protected OutreachLogPersistence outreachLogPersistence;
	@BeanReference(type = contact.manager.service.service.State_RepLocalService.class)
	protected contact.manager.service.service.State_RepLocalService state_RepLocalService;
	@BeanReference(type = State_RepPersistence.class)
	protected State_RepPersistence state_RepPersistence;
	@BeanReference(type = contact.manager.service.service.State_SenateLocalService.class)
	protected contact.manager.service.service.State_SenateLocalService state_SenateLocalService;
	@BeanReference(type = State_SenatePersistence.class)
	protected State_SenatePersistence state_SenatePersistence;
	@BeanReference(type = contact.manager.service.service.US_RepLocalService.class)
	protected contact.manager.service.service.US_RepLocalService us_RepLocalService;
	@BeanReference(type = US_RepPersistence.class)
	protected US_RepPersistence us_RepPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}