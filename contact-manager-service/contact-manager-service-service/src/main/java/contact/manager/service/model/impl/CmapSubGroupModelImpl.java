/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package contact.manager.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import contact.manager.service.model.CmapSubGroup;
import contact.manager.service.model.CmapSubGroupModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CmapSubGroup service. Represents a row in the &quot;contactmanager_CmapSubGroup&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CmapSubGroupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CmapSubGroupImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CmapSubGroupImpl
 * @see CmapSubGroup
 * @see CmapSubGroupModel
 * @generated
 */
@ProviderType
public class CmapSubGroupModelImpl extends BaseModelImpl<CmapSubGroup>
	implements CmapSubGroupModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cmap sub group model instance should use the {@link CmapSubGroup} interface instead.
	 */
	public static final String TABLE_NAME = "contactmanager_CmapSubGroup";
	public static final Object[][] TABLE_COLUMNS = {
			{ "subGroupId", Types.BIGINT },
			{ "subGroupName", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("subGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subGroupName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table contactmanager_CmapSubGroup (subGroupId LONG not null primary key,subGroupName VARCHAR(75) null,groupId LONG,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table contactmanager_CmapSubGroup";
	public static final String ORDER_BY_JPQL = " ORDER BY cmapSubGroup.subGroupId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY contactmanager_CmapSubGroup.subGroupId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.contact.manager.service.model.CmapSubGroup"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.contact.manager.service.model.CmapSubGroup"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final String MAPPING_TABLE_CONTACTMANAGER_CONTACTS_CMAPSUBGROUPS_NAME =
		"contactmanager_Contacts_CmapSubGroups";
	public static final Object[][] MAPPING_TABLE_CONTACTMANAGER_CONTACTS_CMAPSUBGROUPS_COLUMNS =
		{
			{ "companyId", Types.BIGINT },
			{ "subGroupId", Types.BIGINT },
			{ "contactId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_CONTACTMANAGER_CONTACTS_CMAPSUBGROUPS_SQL_CREATE =
		"create table contactmanager_Contacts_CmapSubGroups (companyId LONG not null,subGroupId LONG not null,contactId LONG not null,primary key (subGroupId, contactId))";
	public static final boolean FINDER_CACHE_ENABLED_CONTACTMANAGER_CONTACTS_CMAPSUBGROUPS =
		GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.contactmanager_Contacts_CmapSubGroups"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(contact.manager.service.service.util.ServiceProps.get(
				"lock.expiration.time.contact.manager.service.model.CmapSubGroup"));

	public CmapSubGroupModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _subGroupId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSubGroupId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _subGroupId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CmapSubGroup.class;
	}

	@Override
	public String getModelClassName() {
		return CmapSubGroup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("subGroupId", getSubGroupId());
		attributes.put("subGroupName", getSubGroupName());
		attributes.put("groupId", getGroupId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long subGroupId = (Long)attributes.get("subGroupId");

		if (subGroupId != null) {
			setSubGroupId(subGroupId);
		}

		String subGroupName = (String)attributes.get("subGroupName");

		if (subGroupName != null) {
			setSubGroupName(subGroupName);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getSubGroupId() {
		return _subGroupId;
	}

	@Override
	public void setSubGroupId(long subGroupId) {
		_subGroupId = subGroupId;
	}

	@Override
	public String getSubGroupName() {
		if (_subGroupName == null) {
			return StringPool.BLANK;
		}
		else {
			return _subGroupName;
		}
	}

	@Override
	public void setSubGroupName(String subGroupName) {
		_subGroupName = subGroupName;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CmapSubGroup.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CmapSubGroup toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CmapSubGroup)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CmapSubGroupImpl cmapSubGroupImpl = new CmapSubGroupImpl();

		cmapSubGroupImpl.setSubGroupId(getSubGroupId());
		cmapSubGroupImpl.setSubGroupName(getSubGroupName());
		cmapSubGroupImpl.setGroupId(getGroupId());
		cmapSubGroupImpl.setCreateDate(getCreateDate());
		cmapSubGroupImpl.setModifiedDate(getModifiedDate());

		cmapSubGroupImpl.resetOriginalValues();

		return cmapSubGroupImpl;
	}

	@Override
	public int compareTo(CmapSubGroup cmapSubGroup) {
		long primaryKey = cmapSubGroup.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CmapSubGroup)) {
			return false;
		}

		CmapSubGroup cmapSubGroup = (CmapSubGroup)obj;

		long primaryKey = cmapSubGroup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CmapSubGroupModelImpl cmapSubGroupModelImpl = this;

		cmapSubGroupModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<CmapSubGroup> toCacheModel() {
		CmapSubGroupCacheModel cmapSubGroupCacheModel = new CmapSubGroupCacheModel();

		cmapSubGroupCacheModel.subGroupId = getSubGroupId();

		cmapSubGroupCacheModel.subGroupName = getSubGroupName();

		String subGroupName = cmapSubGroupCacheModel.subGroupName;

		if ((subGroupName != null) && (subGroupName.length() == 0)) {
			cmapSubGroupCacheModel.subGroupName = null;
		}

		cmapSubGroupCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			cmapSubGroupCacheModel.createDate = createDate.getTime();
		}
		else {
			cmapSubGroupCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cmapSubGroupCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cmapSubGroupCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return cmapSubGroupCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{subGroupId=");
		sb.append(getSubGroupId());
		sb.append(", subGroupName=");
		sb.append(getSubGroupName());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("contact.manager.service.model.CmapSubGroup");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>subGroupId</column-name><column-value><![CDATA[");
		sb.append(getSubGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subGroupName</column-name><column-value><![CDATA[");
		sb.append(getSubGroupName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CmapSubGroup.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CmapSubGroup.class
		};
	private long _subGroupId;
	private String _subGroupName;
	private long _groupId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private CmapSubGroup _escapedModel;
}