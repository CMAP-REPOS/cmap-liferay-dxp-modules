/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package contact.manager.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import contact.manager.service.model.ContactAuditLog;
import contact.manager.service.model.ContactAuditLogModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ContactAuditLog service. Represents a row in the &quot;contactmanager_ContactAuditLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ContactAuditLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactAuditLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContactAuditLogImpl
 * @see ContactAuditLog
 * @see ContactAuditLogModel
 * @generated
 */
@ProviderType
public class ContactAuditLogModelImpl extends BaseModelImpl<ContactAuditLog>
	implements ContactAuditLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contact audit log model instance should use the {@link ContactAuditLog} interface instead.
	 */
	public static final String TABLE_NAME = "contactmanager_ContactAuditLog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "contactAuditLogId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "action", Types.VARCHAR },
			{ "constantContactId", Types.BIGINT },
			{ "oldSnapshot", Types.VARCHAR },
			{ "newSnapshot", Types.VARCHAR },
			{ "contactId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("contactAuditLogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("action", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("constantContactId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("oldSnapshot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newSnapshot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table contactmanager_ContactAuditLog (contactAuditLogId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,action VARCHAR(75) null,constantContactId LONG,oldSnapshot VARCHAR(75) null,newSnapshot VARCHAR(75) null,contactId LONG)";
	public static final String TABLE_SQL_DROP = "drop table contactmanager_ContactAuditLog";
	public static final String ORDER_BY_JPQL = " ORDER BY contactAuditLog.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY contactmanager_ContactAuditLog.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.contact.manager.service.model.ContactAuditLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.contact.manager.service.model.ContactAuditLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.contact.manager.service.model.ContactAuditLog"),
			true);
	public static final long CONSTANTCONTACTID_COLUMN_BITMASK = 1L;
	public static final long CONTACTID_COLUMN_BITMASK = 2L;
	public static final long CREATEDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(contact.manager.service.service.util.ServiceProps.get(
				"lock.expiration.time.contact.manager.service.model.ContactAuditLog"));

	public ContactAuditLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contactAuditLogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContactAuditLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contactAuditLogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContactAuditLog.class;
	}

	@Override
	public String getModelClassName() {
		return ContactAuditLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contactAuditLogId", getContactAuditLogId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("action", getAction());
		attributes.put("constantContactId", getConstantContactId());
		attributes.put("oldSnapshot", getOldSnapshot());
		attributes.put("newSnapshot", getNewSnapshot());
		attributes.put("contactId", getContactId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long contactAuditLogId = (Long)attributes.get("contactAuditLogId");

		if (contactAuditLogId != null) {
			setContactAuditLogId(contactAuditLogId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String action = (String)attributes.get("action");

		if (action != null) {
			setAction(action);
		}

		Long constantContactId = (Long)attributes.get("constantContactId");

		if (constantContactId != null) {
			setConstantContactId(constantContactId);
		}

		String oldSnapshot = (String)attributes.get("oldSnapshot");

		if (oldSnapshot != null) {
			setOldSnapshot(oldSnapshot);
		}

		String newSnapshot = (String)attributes.get("newSnapshot");

		if (newSnapshot != null) {
			setNewSnapshot(newSnapshot);
		}

		Long contactId = (Long)attributes.get("contactId");

		if (contactId != null) {
			setContactId(contactId);
		}
	}

	@Override
	public long getContactAuditLogId() {
		return _contactAuditLogId;
	}

	@Override
	public void setContactAuditLogId(long contactAuditLogId) {
		_contactAuditLogId = contactAuditLogId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public String getAction() {
		if (_action == null) {
			return StringPool.BLANK;
		}
		else {
			return _action;
		}
	}

	@Override
	public void setAction(String action) {
		_action = action;
	}

	@Override
	public long getConstantContactId() {
		return _constantContactId;
	}

	@Override
	public void setConstantContactId(long constantContactId) {
		_columnBitmask |= CONSTANTCONTACTID_COLUMN_BITMASK;

		if (!_setOriginalConstantContactId) {
			_setOriginalConstantContactId = true;

			_originalConstantContactId = _constantContactId;
		}

		_constantContactId = constantContactId;
	}

	public long getOriginalConstantContactId() {
		return _originalConstantContactId;
	}

	@Override
	public String getOldSnapshot() {
		if (_oldSnapshot == null) {
			return StringPool.BLANK;
		}
		else {
			return _oldSnapshot;
		}
	}

	@Override
	public void setOldSnapshot(String oldSnapshot) {
		_oldSnapshot = oldSnapshot;
	}

	@Override
	public String getNewSnapshot() {
		if (_newSnapshot == null) {
			return StringPool.BLANK;
		}
		else {
			return _newSnapshot;
		}
	}

	@Override
	public void setNewSnapshot(String newSnapshot) {
		_newSnapshot = newSnapshot;
	}

	@Override
	public long getContactId() {
		return _contactId;
	}

	@Override
	public void setContactId(long contactId) {
		_columnBitmask |= CONTACTID_COLUMN_BITMASK;

		if (!_setOriginalContactId) {
			_setOriginalContactId = true;

			_originalContactId = _contactId;
		}

		_contactId = contactId;
	}

	public long getOriginalContactId() {
		return _originalContactId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ContactAuditLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContactAuditLog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ContactAuditLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContactAuditLogImpl contactAuditLogImpl = new ContactAuditLogImpl();

		contactAuditLogImpl.setContactAuditLogId(getContactAuditLogId());
		contactAuditLogImpl.setGroupId(getGroupId());
		contactAuditLogImpl.setCompanyId(getCompanyId());
		contactAuditLogImpl.setUserId(getUserId());
		contactAuditLogImpl.setCreateDate(getCreateDate());
		contactAuditLogImpl.setAction(getAction());
		contactAuditLogImpl.setConstantContactId(getConstantContactId());
		contactAuditLogImpl.setOldSnapshot(getOldSnapshot());
		contactAuditLogImpl.setNewSnapshot(getNewSnapshot());
		contactAuditLogImpl.setContactId(getContactId());

		contactAuditLogImpl.resetOriginalValues();

		return contactAuditLogImpl;
	}

	@Override
	public int compareTo(ContactAuditLog contactAuditLog) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				contactAuditLog.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ContactAuditLog)) {
			return false;
		}

		ContactAuditLog contactAuditLog = (ContactAuditLog)obj;

		long primaryKey = contactAuditLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ContactAuditLogModelImpl contactAuditLogModelImpl = this;

		contactAuditLogModelImpl._originalConstantContactId = contactAuditLogModelImpl._constantContactId;

		contactAuditLogModelImpl._setOriginalConstantContactId = false;

		contactAuditLogModelImpl._originalContactId = contactAuditLogModelImpl._contactId;

		contactAuditLogModelImpl._setOriginalContactId = false;

		contactAuditLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ContactAuditLog> toCacheModel() {
		ContactAuditLogCacheModel contactAuditLogCacheModel = new ContactAuditLogCacheModel();

		contactAuditLogCacheModel.contactAuditLogId = getContactAuditLogId();

		contactAuditLogCacheModel.groupId = getGroupId();

		contactAuditLogCacheModel.companyId = getCompanyId();

		contactAuditLogCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			contactAuditLogCacheModel.createDate = createDate.getTime();
		}
		else {
			contactAuditLogCacheModel.createDate = Long.MIN_VALUE;
		}

		contactAuditLogCacheModel.action = getAction();

		String action = contactAuditLogCacheModel.action;

		if ((action != null) && (action.length() == 0)) {
			contactAuditLogCacheModel.action = null;
		}

		contactAuditLogCacheModel.constantContactId = getConstantContactId();

		contactAuditLogCacheModel.oldSnapshot = getOldSnapshot();

		String oldSnapshot = contactAuditLogCacheModel.oldSnapshot;

		if ((oldSnapshot != null) && (oldSnapshot.length() == 0)) {
			contactAuditLogCacheModel.oldSnapshot = null;
		}

		contactAuditLogCacheModel.newSnapshot = getNewSnapshot();

		String newSnapshot = contactAuditLogCacheModel.newSnapshot;

		if ((newSnapshot != null) && (newSnapshot.length() == 0)) {
			contactAuditLogCacheModel.newSnapshot = null;
		}

		contactAuditLogCacheModel.contactId = getContactId();

		return contactAuditLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{contactAuditLogId=");
		sb.append(getContactAuditLogId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", action=");
		sb.append(getAction());
		sb.append(", constantContactId=");
		sb.append(getConstantContactId());
		sb.append(", oldSnapshot=");
		sb.append(getOldSnapshot());
		sb.append(", newSnapshot=");
		sb.append(getNewSnapshot());
		sb.append(", contactId=");
		sb.append(getContactId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("contact.manager.service.model.ContactAuditLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contactAuditLogId</column-name><column-value><![CDATA[");
		sb.append(getContactAuditLogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>action</column-name><column-value><![CDATA[");
		sb.append(getAction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>constantContactId</column-name><column-value><![CDATA[");
		sb.append(getConstantContactId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oldSnapshot</column-name><column-value><![CDATA[");
		sb.append(getOldSnapshot());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newSnapshot</column-name><column-value><![CDATA[");
		sb.append(getNewSnapshot());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactId</column-name><column-value><![CDATA[");
		sb.append(getContactId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ContactAuditLog.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ContactAuditLog.class
		};
	private long _contactAuditLogId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private String _action;
	private long _constantContactId;
	private long _originalConstantContactId;
	private boolean _setOriginalConstantContactId;
	private String _oldSnapshot;
	private String _newSnapshot;
	private long _contactId;
	private long _originalContactId;
	private boolean _setOriginalContactId;
	private long _columnBitmask;
	private ContactAuditLog _escapedModel;
}