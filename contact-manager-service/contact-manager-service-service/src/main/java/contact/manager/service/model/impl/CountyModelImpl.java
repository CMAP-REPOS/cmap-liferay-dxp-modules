/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package contact.manager.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import contact.manager.service.model.County;
import contact.manager.service.model.CountyModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the County service. Represents a row in the &quot;contactmanager_County&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CountyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CountyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CountyImpl
 * @see County
 * @see CountyModel
 * @generated
 */
@ProviderType
public class CountyModelImpl extends BaseModelImpl<County>
	implements CountyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a county model instance should use the {@link County} interface instead.
	 */
	public static final String TABLE_NAME = "contactmanager_County";
	public static final Object[][] TABLE_COLUMNS = {
			{ "countyId", Types.BIGINT },
			{ "countyName", Types.VARCHAR },
			{ "zipCode", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("countyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("countyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipCode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table contactmanager_County (countyId LONG not null primary key,countyName VARCHAR(75) null,zipCode VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table contactmanager_County";
	public static final String ORDER_BY_JPQL = " ORDER BY county.countyName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY contactmanager_County.countyName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.contact.manager.service.model.County"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(contact.manager.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.contact.manager.service.model.County"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(contact.manager.service.service.util.ServiceProps.get(
				"lock.expiration.time.contact.manager.service.model.County"));

	public CountyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _countyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCountyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _countyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return County.class;
	}

	@Override
	public String getModelClassName() {
		return County.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("countyId", getCountyId());
		attributes.put("countyName", getCountyName());
		attributes.put("zipCode", getZipCode());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long countyId = (Long)attributes.get("countyId");

		if (countyId != null) {
			setCountyId(countyId);
		}

		String countyName = (String)attributes.get("countyName");

		if (countyName != null) {
			setCountyName(countyName);
		}

		String zipCode = (String)attributes.get("zipCode");

		if (zipCode != null) {
			setZipCode(zipCode);
		}
	}

	@Override
	public long getCountyId() {
		return _countyId;
	}

	@Override
	public void setCountyId(long countyId) {
		_countyId = countyId;
	}

	@Override
	public String getCountyName() {
		if (_countyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _countyName;
		}
	}

	@Override
	public void setCountyName(String countyName) {
		_countyName = countyName;
	}

	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		_zipCode = zipCode;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			County.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public County toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (County)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CountyImpl countyImpl = new CountyImpl();

		countyImpl.setCountyId(getCountyId());
		countyImpl.setCountyName(getCountyName());
		countyImpl.setZipCode(getZipCode());

		countyImpl.resetOriginalValues();

		return countyImpl;
	}

	@Override
	public int compareTo(County county) {
		int value = 0;

		value = getCountyName().compareTo(county.getCountyName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof County)) {
			return false;
		}

		County county = (County)obj;

		long primaryKey = county.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<County> toCacheModel() {
		CountyCacheModel countyCacheModel = new CountyCacheModel();

		countyCacheModel.countyId = getCountyId();

		countyCacheModel.countyName = getCountyName();

		String countyName = countyCacheModel.countyName;

		if ((countyName != null) && (countyName.length() == 0)) {
			countyCacheModel.countyName = null;
		}

		countyCacheModel.zipCode = getZipCode();

		String zipCode = countyCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			countyCacheModel.zipCode = null;
		}

		return countyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{countyId=");
		sb.append(getCountyId());
		sb.append(", countyName=");
		sb.append(getCountyName());
		sb.append(", zipCode=");
		sb.append(getZipCode());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("contact.manager.service.model.County");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>countyId</column-name><column-value><![CDATA[");
		sb.append(getCountyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countyName</column-name><column-value><![CDATA[");
		sb.append(getCountyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zipCode</column-name><column-value><![CDATA[");
		sb.append(getZipCode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = County.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			County.class
		};
	private long _countyId;
	private String _countyName;
	private String _zipCode;
	private County _escapedModel;
}