/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package contact.manager.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import contact.manager.model.CrmStateRep;

import contact.manager.service.CrmStateRepLocalService;
import contact.manager.service.persistence.CrmCCAPersistence;
import contact.manager.service.persistence.CrmChiWardPersistence;
import contact.manager.service.persistence.CrmContactAuditLogChangePersistence;
import contact.manager.service.persistence.CrmContactAuditLogPersistence;
import contact.manager.service.persistence.CrmContactPersistence;
import contact.manager.service.persistence.CrmCountyCommissionerPersistence;
import contact.manager.service.persistence.CrmCountyPersistence;
import contact.manager.service.persistence.CrmGroupPersistence;
import contact.manager.service.persistence.CrmLTAPersistence;
import contact.manager.service.persistence.CrmMuniPersistence;
import contact.manager.service.persistence.CrmNotePersistence;
import contact.manager.service.persistence.CrmOutreachLogPersistence;
import contact.manager.service.persistence.CrmStateRepPersistence;
import contact.manager.service.persistence.CrmStateSenatePersistence;
import contact.manager.service.persistence.CrmTagPersistence;
import contact.manager.service.persistence.CrmUsRepPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the CRM State Rep local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link contact.manager.service.impl.CrmStateRepLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see contact.manager.service.impl.CrmStateRepLocalServiceImpl
 * @see contact.manager.service.CrmStateRepLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class CrmStateRepLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CrmStateRepLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link contact.manager.service.CrmStateRepLocalServiceUtil} to access the CRM State Rep local service.
	 */

	/**
	 * Adds the CRM State Rep to the database. Also notifies the appropriate model listeners.
	 *
	 * @param crmStateRep the CRM State Rep
	 * @return the CRM State Rep that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CrmStateRep addCrmStateRep(CrmStateRep crmStateRep) {
		crmStateRep.setNew(true);

		return crmStateRepPersistence.update(crmStateRep);
	}

	/**
	 * Creates a new CRM State Rep with the primary key. Does not add the CRM State Rep to the database.
	 *
	 * @param crmStateRepId the primary key for the new CRM State Rep
	 * @return the new CRM State Rep
	 */
	@Override
	@Transactional(enabled = false)
	public CrmStateRep createCrmStateRep(long crmStateRepId) {
		return crmStateRepPersistence.create(crmStateRepId);
	}

	/**
	 * Deletes the CRM State Rep with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param crmStateRepId the primary key of the CRM State Rep
	 * @return the CRM State Rep that was removed
	 * @throws PortalException if a CRM State Rep with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CrmStateRep deleteCrmStateRep(long crmStateRepId)
		throws PortalException {
		return crmStateRepPersistence.remove(crmStateRepId);
	}

	/**
	 * Deletes the CRM State Rep from the database. Also notifies the appropriate model listeners.
	 *
	 * @param crmStateRep the CRM State Rep
	 * @return the CRM State Rep that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CrmStateRep deleteCrmStateRep(CrmStateRep crmStateRep) {
		return crmStateRepPersistence.remove(crmStateRep);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CrmStateRep.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return crmStateRepPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link contact.manager.model.impl.CrmStateRepModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return crmStateRepPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link contact.manager.model.impl.CrmStateRepModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return crmStateRepPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return crmStateRepPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return crmStateRepPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CrmStateRep fetchCrmStateRep(long crmStateRepId) {
		return crmStateRepPersistence.fetchByPrimaryKey(crmStateRepId);
	}

	/**
	 * Returns the CRM State Rep matching the UUID and group.
	 *
	 * @param uuid the CRM State Rep's UUID
	 * @param groupId the primary key of the group
	 * @return the matching CRM State Rep, or <code>null</code> if a matching CRM State Rep could not be found
	 */
	@Override
	public CrmStateRep fetchCrmStateRepByUuidAndGroupId(String uuid,
		long groupId) {
		return crmStateRepPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the CRM State Rep with the primary key.
	 *
	 * @param crmStateRepId the primary key of the CRM State Rep
	 * @return the CRM State Rep
	 * @throws PortalException if a CRM State Rep with the primary key could not be found
	 */
	@Override
	public CrmStateRep getCrmStateRep(long crmStateRepId)
		throws PortalException {
		return crmStateRepPersistence.findByPrimaryKey(crmStateRepId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(crmStateRepLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CrmStateRep.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("crmStateRepId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(crmStateRepLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(CrmStateRep.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"crmStateRepId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(crmStateRepLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CrmStateRep.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("crmStateRepId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<CrmStateRep>() {
				@Override
				public void performAction(CrmStateRep crmStateRep)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						crmStateRep);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(CrmStateRep.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return crmStateRepLocalService.deleteCrmStateRep((CrmStateRep)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return crmStateRepPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the CRM State Reps matching the UUID and company.
	 *
	 * @param uuid the UUID of the CRM State Reps
	 * @param companyId the primary key of the company
	 * @return the matching CRM State Reps, or an empty list if no matches were found
	 */
	@Override
	public List<CrmStateRep> getCrmStateRepsByUuidAndCompanyId(String uuid,
		long companyId) {
		return crmStateRepPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of CRM State Reps matching the UUID and company.
	 *
	 * @param uuid the UUID of the CRM State Reps
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of CRM State Reps
	 * @param end the upper bound of the range of CRM State Reps (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching CRM State Reps, or an empty list if no matches were found
	 */
	@Override
	public List<CrmStateRep> getCrmStateRepsByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<CrmStateRep> orderByComparator) {
		return crmStateRepPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the CRM State Rep matching the UUID and group.
	 *
	 * @param uuid the CRM State Rep's UUID
	 * @param groupId the primary key of the group
	 * @return the matching CRM State Rep
	 * @throws PortalException if a matching CRM State Rep could not be found
	 */
	@Override
	public CrmStateRep getCrmStateRepByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return crmStateRepPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the CRM State Reps.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link contact.manager.model.impl.CrmStateRepModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of CRM State Reps
	 * @param end the upper bound of the range of CRM State Reps (not inclusive)
	 * @return the range of CRM State Reps
	 */
	@Override
	public List<CrmStateRep> getCrmStateReps(int start, int end) {
		return crmStateRepPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of CRM State Reps.
	 *
	 * @return the number of CRM State Reps
	 */
	@Override
	public int getCrmStateRepsCount() {
		return crmStateRepPersistence.countAll();
	}

	/**
	 * Updates the CRM State Rep in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param crmStateRep the CRM State Rep
	 * @return the CRM State Rep that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CrmStateRep updateCrmStateRep(CrmStateRep crmStateRep) {
		return crmStateRepPersistence.update(crmStateRep);
	}

	/**
	 * Returns the CRM CCA local service.
	 *
	 * @return the CRM CCA local service
	 */
	public contact.manager.service.CrmCCALocalService getCrmCCALocalService() {
		return crmCCALocalService;
	}

	/**
	 * Sets the CRM CCA local service.
	 *
	 * @param crmCCALocalService the CRM CCA local service
	 */
	public void setCrmCCALocalService(
		contact.manager.service.CrmCCALocalService crmCCALocalService) {
		this.crmCCALocalService = crmCCALocalService;
	}

	/**
	 * Returns the CRM CCA persistence.
	 *
	 * @return the CRM CCA persistence
	 */
	public CrmCCAPersistence getCrmCCAPersistence() {
		return crmCCAPersistence;
	}

	/**
	 * Sets the CRM CCA persistence.
	 *
	 * @param crmCCAPersistence the CRM CCA persistence
	 */
	public void setCrmCCAPersistence(CrmCCAPersistence crmCCAPersistence) {
		this.crmCCAPersistence = crmCCAPersistence;
	}

	/**
	 * Returns the CRM Chi Ward local service.
	 *
	 * @return the CRM Chi Ward local service
	 */
	public contact.manager.service.CrmChiWardLocalService getCrmChiWardLocalService() {
		return crmChiWardLocalService;
	}

	/**
	 * Sets the CRM Chi Ward local service.
	 *
	 * @param crmChiWardLocalService the CRM Chi Ward local service
	 */
	public void setCrmChiWardLocalService(
		contact.manager.service.CrmChiWardLocalService crmChiWardLocalService) {
		this.crmChiWardLocalService = crmChiWardLocalService;
	}

	/**
	 * Returns the CRM Chi Ward persistence.
	 *
	 * @return the CRM Chi Ward persistence
	 */
	public CrmChiWardPersistence getCrmChiWardPersistence() {
		return crmChiWardPersistence;
	}

	/**
	 * Sets the CRM Chi Ward persistence.
	 *
	 * @param crmChiWardPersistence the CRM Chi Ward persistence
	 */
	public void setCrmChiWardPersistence(
		CrmChiWardPersistence crmChiWardPersistence) {
		this.crmChiWardPersistence = crmChiWardPersistence;
	}

	/**
	 * Returns the CRM Contact local service.
	 *
	 * @return the CRM Contact local service
	 */
	public contact.manager.service.CrmContactLocalService getCrmContactLocalService() {
		return crmContactLocalService;
	}

	/**
	 * Sets the CRM Contact local service.
	 *
	 * @param crmContactLocalService the CRM Contact local service
	 */
	public void setCrmContactLocalService(
		contact.manager.service.CrmContactLocalService crmContactLocalService) {
		this.crmContactLocalService = crmContactLocalService;
	}

	/**
	 * Returns the CRM Contact persistence.
	 *
	 * @return the CRM Contact persistence
	 */
	public CrmContactPersistence getCrmContactPersistence() {
		return crmContactPersistence;
	}

	/**
	 * Sets the CRM Contact persistence.
	 *
	 * @param crmContactPersistence the CRM Contact persistence
	 */
	public void setCrmContactPersistence(
		CrmContactPersistence crmContactPersistence) {
		this.crmContactPersistence = crmContactPersistence;
	}

	/**
	 * Returns the CRM Contact Audit Log local service.
	 *
	 * @return the CRM Contact Audit Log local service
	 */
	public contact.manager.service.CrmContactAuditLogLocalService getCrmContactAuditLogLocalService() {
		return crmContactAuditLogLocalService;
	}

	/**
	 * Sets the CRM Contact Audit Log local service.
	 *
	 * @param crmContactAuditLogLocalService the CRM Contact Audit Log local service
	 */
	public void setCrmContactAuditLogLocalService(
		contact.manager.service.CrmContactAuditLogLocalService crmContactAuditLogLocalService) {
		this.crmContactAuditLogLocalService = crmContactAuditLogLocalService;
	}

	/**
	 * Returns the CRM Contact Audit Log persistence.
	 *
	 * @return the CRM Contact Audit Log persistence
	 */
	public CrmContactAuditLogPersistence getCrmContactAuditLogPersistence() {
		return crmContactAuditLogPersistence;
	}

	/**
	 * Sets the CRM Contact Audit Log persistence.
	 *
	 * @param crmContactAuditLogPersistence the CRM Contact Audit Log persistence
	 */
	public void setCrmContactAuditLogPersistence(
		CrmContactAuditLogPersistence crmContactAuditLogPersistence) {
		this.crmContactAuditLogPersistence = crmContactAuditLogPersistence;
	}

	/**
	 * Returns the CRM Contact Audit Log Change local service.
	 *
	 * @return the CRM Contact Audit Log Change local service
	 */
	public contact.manager.service.CrmContactAuditLogChangeLocalService getCrmContactAuditLogChangeLocalService() {
		return crmContactAuditLogChangeLocalService;
	}

	/**
	 * Sets the CRM Contact Audit Log Change local service.
	 *
	 * @param crmContactAuditLogChangeLocalService the CRM Contact Audit Log Change local service
	 */
	public void setCrmContactAuditLogChangeLocalService(
		contact.manager.service.CrmContactAuditLogChangeLocalService crmContactAuditLogChangeLocalService) {
		this.crmContactAuditLogChangeLocalService = crmContactAuditLogChangeLocalService;
	}

	/**
	 * Returns the CRM Contact Audit Log Change persistence.
	 *
	 * @return the CRM Contact Audit Log Change persistence
	 */
	public CrmContactAuditLogChangePersistence getCrmContactAuditLogChangePersistence() {
		return crmContactAuditLogChangePersistence;
	}

	/**
	 * Sets the CRM Contact Audit Log Change persistence.
	 *
	 * @param crmContactAuditLogChangePersistence the CRM Contact Audit Log Change persistence
	 */
	public void setCrmContactAuditLogChangePersistence(
		CrmContactAuditLogChangePersistence crmContactAuditLogChangePersistence) {
		this.crmContactAuditLogChangePersistence = crmContactAuditLogChangePersistence;
	}

	/**
	 * Returns the CRM County local service.
	 *
	 * @return the CRM County local service
	 */
	public contact.manager.service.CrmCountyLocalService getCrmCountyLocalService() {
		return crmCountyLocalService;
	}

	/**
	 * Sets the CRM County local service.
	 *
	 * @param crmCountyLocalService the CRM County local service
	 */
	public void setCrmCountyLocalService(
		contact.manager.service.CrmCountyLocalService crmCountyLocalService) {
		this.crmCountyLocalService = crmCountyLocalService;
	}

	/**
	 * Returns the CRM County persistence.
	 *
	 * @return the CRM County persistence
	 */
	public CrmCountyPersistence getCrmCountyPersistence() {
		return crmCountyPersistence;
	}

	/**
	 * Sets the CRM County persistence.
	 *
	 * @param crmCountyPersistence the CRM County persistence
	 */
	public void setCrmCountyPersistence(
		CrmCountyPersistence crmCountyPersistence) {
		this.crmCountyPersistence = crmCountyPersistence;
	}

	/**
	 * Returns the CRM County Commissioner local service.
	 *
	 * @return the CRM County Commissioner local service
	 */
	public contact.manager.service.CrmCountyCommissionerLocalService getCrmCountyCommissionerLocalService() {
		return crmCountyCommissionerLocalService;
	}

	/**
	 * Sets the CRM County Commissioner local service.
	 *
	 * @param crmCountyCommissionerLocalService the CRM County Commissioner local service
	 */
	public void setCrmCountyCommissionerLocalService(
		contact.manager.service.CrmCountyCommissionerLocalService crmCountyCommissionerLocalService) {
		this.crmCountyCommissionerLocalService = crmCountyCommissionerLocalService;
	}

	/**
	 * Returns the CRM County Commissioner persistence.
	 *
	 * @return the CRM County Commissioner persistence
	 */
	public CrmCountyCommissionerPersistence getCrmCountyCommissionerPersistence() {
		return crmCountyCommissionerPersistence;
	}

	/**
	 * Sets the CRM County Commissioner persistence.
	 *
	 * @param crmCountyCommissionerPersistence the CRM County Commissioner persistence
	 */
	public void setCrmCountyCommissionerPersistence(
		CrmCountyCommissionerPersistence crmCountyCommissionerPersistence) {
		this.crmCountyCommissionerPersistence = crmCountyCommissionerPersistence;
	}

	/**
	 * Returns the CRM Group local service.
	 *
	 * @return the CRM Group local service
	 */
	public contact.manager.service.CrmGroupLocalService getCrmGroupLocalService() {
		return crmGroupLocalService;
	}

	/**
	 * Sets the CRM Group local service.
	 *
	 * @param crmGroupLocalService the CRM Group local service
	 */
	public void setCrmGroupLocalService(
		contact.manager.service.CrmGroupLocalService crmGroupLocalService) {
		this.crmGroupLocalService = crmGroupLocalService;
	}

	/**
	 * Returns the CRM Group persistence.
	 *
	 * @return the CRM Group persistence
	 */
	public CrmGroupPersistence getCrmGroupPersistence() {
		return crmGroupPersistence;
	}

	/**
	 * Sets the CRM Group persistence.
	 *
	 * @param crmGroupPersistence the CRM Group persistence
	 */
	public void setCrmGroupPersistence(CrmGroupPersistence crmGroupPersistence) {
		this.crmGroupPersistence = crmGroupPersistence;
	}

	/**
	 * Returns the CRM LTA local service.
	 *
	 * @return the CRM LTA local service
	 */
	public contact.manager.service.CrmLTALocalService getCrmLTALocalService() {
		return crmLTALocalService;
	}

	/**
	 * Sets the CRM LTA local service.
	 *
	 * @param crmLTALocalService the CRM LTA local service
	 */
	public void setCrmLTALocalService(
		contact.manager.service.CrmLTALocalService crmLTALocalService) {
		this.crmLTALocalService = crmLTALocalService;
	}

	/**
	 * Returns the CRM LTA persistence.
	 *
	 * @return the CRM LTA persistence
	 */
	public CrmLTAPersistence getCrmLTAPersistence() {
		return crmLTAPersistence;
	}

	/**
	 * Sets the CRM LTA persistence.
	 *
	 * @param crmLTAPersistence the CRM LTA persistence
	 */
	public void setCrmLTAPersistence(CrmLTAPersistence crmLTAPersistence) {
		this.crmLTAPersistence = crmLTAPersistence;
	}

	/**
	 * Returns the CRM Muni local service.
	 *
	 * @return the CRM Muni local service
	 */
	public contact.manager.service.CrmMuniLocalService getCrmMuniLocalService() {
		return crmMuniLocalService;
	}

	/**
	 * Sets the CRM Muni local service.
	 *
	 * @param crmMuniLocalService the CRM Muni local service
	 */
	public void setCrmMuniLocalService(
		contact.manager.service.CrmMuniLocalService crmMuniLocalService) {
		this.crmMuniLocalService = crmMuniLocalService;
	}

	/**
	 * Returns the CRM Muni persistence.
	 *
	 * @return the CRM Muni persistence
	 */
	public CrmMuniPersistence getCrmMuniPersistence() {
		return crmMuniPersistence;
	}

	/**
	 * Sets the CRM Muni persistence.
	 *
	 * @param crmMuniPersistence the CRM Muni persistence
	 */
	public void setCrmMuniPersistence(CrmMuniPersistence crmMuniPersistence) {
		this.crmMuniPersistence = crmMuniPersistence;
	}

	/**
	 * Returns the CRM Note local service.
	 *
	 * @return the CRM Note local service
	 */
	public contact.manager.service.CrmNoteLocalService getCrmNoteLocalService() {
		return crmNoteLocalService;
	}

	/**
	 * Sets the CRM Note local service.
	 *
	 * @param crmNoteLocalService the CRM Note local service
	 */
	public void setCrmNoteLocalService(
		contact.manager.service.CrmNoteLocalService crmNoteLocalService) {
		this.crmNoteLocalService = crmNoteLocalService;
	}

	/**
	 * Returns the CRM Note persistence.
	 *
	 * @return the CRM Note persistence
	 */
	public CrmNotePersistence getCrmNotePersistence() {
		return crmNotePersistence;
	}

	/**
	 * Sets the CRM Note persistence.
	 *
	 * @param crmNotePersistence the CRM Note persistence
	 */
	public void setCrmNotePersistence(CrmNotePersistence crmNotePersistence) {
		this.crmNotePersistence = crmNotePersistence;
	}

	/**
	 * Returns the CRM Outreach Log local service.
	 *
	 * @return the CRM Outreach Log local service
	 */
	public contact.manager.service.CrmOutreachLogLocalService getCrmOutreachLogLocalService() {
		return crmOutreachLogLocalService;
	}

	/**
	 * Sets the CRM Outreach Log local service.
	 *
	 * @param crmOutreachLogLocalService the CRM Outreach Log local service
	 */
	public void setCrmOutreachLogLocalService(
		contact.manager.service.CrmOutreachLogLocalService crmOutreachLogLocalService) {
		this.crmOutreachLogLocalService = crmOutreachLogLocalService;
	}

	/**
	 * Returns the CRM Outreach Log persistence.
	 *
	 * @return the CRM Outreach Log persistence
	 */
	public CrmOutreachLogPersistence getCrmOutreachLogPersistence() {
		return crmOutreachLogPersistence;
	}

	/**
	 * Sets the CRM Outreach Log persistence.
	 *
	 * @param crmOutreachLogPersistence the CRM Outreach Log persistence
	 */
	public void setCrmOutreachLogPersistence(
		CrmOutreachLogPersistence crmOutreachLogPersistence) {
		this.crmOutreachLogPersistence = crmOutreachLogPersistence;
	}

	/**
	 * Returns the CRM State Rep local service.
	 *
	 * @return the CRM State Rep local service
	 */
	public CrmStateRepLocalService getCrmStateRepLocalService() {
		return crmStateRepLocalService;
	}

	/**
	 * Sets the CRM State Rep local service.
	 *
	 * @param crmStateRepLocalService the CRM State Rep local service
	 */
	public void setCrmStateRepLocalService(
		CrmStateRepLocalService crmStateRepLocalService) {
		this.crmStateRepLocalService = crmStateRepLocalService;
	}

	/**
	 * Returns the CRM State Rep persistence.
	 *
	 * @return the CRM State Rep persistence
	 */
	public CrmStateRepPersistence getCrmStateRepPersistence() {
		return crmStateRepPersistence;
	}

	/**
	 * Sets the CRM State Rep persistence.
	 *
	 * @param crmStateRepPersistence the CRM State Rep persistence
	 */
	public void setCrmStateRepPersistence(
		CrmStateRepPersistence crmStateRepPersistence) {
		this.crmStateRepPersistence = crmStateRepPersistence;
	}

	/**
	 * Returns the CRM State Senate local service.
	 *
	 * @return the CRM State Senate local service
	 */
	public contact.manager.service.CrmStateSenateLocalService getCrmStateSenateLocalService() {
		return crmStateSenateLocalService;
	}

	/**
	 * Sets the CRM State Senate local service.
	 *
	 * @param crmStateSenateLocalService the CRM State Senate local service
	 */
	public void setCrmStateSenateLocalService(
		contact.manager.service.CrmStateSenateLocalService crmStateSenateLocalService) {
		this.crmStateSenateLocalService = crmStateSenateLocalService;
	}

	/**
	 * Returns the CRM State Senate persistence.
	 *
	 * @return the CRM State Senate persistence
	 */
	public CrmStateSenatePersistence getCrmStateSenatePersistence() {
		return crmStateSenatePersistence;
	}

	/**
	 * Sets the CRM State Senate persistence.
	 *
	 * @param crmStateSenatePersistence the CRM State Senate persistence
	 */
	public void setCrmStateSenatePersistence(
		CrmStateSenatePersistence crmStateSenatePersistence) {
		this.crmStateSenatePersistence = crmStateSenatePersistence;
	}

	/**
	 * Returns the CRM Tag local service.
	 *
	 * @return the CRM Tag local service
	 */
	public contact.manager.service.CrmTagLocalService getCrmTagLocalService() {
		return crmTagLocalService;
	}

	/**
	 * Sets the CRM Tag local service.
	 *
	 * @param crmTagLocalService the CRM Tag local service
	 */
	public void setCrmTagLocalService(
		contact.manager.service.CrmTagLocalService crmTagLocalService) {
		this.crmTagLocalService = crmTagLocalService;
	}

	/**
	 * Returns the CRM Tag persistence.
	 *
	 * @return the CRM Tag persistence
	 */
	public CrmTagPersistence getCrmTagPersistence() {
		return crmTagPersistence;
	}

	/**
	 * Sets the CRM Tag persistence.
	 *
	 * @param crmTagPersistence the CRM Tag persistence
	 */
	public void setCrmTagPersistence(CrmTagPersistence crmTagPersistence) {
		this.crmTagPersistence = crmTagPersistence;
	}

	/**
	 * Returns the CRM US Rep local service.
	 *
	 * @return the CRM US Rep local service
	 */
	public contact.manager.service.CrmUsRepLocalService getCrmUsRepLocalService() {
		return crmUsRepLocalService;
	}

	/**
	 * Sets the CRM US Rep local service.
	 *
	 * @param crmUsRepLocalService the CRM US Rep local service
	 */
	public void setCrmUsRepLocalService(
		contact.manager.service.CrmUsRepLocalService crmUsRepLocalService) {
		this.crmUsRepLocalService = crmUsRepLocalService;
	}

	/**
	 * Returns the CRM US Rep persistence.
	 *
	 * @return the CRM US Rep persistence
	 */
	public CrmUsRepPersistence getCrmUsRepPersistence() {
		return crmUsRepPersistence;
	}

	/**
	 * Sets the CRM US Rep persistence.
	 *
	 * @param crmUsRepPersistence the CRM US Rep persistence
	 */
	public void setCrmUsRepPersistence(CrmUsRepPersistence crmUsRepPersistence) {
		this.crmUsRepPersistence = crmUsRepPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("contact.manager.model.CrmStateRep",
			crmStateRepLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"contact.manager.model.CrmStateRep");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CrmStateRepLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return CrmStateRep.class;
	}

	protected String getModelClassName() {
		return CrmStateRep.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = crmStateRepPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = contact.manager.service.CrmCCALocalService.class)
	protected contact.manager.service.CrmCCALocalService crmCCALocalService;
	@BeanReference(type = CrmCCAPersistence.class)
	protected CrmCCAPersistence crmCCAPersistence;
	@BeanReference(type = contact.manager.service.CrmChiWardLocalService.class)
	protected contact.manager.service.CrmChiWardLocalService crmChiWardLocalService;
	@BeanReference(type = CrmChiWardPersistence.class)
	protected CrmChiWardPersistence crmChiWardPersistence;
	@BeanReference(type = contact.manager.service.CrmContactLocalService.class)
	protected contact.manager.service.CrmContactLocalService crmContactLocalService;
	@BeanReference(type = CrmContactPersistence.class)
	protected CrmContactPersistence crmContactPersistence;
	@BeanReference(type = contact.manager.service.CrmContactAuditLogLocalService.class)
	protected contact.manager.service.CrmContactAuditLogLocalService crmContactAuditLogLocalService;
	@BeanReference(type = CrmContactAuditLogPersistence.class)
	protected CrmContactAuditLogPersistence crmContactAuditLogPersistence;
	@BeanReference(type = contact.manager.service.CrmContactAuditLogChangeLocalService.class)
	protected contact.manager.service.CrmContactAuditLogChangeLocalService crmContactAuditLogChangeLocalService;
	@BeanReference(type = CrmContactAuditLogChangePersistence.class)
	protected CrmContactAuditLogChangePersistence crmContactAuditLogChangePersistence;
	@BeanReference(type = contact.manager.service.CrmCountyLocalService.class)
	protected contact.manager.service.CrmCountyLocalService crmCountyLocalService;
	@BeanReference(type = CrmCountyPersistence.class)
	protected CrmCountyPersistence crmCountyPersistence;
	@BeanReference(type = contact.manager.service.CrmCountyCommissionerLocalService.class)
	protected contact.manager.service.CrmCountyCommissionerLocalService crmCountyCommissionerLocalService;
	@BeanReference(type = CrmCountyCommissionerPersistence.class)
	protected CrmCountyCommissionerPersistence crmCountyCommissionerPersistence;
	@BeanReference(type = contact.manager.service.CrmGroupLocalService.class)
	protected contact.manager.service.CrmGroupLocalService crmGroupLocalService;
	@BeanReference(type = CrmGroupPersistence.class)
	protected CrmGroupPersistence crmGroupPersistence;
	@BeanReference(type = contact.manager.service.CrmLTALocalService.class)
	protected contact.manager.service.CrmLTALocalService crmLTALocalService;
	@BeanReference(type = CrmLTAPersistence.class)
	protected CrmLTAPersistence crmLTAPersistence;
	@BeanReference(type = contact.manager.service.CrmMuniLocalService.class)
	protected contact.manager.service.CrmMuniLocalService crmMuniLocalService;
	@BeanReference(type = CrmMuniPersistence.class)
	protected CrmMuniPersistence crmMuniPersistence;
	@BeanReference(type = contact.manager.service.CrmNoteLocalService.class)
	protected contact.manager.service.CrmNoteLocalService crmNoteLocalService;
	@BeanReference(type = CrmNotePersistence.class)
	protected CrmNotePersistence crmNotePersistence;
	@BeanReference(type = contact.manager.service.CrmOutreachLogLocalService.class)
	protected contact.manager.service.CrmOutreachLogLocalService crmOutreachLogLocalService;
	@BeanReference(type = CrmOutreachLogPersistence.class)
	protected CrmOutreachLogPersistence crmOutreachLogPersistence;
	@BeanReference(type = CrmStateRepLocalService.class)
	protected CrmStateRepLocalService crmStateRepLocalService;
	@BeanReference(type = CrmStateRepPersistence.class)
	protected CrmStateRepPersistence crmStateRepPersistence;
	@BeanReference(type = contact.manager.service.CrmStateSenateLocalService.class)
	protected contact.manager.service.CrmStateSenateLocalService crmStateSenateLocalService;
	@BeanReference(type = CrmStateSenatePersistence.class)
	protected CrmStateSenatePersistence crmStateSenatePersistence;
	@BeanReference(type = contact.manager.service.CrmTagLocalService.class)
	protected contact.manager.service.CrmTagLocalService crmTagLocalService;
	@BeanReference(type = CrmTagPersistence.class)
	protected CrmTagPersistence crmTagPersistence;
	@BeanReference(type = contact.manager.service.CrmUsRepLocalService.class)
	protected contact.manager.service.CrmUsRepLocalService crmUsRepLocalService;
	@BeanReference(type = CrmUsRepPersistence.class)
	protected CrmUsRepPersistence crmUsRepPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}