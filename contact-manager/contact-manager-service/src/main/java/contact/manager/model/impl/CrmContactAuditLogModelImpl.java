/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package contact.manager.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import contact.manager.model.CrmContactAuditLog;
import contact.manager.model.CrmContactAuditLogModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CrmContactAuditLog service. Represents a row in the &quot;crm_contactauditlog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CrmContactAuditLogModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CrmContactAuditLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CrmContactAuditLogImpl
 * @generated
 */
@ProviderType
public class CrmContactAuditLogModelImpl
	extends BaseModelImpl<CrmContactAuditLog>
	implements CrmContactAuditLogModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a CRM Contact Audit Log model instance should use the <code>CrmContactAuditLog</code> interface instead.
	 */
	public static final String TABLE_NAME = "crm_contactauditlog";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"crmContactAuditLogId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"crmContactId", Types.BIGINT}, {"constantContactId", Types.BIGINT},
		{"action", Types.VARCHAR}, {"oldSnapshot", Types.VARCHAR},
		{"newSnapshot", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("crmContactAuditLogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("crmContactId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("constantContactId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("action", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oldSnapshot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("newSnapshot", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table crm_contactauditlog (uuid_ VARCHAR(75) null,crmContactAuditLogId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,crmContactId LONG,constantContactId LONG,action VARCHAR(75) null,oldSnapshot TEXT null,newSnapshot TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table crm_contactauditlog";

	public static final String ORDER_BY_JPQL =
		" ORDER BY crmContactAuditLog.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY crm_contactauditlog.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		contact.manager.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.contact.manager.model.CrmContactAuditLog"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		contact.manager.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.contact.manager.model.CrmContactAuditLog"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		contact.manager.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.contact.manager.model.CrmContactAuditLog"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long CONSTANTCONTACTID_COLUMN_BITMASK = 2L;

	public static final long CRMCONTACTID_COLUMN_BITMASK = 4L;

	public static final long GROUPID_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long CREATEDATE_COLUMN_BITMASK = 32L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		contact.manager.service.util.ServiceProps.get(
			"lock.expiration.time.contact.manager.model.CrmContactAuditLog"));

	public CrmContactAuditLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _crmContactAuditLogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCrmContactAuditLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _crmContactAuditLogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CrmContactAuditLog.class;
	}

	@Override
	public String getModelClassName() {
		return CrmContactAuditLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CrmContactAuditLog, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CrmContactAuditLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CrmContactAuditLog, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CrmContactAuditLog)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CrmContactAuditLog, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CrmContactAuditLog, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CrmContactAuditLog)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CrmContactAuditLog, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CrmContactAuditLog, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CrmContactAuditLog>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CrmContactAuditLog.class.getClassLoader(), CrmContactAuditLog.class,
			ModelWrapper.class);

		try {
			Constructor<CrmContactAuditLog> constructor =
				(Constructor<CrmContactAuditLog>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<CrmContactAuditLog, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CrmContactAuditLog, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CrmContactAuditLog, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CrmContactAuditLog, Object>>();
		Map<String, BiConsumer<CrmContactAuditLog, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<CrmContactAuditLog, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog, Object uuid) {

					crmContactAuditLog.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"crmContactAuditLogId",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getCrmContactAuditLogId();
				}

			});
		attributeSetterBiConsumers.put(
			"crmContactAuditLogId",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog,
					Object crmContactAuditLogId) {

					crmContactAuditLog.setCrmContactAuditLogId(
						(Long)crmContactAuditLogId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog, Object groupId) {

					crmContactAuditLog.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog, Object companyId) {

					crmContactAuditLog.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog, Object userId) {

					crmContactAuditLog.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog, Object userName) {

					crmContactAuditLog.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog, Object createDate) {

					crmContactAuditLog.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog,
					Object modifiedDate) {

					crmContactAuditLog.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"crmContactId",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getCrmContactId();
				}

			});
		attributeSetterBiConsumers.put(
			"crmContactId",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog,
					Object crmContactId) {

					crmContactAuditLog.setCrmContactId((Long)crmContactId);
				}

			});
		attributeGetterFunctions.put(
			"constantContactId",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getConstantContactId();
				}

			});
		attributeSetterBiConsumers.put(
			"constantContactId",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog,
					Object constantContactId) {

					crmContactAuditLog.setConstantContactId(
						(Long)constantContactId);
				}

			});
		attributeGetterFunctions.put(
			"action",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getAction();
				}

			});
		attributeSetterBiConsumers.put(
			"action",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog, Object action) {

					crmContactAuditLog.setAction((String)action);
				}

			});
		attributeGetterFunctions.put(
			"oldSnapshot",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getOldSnapshot();
				}

			});
		attributeSetterBiConsumers.put(
			"oldSnapshot",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog, Object oldSnapshot) {

					crmContactAuditLog.setOldSnapshot((String)oldSnapshot);
				}

			});
		attributeGetterFunctions.put(
			"newSnapshot",
			new Function<CrmContactAuditLog, Object>() {

				@Override
				public Object apply(CrmContactAuditLog crmContactAuditLog) {
					return crmContactAuditLog.getNewSnapshot();
				}

			});
		attributeSetterBiConsumers.put(
			"newSnapshot",
			new BiConsumer<CrmContactAuditLog, Object>() {

				@Override
				public void accept(
					CrmContactAuditLog crmContactAuditLog, Object newSnapshot) {

					crmContactAuditLog.setNewSnapshot((String)newSnapshot);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getCrmContactAuditLogId() {
		return _crmContactAuditLogId;
	}

	@Override
	public void setCrmContactAuditLogId(long crmContactAuditLogId) {
		_crmContactAuditLogId = crmContactAuditLogId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCrmContactId() {
		return _crmContactId;
	}

	@Override
	public void setCrmContactId(long crmContactId) {
		_columnBitmask |= CRMCONTACTID_COLUMN_BITMASK;

		if (!_setOriginalCrmContactId) {
			_setOriginalCrmContactId = true;

			_originalCrmContactId = _crmContactId;
		}

		_crmContactId = crmContactId;
	}

	public long getOriginalCrmContactId() {
		return _originalCrmContactId;
	}

	@Override
	public long getConstantContactId() {
		return _constantContactId;
	}

	@Override
	public void setConstantContactId(long constantContactId) {
		_columnBitmask |= CONSTANTCONTACTID_COLUMN_BITMASK;

		if (!_setOriginalConstantContactId) {
			_setOriginalConstantContactId = true;

			_originalConstantContactId = _constantContactId;
		}

		_constantContactId = constantContactId;
	}

	public long getOriginalConstantContactId() {
		return _originalConstantContactId;
	}

	@Override
	public String getAction() {
		if (_action == null) {
			return "";
		}
		else {
			return _action;
		}
	}

	@Override
	public void setAction(String action) {
		_action = action;
	}

	@Override
	public String getOldSnapshot() {
		if (_oldSnapshot == null) {
			return "";
		}
		else {
			return _oldSnapshot;
		}
	}

	@Override
	public void setOldSnapshot(String oldSnapshot) {
		_oldSnapshot = oldSnapshot;
	}

	@Override
	public String getNewSnapshot() {
		if (_newSnapshot == null) {
			return "";
		}
		else {
			return _newSnapshot;
		}
	}

	@Override
	public void setNewSnapshot(String newSnapshot) {
		_newSnapshot = newSnapshot;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CrmContactAuditLog.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CrmContactAuditLog.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CrmContactAuditLog toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CrmContactAuditLog>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CrmContactAuditLogImpl crmContactAuditLogImpl =
			new CrmContactAuditLogImpl();

		crmContactAuditLogImpl.setUuid(getUuid());
		crmContactAuditLogImpl.setCrmContactAuditLogId(
			getCrmContactAuditLogId());
		crmContactAuditLogImpl.setGroupId(getGroupId());
		crmContactAuditLogImpl.setCompanyId(getCompanyId());
		crmContactAuditLogImpl.setUserId(getUserId());
		crmContactAuditLogImpl.setUserName(getUserName());
		crmContactAuditLogImpl.setCreateDate(getCreateDate());
		crmContactAuditLogImpl.setModifiedDate(getModifiedDate());
		crmContactAuditLogImpl.setCrmContactId(getCrmContactId());
		crmContactAuditLogImpl.setConstantContactId(getConstantContactId());
		crmContactAuditLogImpl.setAction(getAction());
		crmContactAuditLogImpl.setOldSnapshot(getOldSnapshot());
		crmContactAuditLogImpl.setNewSnapshot(getNewSnapshot());

		crmContactAuditLogImpl.resetOriginalValues();

		return crmContactAuditLogImpl;
	}

	@Override
	public int compareTo(CrmContactAuditLog crmContactAuditLog) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), crmContactAuditLog.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CrmContactAuditLog)) {
			return false;
		}

		CrmContactAuditLog crmContactAuditLog = (CrmContactAuditLog)obj;

		long primaryKey = crmContactAuditLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CrmContactAuditLogModelImpl crmContactAuditLogModelImpl = this;

		crmContactAuditLogModelImpl._originalUuid =
			crmContactAuditLogModelImpl._uuid;

		crmContactAuditLogModelImpl._originalGroupId =
			crmContactAuditLogModelImpl._groupId;

		crmContactAuditLogModelImpl._setOriginalGroupId = false;

		crmContactAuditLogModelImpl._originalCompanyId =
			crmContactAuditLogModelImpl._companyId;

		crmContactAuditLogModelImpl._setOriginalCompanyId = false;

		crmContactAuditLogModelImpl._setModifiedDate = false;

		crmContactAuditLogModelImpl._originalCrmContactId =
			crmContactAuditLogModelImpl._crmContactId;

		crmContactAuditLogModelImpl._setOriginalCrmContactId = false;

		crmContactAuditLogModelImpl._originalConstantContactId =
			crmContactAuditLogModelImpl._constantContactId;

		crmContactAuditLogModelImpl._setOriginalConstantContactId = false;

		crmContactAuditLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CrmContactAuditLog> toCacheModel() {
		CrmContactAuditLogCacheModel crmContactAuditLogCacheModel =
			new CrmContactAuditLogCacheModel();

		crmContactAuditLogCacheModel.uuid = getUuid();

		String uuid = crmContactAuditLogCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			crmContactAuditLogCacheModel.uuid = null;
		}

		crmContactAuditLogCacheModel.crmContactAuditLogId =
			getCrmContactAuditLogId();

		crmContactAuditLogCacheModel.groupId = getGroupId();

		crmContactAuditLogCacheModel.companyId = getCompanyId();

		crmContactAuditLogCacheModel.userId = getUserId();

		crmContactAuditLogCacheModel.userName = getUserName();

		String userName = crmContactAuditLogCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			crmContactAuditLogCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			crmContactAuditLogCacheModel.createDate = createDate.getTime();
		}
		else {
			crmContactAuditLogCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			crmContactAuditLogCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			crmContactAuditLogCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		crmContactAuditLogCacheModel.crmContactId = getCrmContactId();

		crmContactAuditLogCacheModel.constantContactId = getConstantContactId();

		crmContactAuditLogCacheModel.action = getAction();

		String action = crmContactAuditLogCacheModel.action;

		if ((action != null) && (action.length() == 0)) {
			crmContactAuditLogCacheModel.action = null;
		}

		crmContactAuditLogCacheModel.oldSnapshot = getOldSnapshot();

		String oldSnapshot = crmContactAuditLogCacheModel.oldSnapshot;

		if ((oldSnapshot != null) && (oldSnapshot.length() == 0)) {
			crmContactAuditLogCacheModel.oldSnapshot = null;
		}

		crmContactAuditLogCacheModel.newSnapshot = getNewSnapshot();

		String newSnapshot = crmContactAuditLogCacheModel.newSnapshot;

		if ((newSnapshot != null) && (newSnapshot.length() == 0)) {
			crmContactAuditLogCacheModel.newSnapshot = null;
		}

		return crmContactAuditLogCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CrmContactAuditLog, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CrmContactAuditLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CrmContactAuditLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CrmContactAuditLog)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CrmContactAuditLog, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CrmContactAuditLog, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CrmContactAuditLog, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CrmContactAuditLog)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CrmContactAuditLog>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _crmContactAuditLogId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _crmContactId;
	private long _originalCrmContactId;
	private boolean _setOriginalCrmContactId;
	private long _constantContactId;
	private long _originalConstantContactId;
	private boolean _setOriginalConstantContactId;
	private String _action;
	private String _oldSnapshot;
	private String _newSnapshot;
	private long _columnBitmask;
	private CrmContactAuditLog _escapedModel;

}