/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package contact.manager.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import contact.manager.model.CrmUsRep;
import contact.manager.model.CrmUsRepModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CrmUsRep service. Represents a row in the &quot;crm_usrep&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CrmUsRepModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CrmUsRepImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CrmUsRepImpl
 * @generated
 */
@ProviderType
public class CrmUsRepModelImpl
	extends BaseModelImpl<CrmUsRep> implements CrmUsRepModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a CRM US Rep model instance should use the <code>CrmUsRep</code> interface instead.
	 */
	public static final String TABLE_NAME = "crm_usrep";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"crmUsRepId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"number_", Types.VARCHAR},
		{"zipCode", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("crmUsRepId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("number_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipCode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table crm_usrep (uuid_ VARCHAR(75) null,crmUsRepId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(500) null,number_ VARCHAR(75) null,zipCode VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table crm_usrep";

	public static final String ORDER_BY_JPQL =
		" ORDER BY crmUsRep.number ASC, crmUsRep.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY crm_usrep.number_ ASC, crm_usrep.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		contact.manager.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.contact.manager.model.CrmUsRep"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		contact.manager.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.contact.manager.model.CrmUsRep"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		contact.manager.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.contact.manager.model.CrmUsRep"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long ZIPCODE_COLUMN_BITMASK = 8L;

	public static final long NUMBER_COLUMN_BITMASK = 16L;

	public static final long NAME_COLUMN_BITMASK = 32L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		contact.manager.service.util.ServiceProps.get(
			"lock.expiration.time.contact.manager.model.CrmUsRep"));

	public CrmUsRepModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _crmUsRepId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCrmUsRepId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _crmUsRepId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CrmUsRep.class;
	}

	@Override
	public String getModelClassName() {
		return CrmUsRep.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CrmUsRep, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CrmUsRep, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CrmUsRep, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((CrmUsRep)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CrmUsRep, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CrmUsRep, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CrmUsRep)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CrmUsRep, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CrmUsRep, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CrmUsRep>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CrmUsRep.class.getClassLoader(), CrmUsRep.class,
			ModelWrapper.class);

		try {
			Constructor<CrmUsRep> constructor =
				(Constructor<CrmUsRep>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<CrmUsRep, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CrmUsRep, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CrmUsRep, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CrmUsRep, Object>>();
		Map<String, BiConsumer<CrmUsRep, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CrmUsRep, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<CrmUsRep, Object>() {

				@Override
				public Object apply(CrmUsRep crmUsRep) {
					return crmUsRep.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<CrmUsRep, Object>() {

				@Override
				public void accept(CrmUsRep crmUsRep, Object uuid) {
					crmUsRep.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"crmUsRepId",
			new Function<CrmUsRep, Object>() {

				@Override
				public Object apply(CrmUsRep crmUsRep) {
					return crmUsRep.getCrmUsRepId();
				}

			});
		attributeSetterBiConsumers.put(
			"crmUsRepId",
			new BiConsumer<CrmUsRep, Object>() {

				@Override
				public void accept(CrmUsRep crmUsRep, Object crmUsRepId) {
					crmUsRep.setCrmUsRepId((Long)crmUsRepId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<CrmUsRep, Object>() {

				@Override
				public Object apply(CrmUsRep crmUsRep) {
					return crmUsRep.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<CrmUsRep, Object>() {

				@Override
				public void accept(CrmUsRep crmUsRep, Object groupId) {
					crmUsRep.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<CrmUsRep, Object>() {

				@Override
				public Object apply(CrmUsRep crmUsRep) {
					return crmUsRep.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<CrmUsRep, Object>() {

				@Override
				public void accept(CrmUsRep crmUsRep, Object companyId) {
					crmUsRep.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<CrmUsRep, Object>() {

				@Override
				public Object apply(CrmUsRep crmUsRep) {
					return crmUsRep.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<CrmUsRep, Object>() {

				@Override
				public void accept(CrmUsRep crmUsRep, Object userId) {
					crmUsRep.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<CrmUsRep, Object>() {

				@Override
				public Object apply(CrmUsRep crmUsRep) {
					return crmUsRep.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<CrmUsRep, Object>() {

				@Override
				public void accept(CrmUsRep crmUsRep, Object userName) {
					crmUsRep.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<CrmUsRep, Object>() {

				@Override
				public Object apply(CrmUsRep crmUsRep) {
					return crmUsRep.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<CrmUsRep, Object>() {

				@Override
				public void accept(CrmUsRep crmUsRep, Object createDate) {
					crmUsRep.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<CrmUsRep, Object>() {

				@Override
				public Object apply(CrmUsRep crmUsRep) {
					return crmUsRep.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<CrmUsRep, Object>() {

				@Override
				public void accept(CrmUsRep crmUsRep, Object modifiedDate) {
					crmUsRep.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<CrmUsRep, Object>() {

				@Override
				public Object apply(CrmUsRep crmUsRep) {
					return crmUsRep.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<CrmUsRep, Object>() {

				@Override
				public void accept(CrmUsRep crmUsRep, Object name) {
					crmUsRep.setName((String)name);
				}

			});
		attributeGetterFunctions.put(
			"number",
			new Function<CrmUsRep, Object>() {

				@Override
				public Object apply(CrmUsRep crmUsRep) {
					return crmUsRep.getNumber();
				}

			});
		attributeSetterBiConsumers.put(
			"number",
			new BiConsumer<CrmUsRep, Object>() {

				@Override
				public void accept(CrmUsRep crmUsRep, Object number) {
					crmUsRep.setNumber((String)number);
				}

			});
		attributeGetterFunctions.put(
			"zipCode",
			new Function<CrmUsRep, Object>() {

				@Override
				public Object apply(CrmUsRep crmUsRep) {
					return crmUsRep.getZipCode();
				}

			});
		attributeSetterBiConsumers.put(
			"zipCode",
			new BiConsumer<CrmUsRep, Object>() {

				@Override
				public void accept(CrmUsRep crmUsRep, Object zipCode) {
					crmUsRep.setZipCode((String)zipCode);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getCrmUsRepId() {
		return _crmUsRepId;
	}

	@Override
	public void setCrmUsRepId(long crmUsRepId) {
		_crmUsRepId = crmUsRepId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@Override
	public String getNumber() {
		if (_number == null) {
			return "";
		}
		else {
			return _number;
		}
	}

	@Override
	public void setNumber(String number) {
		_columnBitmask = -1L;

		_number = number;
	}

	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return "";
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		_columnBitmask |= ZIPCODE_COLUMN_BITMASK;

		if (_originalZipCode == null) {
			_originalZipCode = _zipCode;
		}

		_zipCode = zipCode;
	}

	public String getOriginalZipCode() {
		return GetterUtil.getString(_originalZipCode);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CrmUsRep.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CrmUsRep.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CrmUsRep toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CrmUsRep>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CrmUsRepImpl crmUsRepImpl = new CrmUsRepImpl();

		crmUsRepImpl.setUuid(getUuid());
		crmUsRepImpl.setCrmUsRepId(getCrmUsRepId());
		crmUsRepImpl.setGroupId(getGroupId());
		crmUsRepImpl.setCompanyId(getCompanyId());
		crmUsRepImpl.setUserId(getUserId());
		crmUsRepImpl.setUserName(getUserName());
		crmUsRepImpl.setCreateDate(getCreateDate());
		crmUsRepImpl.setModifiedDate(getModifiedDate());
		crmUsRepImpl.setName(getName());
		crmUsRepImpl.setNumber(getNumber());
		crmUsRepImpl.setZipCode(getZipCode());

		crmUsRepImpl.resetOriginalValues();

		return crmUsRepImpl;
	}

	@Override
	public int compareTo(CrmUsRep crmUsRep) {
		int value = 0;

		value = getNumber().compareTo(crmUsRep.getNumber());

		if (value != 0) {
			return value;
		}

		value = getName().compareTo(crmUsRep.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CrmUsRep)) {
			return false;
		}

		CrmUsRep crmUsRep = (CrmUsRep)obj;

		long primaryKey = crmUsRep.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CrmUsRepModelImpl crmUsRepModelImpl = this;

		crmUsRepModelImpl._originalUuid = crmUsRepModelImpl._uuid;

		crmUsRepModelImpl._originalGroupId = crmUsRepModelImpl._groupId;

		crmUsRepModelImpl._setOriginalGroupId = false;

		crmUsRepModelImpl._originalCompanyId = crmUsRepModelImpl._companyId;

		crmUsRepModelImpl._setOriginalCompanyId = false;

		crmUsRepModelImpl._setModifiedDate = false;

		crmUsRepModelImpl._originalZipCode = crmUsRepModelImpl._zipCode;

		crmUsRepModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CrmUsRep> toCacheModel() {
		CrmUsRepCacheModel crmUsRepCacheModel = new CrmUsRepCacheModel();

		crmUsRepCacheModel.uuid = getUuid();

		String uuid = crmUsRepCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			crmUsRepCacheModel.uuid = null;
		}

		crmUsRepCacheModel.crmUsRepId = getCrmUsRepId();

		crmUsRepCacheModel.groupId = getGroupId();

		crmUsRepCacheModel.companyId = getCompanyId();

		crmUsRepCacheModel.userId = getUserId();

		crmUsRepCacheModel.userName = getUserName();

		String userName = crmUsRepCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			crmUsRepCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			crmUsRepCacheModel.createDate = createDate.getTime();
		}
		else {
			crmUsRepCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			crmUsRepCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			crmUsRepCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		crmUsRepCacheModel.name = getName();

		String name = crmUsRepCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			crmUsRepCacheModel.name = null;
		}

		crmUsRepCacheModel.number = getNumber();

		String number = crmUsRepCacheModel.number;

		if ((number != null) && (number.length() == 0)) {
			crmUsRepCacheModel.number = null;
		}

		crmUsRepCacheModel.zipCode = getZipCode();

		String zipCode = crmUsRepCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			crmUsRepCacheModel.zipCode = null;
		}

		return crmUsRepCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CrmUsRep, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CrmUsRep, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CrmUsRep, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CrmUsRep)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CrmUsRep, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CrmUsRep, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CrmUsRep, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CrmUsRep)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CrmUsRep>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _crmUsRepId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _number;
	private String _zipCode;
	private String _originalZipCode;
	private long _columnBitmask;
	private CrmUsRep _escapedModel;

}