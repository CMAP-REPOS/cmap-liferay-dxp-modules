/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package contact.manager.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import contact.manager.model.CrmContact;
import contact.manager.model.CrmContactModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CrmContact service. Represents a row in the &quot;crm_contact&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CrmContactModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CrmContactImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CrmContactImpl
 * @generated
 */
@ProviderType
public class CrmContactModelImpl
	extends BaseModelImpl<CrmContact> implements CrmContactModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a CRM Contact model instance should use the <code>CrmContact</code> interface instead.
	 */
	public static final String TABLE_NAME = "crm_contact";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"crmContactId", Types.BIGINT},
		{"constantContactId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"prefix", Types.VARCHAR},
		{"salutation", Types.VARCHAR}, {"firstName", Types.VARCHAR},
		{"middleName", Types.VARCHAR}, {"lastName", Types.VARCHAR},
		{"organization", Types.VARCHAR}, {"jobTitle", Types.VARCHAR},
		{"primaryAddress1", Types.VARCHAR}, {"primaryAddress2", Types.VARCHAR},
		{"primaryAddressCity", Types.VARCHAR},
		{"primaryAddressState", Types.VARCHAR},
		{"primaryAddressZip", Types.VARCHAR},
		{"primaryAddressCounty", Types.VARCHAR},
		{"primaryAddressCountry", Types.VARCHAR},
		{"secondaryAddress1", Types.VARCHAR},
		{"secondaryAddress2", Types.VARCHAR},
		{"secondaryAddressCity", Types.VARCHAR},
		{"secondaryAddressState", Types.VARCHAR},
		{"secondaryAddressZip", Types.VARCHAR},
		{"secondaryAddressCounty", Types.VARCHAR},
		{"secondaryAddressCountry", Types.VARCHAR},
		{"primaryPhone", Types.VARCHAR},
		{"primaryPhoneExtension", Types.VARCHAR}, {"primaryFax", Types.VARCHAR},
		{"primaryCell", Types.VARCHAR}, {"primaryEmailAddress", Types.VARCHAR},
		{"alternateContact", Types.VARCHAR}, {"alternateEmail", Types.VARCHAR},
		{"isVip", Types.BOOLEAN}, {"facebookId", Types.VARCHAR},
		{"twitterHandle", Types.VARCHAR}, {"linkedInUrl", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"kioskUuid", Types.VARCHAR},
		{"imageFileEntryId", Types.BIGINT}, {"tagsList", Types.VARCHAR},
		{"groupsList", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("crmContactId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("constantContactId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("prefix", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("salutation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("middleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jobTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryAddress1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryAddress2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryAddressCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryAddressState", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryAddressZip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryAddressCounty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryAddressCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryAddress1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryAddress2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryAddressCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryAddressState", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryAddressZip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryAddressCounty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryAddressCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryPhoneExtension", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryFax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryCell", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryEmailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alternateContact", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("alternateEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isVip", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("facebookId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("twitterHandle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("linkedInUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("kioskUuid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tagsList", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupsList", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table crm_contact (uuid_ VARCHAR(75) null,crmContactId LONG not null primary key,constantContactId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,prefix VARCHAR(500) null,salutation VARCHAR(500) null,firstName VARCHAR(500) null,middleName VARCHAR(500) null,lastName VARCHAR(500) null,organization VARCHAR(500) null,jobTitle VARCHAR(500) null,primaryAddress1 VARCHAR(500) null,primaryAddress2 VARCHAR(500) null,primaryAddressCity VARCHAR(500) null,primaryAddressState VARCHAR(75) null,primaryAddressZip VARCHAR(75) null,primaryAddressCounty VARCHAR(500) null,primaryAddressCountry VARCHAR(500) null,secondaryAddress1 VARCHAR(500) null,secondaryAddress2 VARCHAR(500) null,secondaryAddressCity VARCHAR(500) null,secondaryAddressState VARCHAR(75) null,secondaryAddressZip VARCHAR(75) null,secondaryAddressCounty VARCHAR(500) null,secondaryAddressCountry VARCHAR(500) null,primaryPhone VARCHAR(75) null,primaryPhoneExtension VARCHAR(75) null,primaryFax VARCHAR(75) null,primaryCell VARCHAR(75) null,primaryEmailAddress VARCHAR(500) null,alternateContact VARCHAR(500) null,alternateEmail VARCHAR(500) null,isVip BOOLEAN,facebookId VARCHAR(500) null,twitterHandle VARCHAR(500) null,linkedInUrl VARCHAR(500) null,status VARCHAR(75) null,kioskUuid VARCHAR(75) null,imageFileEntryId LONG,tagsList TEXT null,groupsList TEXT null)";

	public static final String TABLE_SQL_DROP = "drop table crm_contact";

	public static final String ORDER_BY_JPQL =
		" ORDER BY crmContact.lastName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY crm_contact.lastName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		contact.manager.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.contact.manager.model.CrmContact"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		contact.manager.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.contact.manager.model.CrmContact"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		contact.manager.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.contact.manager.model.CrmContact"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long CONSTANTCONTACTID_COLUMN_BITMASK = 2L;

	public static final long FIRSTNAME_COLUMN_BITMASK = 4L;

	public static final long GROUPID_COLUMN_BITMASK = 8L;

	public static final long ISVIP_COLUMN_BITMASK = 16L;

	public static final long LASTNAME_COLUMN_BITMASK = 32L;

	public static final long MIDDLENAME_COLUMN_BITMASK = 64L;

	public static final long PRIMARYEMAILADDRESS_COLUMN_BITMASK = 128L;

	public static final long STATUS_COLUMN_BITMASK = 256L;

	public static final long UUID_COLUMN_BITMASK = 512L;

	public static final String MAPPING_TABLE_CRM_CONTACTS_GROUPS_NAME =
		"crm_contacts_groups";

	public static final Object[][] MAPPING_TABLE_CRM_CONTACTS_GROUPS_COLUMNS = {
		{"companyId", Types.BIGINT}, {"crmContactId", Types.BIGINT},
		{"crmGroupId", Types.BIGINT}
	};

	public static final String MAPPING_TABLE_CRM_CONTACTS_GROUPS_SQL_CREATE =
		"create table crm_contacts_groups (companyId LONG not null,crmContactId LONG not null,crmGroupId LONG not null,primary key (crmContactId, crmGroupId))";

	public static final boolean FINDER_CACHE_ENABLED_CRM_CONTACTS_GROUPS =
		GetterUtil.getBoolean(
			contact.manager.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.crm_contacts_groups"),
			true);

	public static final String MAPPING_TABLE_CRM_CONTACTS_TAGS_NAME =
		"crm_contacts_tags";

	public static final Object[][] MAPPING_TABLE_CRM_CONTACTS_TAGS_COLUMNS = {
		{"companyId", Types.BIGINT}, {"crmContactId", Types.BIGINT},
		{"crmTagId", Types.BIGINT}
	};

	public static final String MAPPING_TABLE_CRM_CONTACTS_TAGS_SQL_CREATE =
		"create table crm_contacts_tags (companyId LONG not null,crmContactId LONG not null,crmTagId LONG not null,primary key (crmContactId, crmTagId))";

	public static final boolean FINDER_CACHE_ENABLED_CRM_CONTACTS_TAGS =
		GetterUtil.getBoolean(
			contact.manager.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.crm_contacts_tags"),
			true);

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		contact.manager.service.util.ServiceProps.get(
			"lock.expiration.time.contact.manager.model.CrmContact"));

	public CrmContactModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _crmContactId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCrmContactId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _crmContactId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CrmContact.class;
	}

	@Override
	public String getModelClassName() {
		return CrmContact.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CrmContact, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CrmContact, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CrmContact, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((CrmContact)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CrmContact, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CrmContact, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CrmContact)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CrmContact, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CrmContact, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CrmContact>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CrmContact.class.getClassLoader(), CrmContact.class,
			ModelWrapper.class);

		try {
			Constructor<CrmContact> constructor =
				(Constructor<CrmContact>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<CrmContact, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CrmContact, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CrmContact, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CrmContact, Object>>();
		Map<String, BiConsumer<CrmContact, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CrmContact, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object uuid) {
					crmContact.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"crmContactId",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getCrmContactId();
				}

			});
		attributeSetterBiConsumers.put(
			"crmContactId",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object crmContactId) {
					crmContact.setCrmContactId((Long)crmContactId);
				}

			});
		attributeGetterFunctions.put(
			"constantContactId",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getConstantContactId();
				}

			});
		attributeSetterBiConsumers.put(
			"constantContactId",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object constantContactId) {

					crmContact.setConstantContactId((Long)constantContactId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object groupId) {
					crmContact.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object companyId) {
					crmContact.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object userId) {
					crmContact.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object userName) {
					crmContact.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object createDate) {
					crmContact.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object modifiedDate) {
					crmContact.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"prefix",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrefix();
				}

			});
		attributeSetterBiConsumers.put(
			"prefix",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object prefix) {
					crmContact.setPrefix((String)prefix);
				}

			});
		attributeGetterFunctions.put(
			"salutation",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getSalutation();
				}

			});
		attributeSetterBiConsumers.put(
			"salutation",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object salutation) {
					crmContact.setSalutation((String)salutation);
				}

			});
		attributeGetterFunctions.put(
			"firstName",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getFirstName();
				}

			});
		attributeSetterBiConsumers.put(
			"firstName",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object firstName) {
					crmContact.setFirstName((String)firstName);
				}

			});
		attributeGetterFunctions.put(
			"middleName",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getMiddleName();
				}

			});
		attributeSetterBiConsumers.put(
			"middleName",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object middleName) {
					crmContact.setMiddleName((String)middleName);
				}

			});
		attributeGetterFunctions.put(
			"lastName",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getLastName();
				}

			});
		attributeSetterBiConsumers.put(
			"lastName",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object lastName) {
					crmContact.setLastName((String)lastName);
				}

			});
		attributeGetterFunctions.put(
			"organization",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getOrganization();
				}

			});
		attributeSetterBiConsumers.put(
			"organization",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object organization) {
					crmContact.setOrganization((String)organization);
				}

			});
		attributeGetterFunctions.put(
			"jobTitle",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getJobTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"jobTitle",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object jobTitle) {
					crmContact.setJobTitle((String)jobTitle);
				}

			});
		attributeGetterFunctions.put(
			"primaryAddress1",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrimaryAddress1();
				}

			});
		attributeSetterBiConsumers.put(
			"primaryAddress1",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object primaryAddress1) {

					crmContact.setPrimaryAddress1((String)primaryAddress1);
				}

			});
		attributeGetterFunctions.put(
			"primaryAddress2",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrimaryAddress2();
				}

			});
		attributeSetterBiConsumers.put(
			"primaryAddress2",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object primaryAddress2) {

					crmContact.setPrimaryAddress2((String)primaryAddress2);
				}

			});
		attributeGetterFunctions.put(
			"primaryAddressCity",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrimaryAddressCity();
				}

			});
		attributeSetterBiConsumers.put(
			"primaryAddressCity",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object primaryAddressCity) {

					crmContact.setPrimaryAddressCity(
						(String)primaryAddressCity);
				}

			});
		attributeGetterFunctions.put(
			"primaryAddressState",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrimaryAddressState();
				}

			});
		attributeSetterBiConsumers.put(
			"primaryAddressState",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object primaryAddressState) {

					crmContact.setPrimaryAddressState(
						(String)primaryAddressState);
				}

			});
		attributeGetterFunctions.put(
			"primaryAddressZip",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrimaryAddressZip();
				}

			});
		attributeSetterBiConsumers.put(
			"primaryAddressZip",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object primaryAddressZip) {

					crmContact.setPrimaryAddressZip((String)primaryAddressZip);
				}

			});
		attributeGetterFunctions.put(
			"primaryAddressCounty",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrimaryAddressCounty();
				}

			});
		attributeSetterBiConsumers.put(
			"primaryAddressCounty",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object primaryAddressCounty) {

					crmContact.setPrimaryAddressCounty(
						(String)primaryAddressCounty);
				}

			});
		attributeGetterFunctions.put(
			"primaryAddressCountry",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrimaryAddressCountry();
				}

			});
		attributeSetterBiConsumers.put(
			"primaryAddressCountry",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object primaryAddressCountry) {

					crmContact.setPrimaryAddressCountry(
						(String)primaryAddressCountry);
				}

			});
		attributeGetterFunctions.put(
			"secondaryAddress1",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getSecondaryAddress1();
				}

			});
		attributeSetterBiConsumers.put(
			"secondaryAddress1",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object secondaryAddress1) {

					crmContact.setSecondaryAddress1((String)secondaryAddress1);
				}

			});
		attributeGetterFunctions.put(
			"secondaryAddress2",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getSecondaryAddress2();
				}

			});
		attributeSetterBiConsumers.put(
			"secondaryAddress2",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object secondaryAddress2) {

					crmContact.setSecondaryAddress2((String)secondaryAddress2);
				}

			});
		attributeGetterFunctions.put(
			"secondaryAddressCity",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getSecondaryAddressCity();
				}

			});
		attributeSetterBiConsumers.put(
			"secondaryAddressCity",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object secondaryAddressCity) {

					crmContact.setSecondaryAddressCity(
						(String)secondaryAddressCity);
				}

			});
		attributeGetterFunctions.put(
			"secondaryAddressState",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getSecondaryAddressState();
				}

			});
		attributeSetterBiConsumers.put(
			"secondaryAddressState",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object secondaryAddressState) {

					crmContact.setSecondaryAddressState(
						(String)secondaryAddressState);
				}

			});
		attributeGetterFunctions.put(
			"secondaryAddressZip",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getSecondaryAddressZip();
				}

			});
		attributeSetterBiConsumers.put(
			"secondaryAddressZip",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object secondaryAddressZip) {

					crmContact.setSecondaryAddressZip(
						(String)secondaryAddressZip);
				}

			});
		attributeGetterFunctions.put(
			"secondaryAddressCounty",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getSecondaryAddressCounty();
				}

			});
		attributeSetterBiConsumers.put(
			"secondaryAddressCounty",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object secondaryAddressCounty) {

					crmContact.setSecondaryAddressCounty(
						(String)secondaryAddressCounty);
				}

			});
		attributeGetterFunctions.put(
			"secondaryAddressCountry",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getSecondaryAddressCountry();
				}

			});
		attributeSetterBiConsumers.put(
			"secondaryAddressCountry",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object secondaryAddressCountry) {

					crmContact.setSecondaryAddressCountry(
						(String)secondaryAddressCountry);
				}

			});
		attributeGetterFunctions.put(
			"primaryPhone",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrimaryPhone();
				}

			});
		attributeSetterBiConsumers.put(
			"primaryPhone",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object primaryPhone) {
					crmContact.setPrimaryPhone((String)primaryPhone);
				}

			});
		attributeGetterFunctions.put(
			"primaryPhoneExtension",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrimaryPhoneExtension();
				}

			});
		attributeSetterBiConsumers.put(
			"primaryPhoneExtension",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object primaryPhoneExtension) {

					crmContact.setPrimaryPhoneExtension(
						(String)primaryPhoneExtension);
				}

			});
		attributeGetterFunctions.put(
			"primaryFax",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrimaryFax();
				}

			});
		attributeSetterBiConsumers.put(
			"primaryFax",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object primaryFax) {
					crmContact.setPrimaryFax((String)primaryFax);
				}

			});
		attributeGetterFunctions.put(
			"primaryCell",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrimaryCell();
				}

			});
		attributeSetterBiConsumers.put(
			"primaryCell",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object primaryCell) {
					crmContact.setPrimaryCell((String)primaryCell);
				}

			});
		attributeGetterFunctions.put(
			"primaryEmailAddress",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getPrimaryEmailAddress();
				}

			});
		attributeSetterBiConsumers.put(
			"primaryEmailAddress",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object primaryEmailAddress) {

					crmContact.setPrimaryEmailAddress(
						(String)primaryEmailAddress);
				}

			});
		attributeGetterFunctions.put(
			"alternateContact",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getAlternateContact();
				}

			});
		attributeSetterBiConsumers.put(
			"alternateContact",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object alternateContact) {

					crmContact.setAlternateContact((String)alternateContact);
				}

			});
		attributeGetterFunctions.put(
			"alternateEmail",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getAlternateEmail();
				}

			});
		attributeSetterBiConsumers.put(
			"alternateEmail",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object alternateEmail) {

					crmContact.setAlternateEmail((String)alternateEmail);
				}

			});
		attributeGetterFunctions.put(
			"isVip",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getIsVip();
				}

			});
		attributeSetterBiConsumers.put(
			"isVip",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object isVip) {
					crmContact.setIsVip((Boolean)isVip);
				}

			});
		attributeGetterFunctions.put(
			"facebookId",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getFacebookId();
				}

			});
		attributeSetterBiConsumers.put(
			"facebookId",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object facebookId) {
					crmContact.setFacebookId((String)facebookId);
				}

			});
		attributeGetterFunctions.put(
			"twitterHandle",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getTwitterHandle();
				}

			});
		attributeSetterBiConsumers.put(
			"twitterHandle",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object twitterHandle) {

					crmContact.setTwitterHandle((String)twitterHandle);
				}

			});
		attributeGetterFunctions.put(
			"linkedInUrl",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getLinkedInUrl();
				}

			});
		attributeSetterBiConsumers.put(
			"linkedInUrl",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object linkedInUrl) {
					crmContact.setLinkedInUrl((String)linkedInUrl);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object status) {
					crmContact.setStatus((String)status);
				}

			});
		attributeGetterFunctions.put(
			"kioskUuid",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getKioskUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"kioskUuid",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object kioskUuid) {
					crmContact.setKioskUuid((String)kioskUuid);
				}

			});
		attributeGetterFunctions.put(
			"imageFileEntryId",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getImageFileEntryId();
				}

			});
		attributeSetterBiConsumers.put(
			"imageFileEntryId",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(
					CrmContact crmContact, Object imageFileEntryId) {

					crmContact.setImageFileEntryId((Long)imageFileEntryId);
				}

			});
		attributeGetterFunctions.put(
			"tagsList",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getTagsList();
				}

			});
		attributeSetterBiConsumers.put(
			"tagsList",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object tagsList) {
					crmContact.setTagsList((String)tagsList);
				}

			});
		attributeGetterFunctions.put(
			"groupsList",
			new Function<CrmContact, Object>() {

				@Override
				public Object apply(CrmContact crmContact) {
					return crmContact.getGroupsList();
				}

			});
		attributeSetterBiConsumers.put(
			"groupsList",
			new BiConsumer<CrmContact, Object>() {

				@Override
				public void accept(CrmContact crmContact, Object groupsList) {
					crmContact.setGroupsList((String)groupsList);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getCrmContactId() {
		return _crmContactId;
	}

	@Override
	public void setCrmContactId(long crmContactId) {
		_crmContactId = crmContactId;
	}

	@Override
	public long getConstantContactId() {
		return _constantContactId;
	}

	@Override
	public void setConstantContactId(long constantContactId) {
		_columnBitmask |= CONSTANTCONTACTID_COLUMN_BITMASK;

		if (!_setOriginalConstantContactId) {
			_setOriginalConstantContactId = true;

			_originalConstantContactId = _constantContactId;
		}

		_constantContactId = constantContactId;
	}

	public long getOriginalConstantContactId() {
		return _originalConstantContactId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getPrefix() {
		if (_prefix == null) {
			return "";
		}
		else {
			return _prefix;
		}
	}

	@Override
	public void setPrefix(String prefix) {
		_prefix = prefix;
	}

	@Override
	public String getSalutation() {
		if (_salutation == null) {
			return "";
		}
		else {
			return _salutation;
		}
	}

	@Override
	public void setSalutation(String salutation) {
		_salutation = salutation;
	}

	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_columnBitmask |= FIRSTNAME_COLUMN_BITMASK;

		if (_originalFirstName == null) {
			_originalFirstName = _firstName;
		}

		_firstName = firstName;
	}

	public String getOriginalFirstName() {
		return GetterUtil.getString(_originalFirstName);
	}

	@Override
	public String getMiddleName() {
		if (_middleName == null) {
			return "";
		}
		else {
			return _middleName;
		}
	}

	@Override
	public void setMiddleName(String middleName) {
		_columnBitmask |= MIDDLENAME_COLUMN_BITMASK;

		if (_originalMiddleName == null) {
			_originalMiddleName = _middleName;
		}

		_middleName = middleName;
	}

	public String getOriginalMiddleName() {
		return GetterUtil.getString(_originalMiddleName);
	}

	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_columnBitmask = -1L;

		if (_originalLastName == null) {
			_originalLastName = _lastName;
		}

		_lastName = lastName;
	}

	public String getOriginalLastName() {
		return GetterUtil.getString(_originalLastName);
	}

	@Override
	public String getOrganization() {
		if (_organization == null) {
			return "";
		}
		else {
			return _organization;
		}
	}

	@Override
	public void setOrganization(String organization) {
		_organization = organization;
	}

	@Override
	public String getJobTitle() {
		if (_jobTitle == null) {
			return "";
		}
		else {
			return _jobTitle;
		}
	}

	@Override
	public void setJobTitle(String jobTitle) {
		_jobTitle = jobTitle;
	}

	@Override
	public String getPrimaryAddress1() {
		if (_primaryAddress1 == null) {
			return "";
		}
		else {
			return _primaryAddress1;
		}
	}

	@Override
	public void setPrimaryAddress1(String primaryAddress1) {
		_primaryAddress1 = primaryAddress1;
	}

	@Override
	public String getPrimaryAddress2() {
		if (_primaryAddress2 == null) {
			return "";
		}
		else {
			return _primaryAddress2;
		}
	}

	@Override
	public void setPrimaryAddress2(String primaryAddress2) {
		_primaryAddress2 = primaryAddress2;
	}

	@Override
	public String getPrimaryAddressCity() {
		if (_primaryAddressCity == null) {
			return "";
		}
		else {
			return _primaryAddressCity;
		}
	}

	@Override
	public void setPrimaryAddressCity(String primaryAddressCity) {
		_primaryAddressCity = primaryAddressCity;
	}

	@Override
	public String getPrimaryAddressState() {
		if (_primaryAddressState == null) {
			return "";
		}
		else {
			return _primaryAddressState;
		}
	}

	@Override
	public void setPrimaryAddressState(String primaryAddressState) {
		_primaryAddressState = primaryAddressState;
	}

	@Override
	public String getPrimaryAddressZip() {
		if (_primaryAddressZip == null) {
			return "";
		}
		else {
			return _primaryAddressZip;
		}
	}

	@Override
	public void setPrimaryAddressZip(String primaryAddressZip) {
		_primaryAddressZip = primaryAddressZip;
	}

	@Override
	public String getPrimaryAddressCounty() {
		if (_primaryAddressCounty == null) {
			return "";
		}
		else {
			return _primaryAddressCounty;
		}
	}

	@Override
	public void setPrimaryAddressCounty(String primaryAddressCounty) {
		_primaryAddressCounty = primaryAddressCounty;
	}

	@Override
	public String getPrimaryAddressCountry() {
		if (_primaryAddressCountry == null) {
			return "";
		}
		else {
			return _primaryAddressCountry;
		}
	}

	@Override
	public void setPrimaryAddressCountry(String primaryAddressCountry) {
		_primaryAddressCountry = primaryAddressCountry;
	}

	@Override
	public String getSecondaryAddress1() {
		if (_secondaryAddress1 == null) {
			return "";
		}
		else {
			return _secondaryAddress1;
		}
	}

	@Override
	public void setSecondaryAddress1(String secondaryAddress1) {
		_secondaryAddress1 = secondaryAddress1;
	}

	@Override
	public String getSecondaryAddress2() {
		if (_secondaryAddress2 == null) {
			return "";
		}
		else {
			return _secondaryAddress2;
		}
	}

	@Override
	public void setSecondaryAddress2(String secondaryAddress2) {
		_secondaryAddress2 = secondaryAddress2;
	}

	@Override
	public String getSecondaryAddressCity() {
		if (_secondaryAddressCity == null) {
			return "";
		}
		else {
			return _secondaryAddressCity;
		}
	}

	@Override
	public void setSecondaryAddressCity(String secondaryAddressCity) {
		_secondaryAddressCity = secondaryAddressCity;
	}

	@Override
	public String getSecondaryAddressState() {
		if (_secondaryAddressState == null) {
			return "";
		}
		else {
			return _secondaryAddressState;
		}
	}

	@Override
	public void setSecondaryAddressState(String secondaryAddressState) {
		_secondaryAddressState = secondaryAddressState;
	}

	@Override
	public String getSecondaryAddressZip() {
		if (_secondaryAddressZip == null) {
			return "";
		}
		else {
			return _secondaryAddressZip;
		}
	}

	@Override
	public void setSecondaryAddressZip(String secondaryAddressZip) {
		_secondaryAddressZip = secondaryAddressZip;
	}

	@Override
	public String getSecondaryAddressCounty() {
		if (_secondaryAddressCounty == null) {
			return "";
		}
		else {
			return _secondaryAddressCounty;
		}
	}

	@Override
	public void setSecondaryAddressCounty(String secondaryAddressCounty) {
		_secondaryAddressCounty = secondaryAddressCounty;
	}

	@Override
	public String getSecondaryAddressCountry() {
		if (_secondaryAddressCountry == null) {
			return "";
		}
		else {
			return _secondaryAddressCountry;
		}
	}

	@Override
	public void setSecondaryAddressCountry(String secondaryAddressCountry) {
		_secondaryAddressCountry = secondaryAddressCountry;
	}

	@Override
	public String getPrimaryPhone() {
		if (_primaryPhone == null) {
			return "";
		}
		else {
			return _primaryPhone;
		}
	}

	@Override
	public void setPrimaryPhone(String primaryPhone) {
		_primaryPhone = primaryPhone;
	}

	@Override
	public String getPrimaryPhoneExtension() {
		if (_primaryPhoneExtension == null) {
			return "";
		}
		else {
			return _primaryPhoneExtension;
		}
	}

	@Override
	public void setPrimaryPhoneExtension(String primaryPhoneExtension) {
		_primaryPhoneExtension = primaryPhoneExtension;
	}

	@Override
	public String getPrimaryFax() {
		if (_primaryFax == null) {
			return "";
		}
		else {
			return _primaryFax;
		}
	}

	@Override
	public void setPrimaryFax(String primaryFax) {
		_primaryFax = primaryFax;
	}

	@Override
	public String getPrimaryCell() {
		if (_primaryCell == null) {
			return "";
		}
		else {
			return _primaryCell;
		}
	}

	@Override
	public void setPrimaryCell(String primaryCell) {
		_primaryCell = primaryCell;
	}

	@Override
	public String getPrimaryEmailAddress() {
		if (_primaryEmailAddress == null) {
			return "";
		}
		else {
			return _primaryEmailAddress;
		}
	}

	@Override
	public void setPrimaryEmailAddress(String primaryEmailAddress) {
		_columnBitmask |= PRIMARYEMAILADDRESS_COLUMN_BITMASK;

		if (_originalPrimaryEmailAddress == null) {
			_originalPrimaryEmailAddress = _primaryEmailAddress;
		}

		_primaryEmailAddress = primaryEmailAddress;
	}

	public String getOriginalPrimaryEmailAddress() {
		return GetterUtil.getString(_originalPrimaryEmailAddress);
	}

	@Override
	public String getAlternateContact() {
		if (_alternateContact == null) {
			return "";
		}
		else {
			return _alternateContact;
		}
	}

	@Override
	public void setAlternateContact(String alternateContact) {
		_alternateContact = alternateContact;
	}

	@Override
	public String getAlternateEmail() {
		if (_alternateEmail == null) {
			return "";
		}
		else {
			return _alternateEmail;
		}
	}

	@Override
	public void setAlternateEmail(String alternateEmail) {
		_alternateEmail = alternateEmail;
	}

	@Override
	public boolean getIsVip() {
		return _isVip;
	}

	@Override
	public boolean isIsVip() {
		return _isVip;
	}

	@Override
	public void setIsVip(boolean isVip) {
		_columnBitmask |= ISVIP_COLUMN_BITMASK;

		if (!_setOriginalIsVip) {
			_setOriginalIsVip = true;

			_originalIsVip = _isVip;
		}

		_isVip = isVip;
	}

	public boolean getOriginalIsVip() {
		return _originalIsVip;
	}

	@Override
	public String getFacebookId() {
		if (_facebookId == null) {
			return "";
		}
		else {
			return _facebookId;
		}
	}

	@Override
	public void setFacebookId(String facebookId) {
		_facebookId = facebookId;
	}

	@Override
	public String getTwitterHandle() {
		if (_twitterHandle == null) {
			return "";
		}
		else {
			return _twitterHandle;
		}
	}

	@Override
	public void setTwitterHandle(String twitterHandle) {
		_twitterHandle = twitterHandle;
	}

	@Override
	public String getLinkedInUrl() {
		if (_linkedInUrl == null) {
			return "";
		}
		else {
			return _linkedInUrl;
		}
	}

	@Override
	public void setLinkedInUrl(String linkedInUrl) {
		_linkedInUrl = linkedInUrl;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@Override
	public String getKioskUuid() {
		if (_kioskUuid == null) {
			return "";
		}
		else {
			return _kioskUuid;
		}
	}

	@Override
	public void setKioskUuid(String kioskUuid) {
		_kioskUuid = kioskUuid;
	}

	@Override
	public long getImageFileEntryId() {
		return _imageFileEntryId;
	}

	@Override
	public void setImageFileEntryId(long imageFileEntryId) {
		_imageFileEntryId = imageFileEntryId;
	}

	@Override
	public String getTagsList() {
		if (_tagsList == null) {
			return "";
		}
		else {
			return _tagsList;
		}
	}

	@Override
	public void setTagsList(String tagsList) {
		_tagsList = tagsList;
	}

	@Override
	public String getGroupsList() {
		if (_groupsList == null) {
			return "";
		}
		else {
			return _groupsList;
		}
	}

	@Override
	public void setGroupsList(String groupsList) {
		_groupsList = groupsList;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CrmContact.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CrmContact.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CrmContact toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CrmContact>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CrmContactImpl crmContactImpl = new CrmContactImpl();

		crmContactImpl.setUuid(getUuid());
		crmContactImpl.setCrmContactId(getCrmContactId());
		crmContactImpl.setConstantContactId(getConstantContactId());
		crmContactImpl.setGroupId(getGroupId());
		crmContactImpl.setCompanyId(getCompanyId());
		crmContactImpl.setUserId(getUserId());
		crmContactImpl.setUserName(getUserName());
		crmContactImpl.setCreateDate(getCreateDate());
		crmContactImpl.setModifiedDate(getModifiedDate());
		crmContactImpl.setPrefix(getPrefix());
		crmContactImpl.setSalutation(getSalutation());
		crmContactImpl.setFirstName(getFirstName());
		crmContactImpl.setMiddleName(getMiddleName());
		crmContactImpl.setLastName(getLastName());
		crmContactImpl.setOrganization(getOrganization());
		crmContactImpl.setJobTitle(getJobTitle());
		crmContactImpl.setPrimaryAddress1(getPrimaryAddress1());
		crmContactImpl.setPrimaryAddress2(getPrimaryAddress2());
		crmContactImpl.setPrimaryAddressCity(getPrimaryAddressCity());
		crmContactImpl.setPrimaryAddressState(getPrimaryAddressState());
		crmContactImpl.setPrimaryAddressZip(getPrimaryAddressZip());
		crmContactImpl.setPrimaryAddressCounty(getPrimaryAddressCounty());
		crmContactImpl.setPrimaryAddressCountry(getPrimaryAddressCountry());
		crmContactImpl.setSecondaryAddress1(getSecondaryAddress1());
		crmContactImpl.setSecondaryAddress2(getSecondaryAddress2());
		crmContactImpl.setSecondaryAddressCity(getSecondaryAddressCity());
		crmContactImpl.setSecondaryAddressState(getSecondaryAddressState());
		crmContactImpl.setSecondaryAddressZip(getSecondaryAddressZip());
		crmContactImpl.setSecondaryAddressCounty(getSecondaryAddressCounty());
		crmContactImpl.setSecondaryAddressCountry(getSecondaryAddressCountry());
		crmContactImpl.setPrimaryPhone(getPrimaryPhone());
		crmContactImpl.setPrimaryPhoneExtension(getPrimaryPhoneExtension());
		crmContactImpl.setPrimaryFax(getPrimaryFax());
		crmContactImpl.setPrimaryCell(getPrimaryCell());
		crmContactImpl.setPrimaryEmailAddress(getPrimaryEmailAddress());
		crmContactImpl.setAlternateContact(getAlternateContact());
		crmContactImpl.setAlternateEmail(getAlternateEmail());
		crmContactImpl.setIsVip(isIsVip());
		crmContactImpl.setFacebookId(getFacebookId());
		crmContactImpl.setTwitterHandle(getTwitterHandle());
		crmContactImpl.setLinkedInUrl(getLinkedInUrl());
		crmContactImpl.setStatus(getStatus());
		crmContactImpl.setKioskUuid(getKioskUuid());
		crmContactImpl.setImageFileEntryId(getImageFileEntryId());
		crmContactImpl.setTagsList(getTagsList());
		crmContactImpl.setGroupsList(getGroupsList());

		crmContactImpl.resetOriginalValues();

		return crmContactImpl;
	}

	@Override
	public int compareTo(CrmContact crmContact) {
		int value = 0;

		value = getLastName().compareTo(crmContact.getLastName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CrmContact)) {
			return false;
		}

		CrmContact crmContact = (CrmContact)obj;

		long primaryKey = crmContact.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CrmContactModelImpl crmContactModelImpl = this;

		crmContactModelImpl._originalUuid = crmContactModelImpl._uuid;

		crmContactModelImpl._originalConstantContactId =
			crmContactModelImpl._constantContactId;

		crmContactModelImpl._setOriginalConstantContactId = false;

		crmContactModelImpl._originalGroupId = crmContactModelImpl._groupId;

		crmContactModelImpl._setOriginalGroupId = false;

		crmContactModelImpl._originalCompanyId = crmContactModelImpl._companyId;

		crmContactModelImpl._setOriginalCompanyId = false;

		crmContactModelImpl._setModifiedDate = false;

		crmContactModelImpl._originalFirstName = crmContactModelImpl._firstName;

		crmContactModelImpl._originalMiddleName =
			crmContactModelImpl._middleName;

		crmContactModelImpl._originalLastName = crmContactModelImpl._lastName;

		crmContactModelImpl._originalPrimaryEmailAddress =
			crmContactModelImpl._primaryEmailAddress;

		crmContactModelImpl._originalIsVip = crmContactModelImpl._isVip;

		crmContactModelImpl._setOriginalIsVip = false;

		crmContactModelImpl._originalStatus = crmContactModelImpl._status;

		crmContactModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CrmContact> toCacheModel() {
		CrmContactCacheModel crmContactCacheModel = new CrmContactCacheModel();

		crmContactCacheModel.uuid = getUuid();

		String uuid = crmContactCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			crmContactCacheModel.uuid = null;
		}

		crmContactCacheModel.crmContactId = getCrmContactId();

		crmContactCacheModel.constantContactId = getConstantContactId();

		crmContactCacheModel.groupId = getGroupId();

		crmContactCacheModel.companyId = getCompanyId();

		crmContactCacheModel.userId = getUserId();

		crmContactCacheModel.userName = getUserName();

		String userName = crmContactCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			crmContactCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			crmContactCacheModel.createDate = createDate.getTime();
		}
		else {
			crmContactCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			crmContactCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			crmContactCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		crmContactCacheModel.prefix = getPrefix();

		String prefix = crmContactCacheModel.prefix;

		if ((prefix != null) && (prefix.length() == 0)) {
			crmContactCacheModel.prefix = null;
		}

		crmContactCacheModel.salutation = getSalutation();

		String salutation = crmContactCacheModel.salutation;

		if ((salutation != null) && (salutation.length() == 0)) {
			crmContactCacheModel.salutation = null;
		}

		crmContactCacheModel.firstName = getFirstName();

		String firstName = crmContactCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			crmContactCacheModel.firstName = null;
		}

		crmContactCacheModel.middleName = getMiddleName();

		String middleName = crmContactCacheModel.middleName;

		if ((middleName != null) && (middleName.length() == 0)) {
			crmContactCacheModel.middleName = null;
		}

		crmContactCacheModel.lastName = getLastName();

		String lastName = crmContactCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			crmContactCacheModel.lastName = null;
		}

		crmContactCacheModel.organization = getOrganization();

		String organization = crmContactCacheModel.organization;

		if ((organization != null) && (organization.length() == 0)) {
			crmContactCacheModel.organization = null;
		}

		crmContactCacheModel.jobTitle = getJobTitle();

		String jobTitle = crmContactCacheModel.jobTitle;

		if ((jobTitle != null) && (jobTitle.length() == 0)) {
			crmContactCacheModel.jobTitle = null;
		}

		crmContactCacheModel.primaryAddress1 = getPrimaryAddress1();

		String primaryAddress1 = crmContactCacheModel.primaryAddress1;

		if ((primaryAddress1 != null) && (primaryAddress1.length() == 0)) {
			crmContactCacheModel.primaryAddress1 = null;
		}

		crmContactCacheModel.primaryAddress2 = getPrimaryAddress2();

		String primaryAddress2 = crmContactCacheModel.primaryAddress2;

		if ((primaryAddress2 != null) && (primaryAddress2.length() == 0)) {
			crmContactCacheModel.primaryAddress2 = null;
		}

		crmContactCacheModel.primaryAddressCity = getPrimaryAddressCity();

		String primaryAddressCity = crmContactCacheModel.primaryAddressCity;

		if ((primaryAddressCity != null) &&
			(primaryAddressCity.length() == 0)) {

			crmContactCacheModel.primaryAddressCity = null;
		}

		crmContactCacheModel.primaryAddressState = getPrimaryAddressState();

		String primaryAddressState = crmContactCacheModel.primaryAddressState;

		if ((primaryAddressState != null) &&
			(primaryAddressState.length() == 0)) {

			crmContactCacheModel.primaryAddressState = null;
		}

		crmContactCacheModel.primaryAddressZip = getPrimaryAddressZip();

		String primaryAddressZip = crmContactCacheModel.primaryAddressZip;

		if ((primaryAddressZip != null) && (primaryAddressZip.length() == 0)) {
			crmContactCacheModel.primaryAddressZip = null;
		}

		crmContactCacheModel.primaryAddressCounty = getPrimaryAddressCounty();

		String primaryAddressCounty = crmContactCacheModel.primaryAddressCounty;

		if ((primaryAddressCounty != null) &&
			(primaryAddressCounty.length() == 0)) {

			crmContactCacheModel.primaryAddressCounty = null;
		}

		crmContactCacheModel.primaryAddressCountry = getPrimaryAddressCountry();

		String primaryAddressCountry =
			crmContactCacheModel.primaryAddressCountry;

		if ((primaryAddressCountry != null) &&
			(primaryAddressCountry.length() == 0)) {

			crmContactCacheModel.primaryAddressCountry = null;
		}

		crmContactCacheModel.secondaryAddress1 = getSecondaryAddress1();

		String secondaryAddress1 = crmContactCacheModel.secondaryAddress1;

		if ((secondaryAddress1 != null) && (secondaryAddress1.length() == 0)) {
			crmContactCacheModel.secondaryAddress1 = null;
		}

		crmContactCacheModel.secondaryAddress2 = getSecondaryAddress2();

		String secondaryAddress2 = crmContactCacheModel.secondaryAddress2;

		if ((secondaryAddress2 != null) && (secondaryAddress2.length() == 0)) {
			crmContactCacheModel.secondaryAddress2 = null;
		}

		crmContactCacheModel.secondaryAddressCity = getSecondaryAddressCity();

		String secondaryAddressCity = crmContactCacheModel.secondaryAddressCity;

		if ((secondaryAddressCity != null) &&
			(secondaryAddressCity.length() == 0)) {

			crmContactCacheModel.secondaryAddressCity = null;
		}

		crmContactCacheModel.secondaryAddressState = getSecondaryAddressState();

		String secondaryAddressState =
			crmContactCacheModel.secondaryAddressState;

		if ((secondaryAddressState != null) &&
			(secondaryAddressState.length() == 0)) {

			crmContactCacheModel.secondaryAddressState = null;
		}

		crmContactCacheModel.secondaryAddressZip = getSecondaryAddressZip();

		String secondaryAddressZip = crmContactCacheModel.secondaryAddressZip;

		if ((secondaryAddressZip != null) &&
			(secondaryAddressZip.length() == 0)) {

			crmContactCacheModel.secondaryAddressZip = null;
		}

		crmContactCacheModel.secondaryAddressCounty =
			getSecondaryAddressCounty();

		String secondaryAddressCounty =
			crmContactCacheModel.secondaryAddressCounty;

		if ((secondaryAddressCounty != null) &&
			(secondaryAddressCounty.length() == 0)) {

			crmContactCacheModel.secondaryAddressCounty = null;
		}

		crmContactCacheModel.secondaryAddressCountry =
			getSecondaryAddressCountry();

		String secondaryAddressCountry =
			crmContactCacheModel.secondaryAddressCountry;

		if ((secondaryAddressCountry != null) &&
			(secondaryAddressCountry.length() == 0)) {

			crmContactCacheModel.secondaryAddressCountry = null;
		}

		crmContactCacheModel.primaryPhone = getPrimaryPhone();

		String primaryPhone = crmContactCacheModel.primaryPhone;

		if ((primaryPhone != null) && (primaryPhone.length() == 0)) {
			crmContactCacheModel.primaryPhone = null;
		}

		crmContactCacheModel.primaryPhoneExtension = getPrimaryPhoneExtension();

		String primaryPhoneExtension =
			crmContactCacheModel.primaryPhoneExtension;

		if ((primaryPhoneExtension != null) &&
			(primaryPhoneExtension.length() == 0)) {

			crmContactCacheModel.primaryPhoneExtension = null;
		}

		crmContactCacheModel.primaryFax = getPrimaryFax();

		String primaryFax = crmContactCacheModel.primaryFax;

		if ((primaryFax != null) && (primaryFax.length() == 0)) {
			crmContactCacheModel.primaryFax = null;
		}

		crmContactCacheModel.primaryCell = getPrimaryCell();

		String primaryCell = crmContactCacheModel.primaryCell;

		if ((primaryCell != null) && (primaryCell.length() == 0)) {
			crmContactCacheModel.primaryCell = null;
		}

		crmContactCacheModel.primaryEmailAddress = getPrimaryEmailAddress();

		String primaryEmailAddress = crmContactCacheModel.primaryEmailAddress;

		if ((primaryEmailAddress != null) &&
			(primaryEmailAddress.length() == 0)) {

			crmContactCacheModel.primaryEmailAddress = null;
		}

		crmContactCacheModel.alternateContact = getAlternateContact();

		String alternateContact = crmContactCacheModel.alternateContact;

		if ((alternateContact != null) && (alternateContact.length() == 0)) {
			crmContactCacheModel.alternateContact = null;
		}

		crmContactCacheModel.alternateEmail = getAlternateEmail();

		String alternateEmail = crmContactCacheModel.alternateEmail;

		if ((alternateEmail != null) && (alternateEmail.length() == 0)) {
			crmContactCacheModel.alternateEmail = null;
		}

		crmContactCacheModel.isVip = isIsVip();

		crmContactCacheModel.facebookId = getFacebookId();

		String facebookId = crmContactCacheModel.facebookId;

		if ((facebookId != null) && (facebookId.length() == 0)) {
			crmContactCacheModel.facebookId = null;
		}

		crmContactCacheModel.twitterHandle = getTwitterHandle();

		String twitterHandle = crmContactCacheModel.twitterHandle;

		if ((twitterHandle != null) && (twitterHandle.length() == 0)) {
			crmContactCacheModel.twitterHandle = null;
		}

		crmContactCacheModel.linkedInUrl = getLinkedInUrl();

		String linkedInUrl = crmContactCacheModel.linkedInUrl;

		if ((linkedInUrl != null) && (linkedInUrl.length() == 0)) {
			crmContactCacheModel.linkedInUrl = null;
		}

		crmContactCacheModel.status = getStatus();

		String status = crmContactCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			crmContactCacheModel.status = null;
		}

		crmContactCacheModel.kioskUuid = getKioskUuid();

		String kioskUuid = crmContactCacheModel.kioskUuid;

		if ((kioskUuid != null) && (kioskUuid.length() == 0)) {
			crmContactCacheModel.kioskUuid = null;
		}

		crmContactCacheModel.imageFileEntryId = getImageFileEntryId();

		crmContactCacheModel.tagsList = getTagsList();

		String tagsList = crmContactCacheModel.tagsList;

		if ((tagsList != null) && (tagsList.length() == 0)) {
			crmContactCacheModel.tagsList = null;
		}

		crmContactCacheModel.groupsList = getGroupsList();

		String groupsList = crmContactCacheModel.groupsList;

		if ((groupsList != null) && (groupsList.length() == 0)) {
			crmContactCacheModel.groupsList = null;
		}

		return crmContactCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CrmContact, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CrmContact, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CrmContact, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CrmContact)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CrmContact, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CrmContact, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CrmContact, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CrmContact)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CrmContact>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _crmContactId;
	private long _constantContactId;
	private long _originalConstantContactId;
	private boolean _setOriginalConstantContactId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _prefix;
	private String _salutation;
	private String _firstName;
	private String _originalFirstName;
	private String _middleName;
	private String _originalMiddleName;
	private String _lastName;
	private String _originalLastName;
	private String _organization;
	private String _jobTitle;
	private String _primaryAddress1;
	private String _primaryAddress2;
	private String _primaryAddressCity;
	private String _primaryAddressState;
	private String _primaryAddressZip;
	private String _primaryAddressCounty;
	private String _primaryAddressCountry;
	private String _secondaryAddress1;
	private String _secondaryAddress2;
	private String _secondaryAddressCity;
	private String _secondaryAddressState;
	private String _secondaryAddressZip;
	private String _secondaryAddressCounty;
	private String _secondaryAddressCountry;
	private String _primaryPhone;
	private String _primaryPhoneExtension;
	private String _primaryFax;
	private String _primaryCell;
	private String _primaryEmailAddress;
	private String _originalPrimaryEmailAddress;
	private String _alternateContact;
	private String _alternateEmail;
	private boolean _isVip;
	private boolean _originalIsVip;
	private boolean _setOriginalIsVip;
	private String _facebookId;
	private String _twitterHandle;
	private String _linkedInUrl;
	private String _status;
	private String _originalStatus;
	private String _kioskUuid;
	private long _imageFileEntryId;
	private String _tagsList;
	private String _groupsList;
	private long _columnBitmask;
	private CrmContact _escapedModel;

}