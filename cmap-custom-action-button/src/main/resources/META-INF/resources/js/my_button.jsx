/* global React, ReactDOM AlloyEditor */
debugger;
import './css/main.scss'

(function() {
        'use strict';

        var React = AlloyEditor.React;

        var ActionButton = React.createClass(
        	{
	        	mixins: [AlloyEditor.ButtonStateClasses, AlloyEditor.ButtonKeystroke],

	        	displayName: "ActionButton",

	        	propTypes: {
				    /**
				     * The editor instance where the component is being used.
				     *
				     * @instance
				     * @memberof ActionButton
				     * @property {Object} editor
				     */
				    editor: React.PropTypes.object.isRequired,

				    /**
				     * The label that should be used for accessibility purposes.
				     *
				     * @instance
				     * @memberof ActionButton
				     * @property {String} label
				     */
				    label: React.PropTypes.string,

				    /**
				     * The tabIndex of the button in its toolbar current state. A value other than -1
				     * means that the button has focus and is the active element.
				     *
				     * @instance
				     * @memberof ActionButton
				     * @property {Number} tabIndex
				     */
				    tabIndex: React.PropTypes.number
				},

				// Lifecycle. Provides static properties to the widget.
				statics: {
				    /**
				     * The name which is used as an alias of the button in the configuration.
				     *
				     * @default actionButton
				     * @memberof ActionButton
				     * @property {String} key
				     * @static
				     */
				    key: 'actionButton'
				},
				/**
	             * Lifecycle. Returns the default values of the properties used in the widget.
	             *
	             * @instance
	             * @memberof ActionButton
	             * @method getDefaultProps
	             * @return {Object} The default properties.
	             */
	            getDefaultProps: function() {
	                return {
	                    command: '_createActions',
	                    keystroke: {
	                        fn: '_createActions',
	                        keys: CKEDITOR.CTRL + CKEDITOR.SHIFT + 89 /*Y*/
	                    }
	                };
	            },
	            // Sets the initial state of the component
	            getInitialState: function () {
	            	return {
	            		show: false,
	            		actions: 1
	            	}
	            },
	            /**
                 * Lifecycle. Renders the UI of the button.
                 *
                 * @method render
                 * @return {Object} The content which should be rendered.
                 */
                 // Aqui se entra cuando le das click al boton de ADD TOOLBAR
				render: function() {
			        var cssClass = 'ae-button ' + this.getStateClasses();
			        var svg = Liferay.Util.getLexiconIconTpl('desktop');

			        return (
		                <button
		                    className={cssClass}
		                    onClick={this._createActions}
		                    title="Log the selected text in the console"
		                    dangerouslySetInnerHTML={{__html: svg}}
		                />
			        );

			        // TODO:
			        // HOW TO RENDER CONTENT INSIDE THE EDITOR
				},
				/**
				 * @protected
				 * @method  _createActions
				 */
				 // Esto es lo que pasa cuando le picas al boton
				_createActions: function() {
				   	const inlineFlex = {
				      display: "inline-flex",
				      width: "100vw"
				    };

				    const centeredText = {
				      textAlign: "center"
				    };

				    const leftText = {
				      textAlign: "left"
				    };

				    const greyText = {
				      color: "grey"
				    };

				    const marginBottom = {
				      marginBottom: "20px",
				      marginTop: "20px"
				    };

				    const centeredButtons = {
				      display: "flex", 
				      justifyContent: "center"
				    };

				    const hr = {
				      border: "1px solid grey",
				      height: "0px",
				      margin: "15px 10px",
				      width: "96vw"
				    };


					let elements = new Array(this.state.actions);
					elements.fill("Plan for infrastructure needs of the whole community through a capital improvement plan, " +
      					"including an assessment of the long-term maintenance costs generated by existing and planned developments");

					let divElements = elements.map((element, index) => {
				      return (
				        // <div className="row cmap-custom-action-button" style={inlineFlex} key={index}>
				        //   { index === 0 && <hr style={hr} /> }
				        //   <div className="col-8 col-md-8 col-sm-16" style={leftText}>
				        //     <h4 style={marginBottom}>Action</h4>
				        //     <div style={greyText}>{element}</div>
				        //   </div>
				        //   <div className="col-4 col-md-4 col-sm-16" style={leftText}>
				        //     <h4 style={marginBottom}>Implementers</h4>
				        //     <div style={greyText}>Local Government</div>
				        //   </div>
				        //   <hr style={hr}/>
				        // </div>
				        <div class="actions-row row">
							<div class="col-sm-10">
							  <div class="mobile-headline whitney-small bold alt-color">Action</div>
							  <div class="sr-only">Action</div>
							  <p>Plan for infrastructure needs of the whole community through a capital improvement plan, including an assessment of the long-term maintenance costs generated by existing and planned developments</p>
							</div>
							<div class="mobile-hr col-sm-16">
							  <hr/>
							</div>
							<div class="col-sm-6">
							  <div class="mobile-headline whitney-small bold alt-color">Implementers</div>
							  <div class="sr-only">Implementers</div>
							  <p>Local governments</p>
							</div>
							<div class="col-sm-16">
							  <hr/>
							</div>
						</div>
				      )
				    });



					console.log("BATMAN IS HERE");

					console.log(CKEDITOR.config);

				   	// this tiene:
				   	// props y state
				   	let editorInstance = this.props.editor;

				   	 var element = CKEDITOR.dom.element
				   	 	.createFromHtml(
				   	 		'<div class="actions-row row">' +
			                    '<div class="col-sm-10">' +
				                    '<div class="mobile-headline whitney-small bold alt-color"><h3>Action</h3></div>' +
				                    '<div class="sr-only">Action</div>' +
				                    '<p>Plan for infrastructure needs of the whole community through a capital improvement plan, including an assessment of the long-term maintenance costs generated by existing and planned developments</p>' +
			                    '</div>' +
			                    '<div class="mobile-hr col-sm-16">' +
			                    	'<hr/>' +
			                    '</div>' +
			                    '<div class="col-sm-6">' +
			                    	'<div class="mobile-headline whitney-small bold alt-color">Implementers</div>' +
			                    	'<div class="sr-only">Implementers</div>' +
			                    	'<p>Local governments</p>' +
			                    '</div>' +
			                    '<div class="col-sm-16">' +
			                    	'<hr/>' +
			                    '</div>' +
		                  	'</div>', 
		                editorInstance._editor.document );

                  	editorInstance._editor.container.appendHtml(element.getHtml());

				   	// debugger;

				    // for (var i in divElements) {
				    // 	let actionHtmlString = React.renderToString(divElements[i]);
				  		// editorInstance._editor.container.appendHtml(actionHtmlString);
				    // }

				   	
				}
		    }
	    );

    AlloyEditor.Buttons[ActionButton.key] = AlloyEditor.ActionButton = ActionButton;

}());


/*
asD
SA
dsf
asd
fs
df
sdf

<div class="actions-row row">
<div class="col-sm-10">
  <div class="mobile-headline whitney-small bold alt-color">Action</div>
  <div class="sr-only">Action</div>
  <p>Plan for infrastructure needs of the whole community through a capital improvement plan, including an assessment of the long-term maintenance costs generated by existing and planned developments</p>
</div>
<div class="mobile-hr col-sm-16">
  <hr/>
</div>
<div class="col-sm-6">
  <div class="mobile-headline whitney-small bold alt-color">Implementers</div>
  <div class="sr-only">Implementers</div>
  <p>Local governments</p>
</div>
<div class="col-sm-16">
  <hr/>
</div>
</div>

s
fs
divElementssadf
asd
function(sadfsdfsaffsad
function() {}) {}

SAD
AS
das
D
Asd
aD
SA
D
D
D
ASD
SA
F
SDF
FDS
FS
AF
SD
FSD
AF
SADF
sdf
asdf
sd
f
asf
s

s
fsda
fsda

asdf
dsaf
ds
afd
saf
dsf
asd
fdsa
f
saf
ads



dsfdsa
fasd
f
sdaf
asd
fdsa
f
dsaf
ads
f
dsaf
sd
fsad


















safdasdfadsdsa
fasdf
sadf
asdf

asdfdsa
dsafdsf
asdfsad
sadfs

dscadssdf
sd
fas
df
ads
fads
f
asdf
sd
f
asdf
asd
f
asdf
asd
f
dsaf
asdf
sad
fds
af
ds
fs
adf
ads
fads
f
asf
sda
f
asdf
sd
fds
f
adsf
asd
fsad
fds
f








safdasdfads
sadf
ads
f
dsf
ads
fads
f
asd
fsa
df
sadf
das
f
adsf
asf
sda













sadfsdfsaf
sa
df
asdf
asd
f
asdf
ads
fa
sdf
asd

f
a
dsf
asd
f
asdf
































TEXTO INUTIL









xcvzxcxcvzx
asd
fsdf
sd
fsd
af
ads
fsda
f
dsaf
sda
fsad












*/