import * as S from './types';
export declare type VisitFunction<T> = (node: T) => void;
export interface VisitObject<T> {
    enter?: VisitFunction<T>;
    exit?: VisitFunction<T>;
}
export declare type Visit<T> = VisitFunction<T> | VisitObject<T>;
export interface Visitor {
    BooleanLiteral?: Visit<S.BooleanLiteral>;
    Call?: Visit<S.Call>;
    DelTemplate?: Visit<S.DelTemplate>;
    FunctionCall?: Visit<S.FunctionCall>;
    Interpolation?: Visit<S.Interpolation>;
    LetStatement?: Visit<S.LetStatement>;
    MapItem?: Visit<S.MapItem>;
    MapLiteral?: Visit<S.MapLiteral>;
    NumberLital?: Visit<S.NumberLiteral>;
    OtherCmd?: Visit<S.OtherCmd>;
    OtherExpression?: Visit<S.OtherExpression>;
    Param?: Visit<S.Param>;
    Program?: Visit<S.Program>;
    Reference?: Visit<S.Reference>;
    StringLiteral?: Visit<S.StringLiteral>;
    Template?: Visit<S.Template>;
    Ternary?: Visit<S.Ternary>;
    [propName: string]: Visit<S.Node> | undefined;
}
export declare function visit(node: S.Node, visitor: Visitor): void;
